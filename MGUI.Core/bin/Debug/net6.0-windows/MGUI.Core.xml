<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MGUI.Core</name>
    </assembly>
    <members>
        <member name="T:MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush">
            <summary>See also:<br/><see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGUniformBorderBrush"/><br/><see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGDockedBorderBrush"/><br/><see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGBandedBorderBrush"/><br/><see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Border_Brushes.MGBorderBand">
            <param name="ThicknessWeight">Determines how much thickness this band will be drawn with.<para/>
            EX: If drawing the entire <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGBandedBorderBrush"/> with <see cref="T:MonoGame.Extended.Thickness"/>=10, and there are 2 bands with weights of 0.4 and 0.6,<br/>
            the 1st band is drawn with Floor(10*(0.4/(0.4+0.6))=4, 2nd band is drawn with Floor(10*(0.6/(0.4+0.6))=6 thickness.<para/>
            (Weights do not need to sum to 1.0)<para/>
            Warning - the actual thickness is always rounded down, so the total rendered size of the border may end up less than the <see cref="P:MGUI.Core.UI.MGBorder.BorderThickness"/> it was drawn with.</param>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Border_Brushes.MGBorderBand.#ctor(MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush,System.Double)">
            <param name="ThicknessWeight">Determines how much thickness this band will be drawn with.<para/>
            EX: If drawing the entire <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGBandedBorderBrush"/> with <see cref="T:MonoGame.Extended.Thickness"/>=10, and there are 2 bands with weights of 0.4 and 0.6,<br/>
            the 1st band is drawn with Floor(10*(0.4/(0.4+0.6))=4, 2nd band is drawn with Floor(10*(0.6/(0.4+0.6))=6 thickness.<para/>
            (Weights do not need to sum to 1.0)<para/>
            Warning - the actual thickness is always rounded down, so the total rendered size of the border may end up less than the <see cref="P:MGUI.Core.UI.MGBorder.BorderThickness"/> it was drawn with.</param>
        </member>
        <member name="P:MGUI.Core.UI.Brushes.Border_Brushes.MGBorderBand.ThicknessWeight">
            <summary>Determines how much thickness this band will be drawn with.<para/>
            EX: If drawing the entire <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGBandedBorderBrush"/> with <see cref="T:MonoGame.Extended.Thickness"/>=10, and there are 2 bands with weights of 0.4 and 0.6,<br/>
            the 1st band is drawn with Floor(10*(0.4/(0.4+0.6))=4, 2nd band is drawn with Floor(10*(0.6/(0.4+0.6))=6 thickness.<para/>
            (Weights do not need to sum to 1.0)<para/>
            Warning - the actual thickness is always rounded down, so the total rendered size of the border may end up less than the <see cref="P:MGUI.Core.UI.MGBorder.BorderThickness"/> it was drawn with.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Border_Brushes.MGBandedBorderBrush">
            <summary>An <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush"/> that draws several nested <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush"/>es starting from the outside and moving inwards.<para/>
            See also: <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGUniformBorderBrush"/>, <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGDockedBorderBrush"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Border_Brushes.MGBandedBorderBrush.#ctor(MGUI.Core.UI.Brushes.Border_Brushes.MGBorderBand[])">
            <param name="Bands">The first band is drawn on the outer edge. Last band is drawn most inwards.</param>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Border_Brushes.MGDockedBorderBrush">
            <summary>An <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush"/> that uses separate <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/>es for each side: Left, Top, Right, Bottom<para/>
            See also: <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGUniformBorderBrush"/>, <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGBandedBorderBrush"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Border_Brushes.MGDockedBorderBrush.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>Uses an <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGSolidFillBrush"/> from the given Colors for each side.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Border_Brushes.TextureTransforms.CreateStandardRotated(MGUI.Core.UI.Brushes.Border_Brushes.Edge,MGUI.Core.UI.Brushes.Border_Brushes.Corner)">
            <param name="EdgeBasis">The <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.Edge"/> that corresponds to a 0° rotation. The next clockwise <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.Edge"/> will be rotated by 90°, and the one after that 180° etc.</param>
            <param name="CornerBasis">The <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.Corner"/> that corresponds to a 0° rotation. The next clockwise <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.Corner"/> will be rotated by 90°, and the one after that 180° etc.</param>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Border_Brushes.EdgeTransforms">
            <summary>Represents rotations and reflections to apply to each edge when rendering the <see cref="F:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.EdgeTexture"/></summary>
            <param name="LeftRotation">Rotation in radians</param>
            <param name="TopRotation">Rotation in radians</param>
            <param name="RightRotation">Rotation in radians</param>
            <param name="BottomRotation">Rotation in radians</param>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Border_Brushes.EdgeTransforms.#ctor(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,Microsoft.Xna.Framework.Graphics.SpriteEffects,Microsoft.Xna.Framework.Graphics.SpriteEffects,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>Represents rotations and reflections to apply to each edge when rendering the <see cref="F:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.EdgeTexture"/></summary>
            <param name="LeftRotation">Rotation in radians</param>
            <param name="TopRotation">Rotation in radians</param>
            <param name="RightRotation">Rotation in radians</param>
            <param name="BottomRotation">Rotation in radians</param>
        </member>
        <member name="P:MGUI.Core.UI.Brushes.Border_Brushes.EdgeTransforms.LeftRotation">
            <summary>Rotation in radians</summary>
        </member>
        <member name="P:MGUI.Core.UI.Brushes.Border_Brushes.EdgeTransforms.TopRotation">
            <summary>Rotation in radians</summary>
        </member>
        <member name="P:MGUI.Core.UI.Brushes.Border_Brushes.EdgeTransforms.RightRotation">
            <summary>Rotation in radians</summary>
        </member>
        <member name="P:MGUI.Core.UI.Brushes.Border_Brushes.EdgeTransforms.BottomRotation">
            <summary>Rotation in radians</summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Border_Brushes.CornerTransforms">
            <summary>Represents rotations and reflections to apply to each corner when rendering the <see cref="F:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.CornerTexture"/></summary>
            <param name="TopLeftRotation">Rotation in radians</param>
            <param name="TopRightRotation">Rotation in radians</param>
            <param name="BottomRightRotation">Rotation in radians</param>
            <param name="BottomLeftRotation">Rotation in radians</param>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Border_Brushes.CornerTransforms.#ctor(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,Microsoft.Xna.Framework.Graphics.SpriteEffects,Microsoft.Xna.Framework.Graphics.SpriteEffects,Microsoft.Xna.Framework.Graphics.SpriteEffects)">
            <summary>Represents rotations and reflections to apply to each corner when rendering the <see cref="F:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.CornerTexture"/></summary>
            <param name="TopLeftRotation">Rotation in radians</param>
            <param name="TopRightRotation">Rotation in radians</param>
            <param name="BottomRightRotation">Rotation in radians</param>
            <param name="BottomLeftRotation">Rotation in radians</param>
        </member>
        <member name="P:MGUI.Core.UI.Brushes.Border_Brushes.CornerTransforms.TopLeftRotation">
            <summary>Rotation in radians</summary>
        </member>
        <member name="P:MGUI.Core.UI.Brushes.Border_Brushes.CornerTransforms.TopRightRotation">
            <summary>Rotation in radians</summary>
        </member>
        <member name="P:MGUI.Core.UI.Brushes.Border_Brushes.CornerTransforms.BottomRightRotation">
            <summary>Rotation in radians</summary>
        </member>
        <member name="P:MGUI.Core.UI.Brushes.Border_Brushes.CornerTransforms.BottomLeftRotation">
            <summary>Rotation in radians</summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush">
            <summary>An <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush"/> that is composed of 2 textures:<br/>
            1 for the edges (Left, Top, Right, Bottom), and 1 for the corners (TopLeft, TopRight, BottomRight, BottomLeft)<para/>
            This brush renders the edge texture on all 4 edges, then renders the corner texture on all 4 corners, optionally applying reflections or rotations on each part</summary>
        </member>
        <member name="F:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.EdgeColor">
            <summary>A color mask to use when drawing the <see cref="F:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.EdgeTexture"/>. Usually <see cref="P:Microsoft.Xna.Framework.Color.White"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.CornerColor">
            <summary>A color mask to use when drawing the <see cref="F:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.CornerTexture"/>. Usually <see cref="P:Microsoft.Xna.Framework.Color.White"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.#ctor(MGUI.Core.UI.MGDesktop,System.String,System.String,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{MGUI.Core.UI.Brushes.Border_Brushes.TextureTransforms},System.Single)">
            <param name="EdgeTextureName">The name of the <see cref="T:MGUI.Core.UI.MGTextureData"/> used to reference the <see cref="F:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.EdgeTexture"/> settings by.<br/>
            This name must exist in <see cref="P:MGUI.Core.UI.MGResources.Textures"/><para/>
            See also: <see cref="M:MGUI.Core.UI.MGElement.GetResources"/>, <see cref="P:MGUI.Core.UI.MGDesktop.Resources"/>, <see cref="P:MGUI.Core.UI.MGResources.Textures"/></param>
            <param name="CornerTextureName">The name of the <see cref="T:MGUI.Core.UI.MGTextureData"/> used to reference the <see cref="F:MGUI.Core.UI.Brushes.Border_Brushes.MGTexturedBorderBrush.CornerTexture"/> settings by.<br/>
            This name must exist in <see cref="P:MGUI.Core.UI.MGResources.Textures"/><para/>
            See also: <see cref="M:MGUI.Core.UI.MGElement.GetResources"/>, <see cref="P:MGUI.Core.UI.MGDesktop.Resources"/>, <see cref="P:MGUI.Core.UI.MGResources.Textures"/></param>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Border_Brushes.MGUniformBorderBrush">
            <summary>An <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush"/> that uses the same <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> for each side: Left, Top, Right, Bottom<para/>
            See also: <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGDockedBorderBrush"/>, <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.MGBandedBorderBrush"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Border_Brushes.MGUniformBorderBrush.#ctor(Microsoft.Xna.Framework.Color)">
            <summary>Uses an <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGSolidFillBrush"/> from the given <paramref name="Color"/> for each side.</summary>
            <param name="Color"></param>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush">
            <summary>See also:<para/>
            <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGSolidFillBrush"/><br/>
            <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGCompositedFillBrush"/><br/>
            <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGTextureFillBrush"/><br/>
            <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGGradientFillBrush"/><br/>
            <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGDiagonalGradientFillBrush"/><br/>
            <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGPaddedFillBrush"/><br/>
            <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGBorderedFillBrush"/><br/>
            <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGProgressBarGradientBrush"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush.TryDarken(System.Single,MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush@)">
            <summary>Attempts to darken this <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/>'s color by the given <paramref name="ShadowIntensity"/> if it is a <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGSolidFillBrush"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGBorderedFillBrush">
            <summary>An <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> that combines the functionality of an <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> and an <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Brushes.Fill_Brushes.MGBorderedFillBrush.PadFillBoundsByBorderThickness">
            <summary>If true, <see cref="P:MGUI.Core.UI.Brushes.Fill_Brushes.MGBorderedFillBrush.FillBrush"/> will not be drawn to the entire bounds and will instead be compressed by the <see cref="P:MGUI.Core.UI.Brushes.Fill_Brushes.MGBorderedFillBrush.BorderThickness"/>,<br/>
            only filling the portion of the bounds that don't intersect the border.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Fill_Brushes.MGBorderedFillBrush.#ctor(MonoGame.Extended.Thickness,MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush,MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush,System.Boolean)">
            <param name="PadFillBoundsByBorderThickness">If true, <paramref name="FillBrush"/> will not be drawn to the entire bounds and will instead be compressed by the <paramref name="BorderThickness"/>,<br/>
            only filling the portion of the bounds that don't intersect the border.</param>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGCompositedFillBrush">
            <summary>An <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> that draws several nested <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/>es in order.<para/>
            Especially useful when compositing multiple transparent colors, in cases where you still need to keep track of each individual Color used instead of reducing it down to a single value.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGGradientFillBrush">
            <summary>An <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> that fills its bounds with a gradient. Each corner has a specified <see cref="T:Microsoft.Xna.Framework.Color"/> that the gradient linearly interpolates to.<para/>
            For a simpler version, use <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGDiagonalGradientFillBrush"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGDiagonalGradientFillBrush">
            <summary>A simplified version of <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGGradientFillBrush"/> that only requires 2 <see cref="T:Microsoft.Xna.Framework.Color"/>s for opposite corners of the bounds.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Fill_Brushes.MGDiagonalGradientFillBrush.#ctor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,MGUI.Core.UI.CornerType)">
            <param name="Color1Position">The corner that <paramref name="Color1"/> is associated with. <see cref="F:MGUI.Core.UI.Brushes.Fill_Brushes.MGDiagonalGradientFillBrush.Color2"/> will be at the opposite corner.</param>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGPaddedFillBrush">
            <summary>A wrapper class that allows you to manipulate the rectangular region that the nested <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> is applied to.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGProgressBarGradientBrush">
            <summary>An <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> that linearly interpolates between 2 colors based on the <see cref="T:MGUI.Core.UI.MGProgressBar"/>'s <see cref="P:MGUI.Core.UI.MGProgressBar.ValuePercent"/> to determine what color to fill the bounds with.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Fill_Brushes.MGProgressBarGradientBrush.#ctor(MGUI.Core.UI.MGProgressBar,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <param name="MinimumValueColor">The color to use when <paramref name="ProgressBar"/>'s <see cref="P:MGUI.Core.UI.MGProgressBar.ValuePercent"/> is 0.0</param>
            <param name="MiddleValueColor">The color to use when <paramref name="ProgressBar"/>'s <see cref="P:MGUI.Core.UI.MGProgressBar.ValuePercent"/> is 50.0</param>
            <param name="MaximumValueColor">The color to use when <paramref name="ProgressBar"/>'s <see cref="P:MGUI.Core.UI.MGProgressBar.ValuePercent"/> is 100.0</param>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Fill_Brushes.ColorExtensions.AsFillBrush(Microsoft.Xna.Framework.Color)">
            <summary>Converts this <see cref="T:Microsoft.Xna.Framework.Color"/> into an <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGSolidFillBrush"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGSolidFillBrush">
            <summary>An <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> that uses a single solid <see cref="F:MGUI.Core.UI.Brushes.Fill_Brushes.MGSolidFillBrush.Color"/> to fill its bounds.<para/>
            See also: <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.SolidFillBrushes"/>, which contains several static <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGSolidFillBrush"/> such as <see cref="F:MGUI.Core.UI.Brushes.Fill_Brushes.SolidFillBrushes.Green"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Fill_Brushes.SolidFillBrushes">
            <summary>This class contains a static collection of <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGSolidFillBrush"/>es, one for each named HTML color.<para/>
            See also: <see href="https://learn.microsoft.com/en-us/dotnet/media/art-color-table.png?view=windowsdesktop-6.0"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGTextureFillBrush">
            <summary>An <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> that fills its bounds with a <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Brushes.Fill_Brushes.MGTextureFillBrush.#ctor(MGUI.Core.UI.MGDesktop,System.String,MGUI.Core.UI.Stretch,System.Nullable{Microsoft.Xna.Framework.Color})">
            <param name="SourceName">The name of the <see cref="T:MGUI.Core.UI.MGTextureData"/> in <see cref="P:MGUI.Core.UI.MGResources.Textures"/> that should be drawn by this <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.MGTextureFillBrush"/>.<para/>
            See also: <see cref="M:MGUI.Core.UI.MGElement.GetResources"/>, <see cref="P:MGUI.Core.UI.MGResources.Textures"/>, <see cref="M:MGUI.Core.UI.MGResources.AddTexture(System.String,MGUI.Core.UI.MGTextureData)"/></param>
        </member>
        <member name="T:MGUI.Core.UI.Containers.Grids.ConstrainedGridLength">
            <summary>A <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/> that is also associated with a minimum and maximum size.</summary>
            <param name="MinSize">Represents either <see cref="P:MGUI.Core.UI.Containers.Grids.ColumnDefinition.MinWidth"/> or <see cref="P:MGUI.Core.UI.Containers.Grids.RowDefinition.MinHeight"/></param>
            <param name="MaxSize">Represents either <see cref="P:MGUI.Core.UI.Containers.Grids.ColumnDefinition.MaxWidth"/> or <see cref="P:MGUI.Core.UI.Containers.Grids.RowDefinition.MaxHeight"/></param>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.ConstrainedGridLength.#ctor(MGUI.Core.UI.Containers.Grids.GridLength,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>A <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/> that is also associated with a minimum and maximum size.</summary>
            <param name="MinSize">Represents either <see cref="P:MGUI.Core.UI.Containers.Grids.ColumnDefinition.MinWidth"/> or <see cref="P:MGUI.Core.UI.Containers.Grids.RowDefinition.MinHeight"/></param>
            <param name="MaxSize">Represents either <see cref="P:MGUI.Core.UI.Containers.Grids.ColumnDefinition.MaxWidth"/> or <see cref="P:MGUI.Core.UI.Containers.Grids.RowDefinition.MaxHeight"/></param>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.ConstrainedGridLength.MinSize">
            <summary>Represents either <see cref="P:MGUI.Core.UI.Containers.Grids.ColumnDefinition.MinWidth"/> or <see cref="P:MGUI.Core.UI.Containers.Grids.RowDefinition.MinHeight"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.ConstrainedGridLength.MaxSize">
            <summary>Represents either <see cref="P:MGUI.Core.UI.Containers.Grids.ColumnDefinition.MaxWidth"/> or <see cref="P:MGUI.Core.UI.Containers.Grids.RowDefinition.MaxHeight"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.ConstrainedGridLength.ParseMultiple(System.String)">
            <param name="CommaSeparatedValues">A comma-separated list of <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/>s with optional size constraints at the end of each one.<para/>
            Example:
            <code>1.5*[,100],Auto[50,200],250</code><para/>
            Parses to 3 results:<br/>
            1.5*[,100] = Weighted <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/>: Weight=1.5. MinSize=null, MaxSize=100<br/>
            Auto[50,200] = <see cref="F:MGUI.Core.UI.Containers.Grids.GridLength.Auto"/>: MinSize=50, MaxSize=200<br/>
            250 = Pixel <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/>: Pixels=250, MinSize=null, MaxSize=null</param>
        </member>
        <member name="T:MGUI.Core.UI.Containers.Grids.GridDimensionDefinition">
            <summary>Base class for <see cref="T:MGUI.Core.UI.Containers.Grids.RowDefinition"/> and <see cref="T:MGUI.Core.UI.Containers.Grids.ColumnDefinition"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.Containers.Grids.GridDimensionDefinition.DimensionsChanged">
            <summary>Invoked when any property changes that could affect the dimensions measurement/layout.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Containers.Grids.GridUnitType">
            <summary>Describes the kind of value that a <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/> object is holding.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Auto">
            <summary>The size is determined by the size properties of the content object.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Pixel">
            <summary>The value is expressed as a pixel.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Weighted">
            <summary>The value is expressed as a weighted proportion of available space.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Containers.Grids.GridLength">
            <summary>To instantiate this struct, use:<para/>
            <see cref="F:MGUI.Core.UI.Containers.Grids.GridLength.Auto"/><br/>
            <see cref="M:MGUI.Core.UI.Containers.Grids.GridLength.CreatePixelLength(System.Int32)"/><br/>
            <see cref="M:MGUI.Core.UI.Containers.Grids.GridLength.CreateWeightedLength(System.Double)"/>.<para/>
            <see cref="M:MGUI.Core.UI.Containers.Grids.GridLength.Parse(System.String)"/><br/>
            <see cref="M:MGUI.Core.UI.Containers.Grids.GridLength.ParseMultiple(System.String)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.GridLength.Pixels">
            <summary>Only valid if <see cref="P:MGUI.Core.UI.Containers.Grids.GridLength.IsPixelLength"/> is true</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.GridLength.Weight">
            <summary>Only valid if <see cref="P:MGUI.Core.UI.Containers.Grids.GridLength.IsWeightedLength"/> is true</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridLength.UnanchoredParser">
            <summary>A <see cref="T:System.Text.RegularExpressions.Regex"/> that parses <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/>s from strings.<br/>
            Does not include start of string ('^') or end of string ('$') regex anchors.<para/>
            See also: <see cref="F:MGUI.Core.UI.Containers.Grids.GridLength.AnchoredParser"/><para/>
            EX: "Auto,16px,25,*,1.5*,Auto" would contain 6 Matches</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridLength.AnchoredParser">
            <summary>A <see cref="T:System.Text.RegularExpressions.Regex"/> that parses <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/>s from strings.<br/>
            Include start of string ('^') and end of string ('$') regex anchors.<para/>
            See also: <see cref="F:MGUI.Core.UI.Containers.Grids.GridLength.UnanchoredParser"/><para/>
            EX: "1.5*" would result in a weighted <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/> with Weight=1.5.<br/>
            But "1.5*,1.2*" would not match because the start of string and end of string anchors only allow 1 <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/> match within the string.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.GridLength.Parse(System.String)">
            <param name="Length">To represent a <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Auto"/> dimension: "Auto" (case-insensitive)<br/>
            To represent a <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Pixel"/> dimension: A positive integral value. EX: "50"<br/>
            To represent a <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Weighted"/> dimension: A positive numeric value, suffixed with '*'. EX: "1.5*". If no numeric value is present, it is assumed to be "1*"</param>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.GridLength.ParseMultiple(System.String)">
            <param name="CommaSeparatedValues">A comma-separated list of dimensions, where each value is either:<para/>
            To represent a <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Auto"/> dimension: "Auto" (case-insensitive)<br/>
            To represent a <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Pixel"/> dimension: A positive integral value. EX: "50"<br/>
            To represent a <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Weighted"/> dimension: A positive numeric value, suffixed with '*'. EX: "1.5*". If no numeric value is present, it is assumed to be "1*"<para/>
            EX: "1.25*,1*,200,Auto" would yield 4 <see cref="T:MGUI.Core.UI.Containers.Grids.GridLength"/>s.</param>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridLinesVisibility.InnerHorizontal">
            <summary>Indicates that horizontal gridlines should be rendered. Does not include horizontal gridlines at the top or bottom edge of the grid's border</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridLinesVisibility.TopEdge">
            <summary>Indicates that a horizontal gridline should be rendered at the top edge of the grid's border</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridLinesVisibility.BottomEdge">
            <summary>Indicates that a horizontal gridline should be rendered at the bottom edge of the grid's border</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridLinesVisibility.InnerVertical">
            <summary>Indicates that vertical gridlines should be rendered. Does not include vertical gridlines at the left or right edge of the grid's border</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridLinesVisibility.LeftEdge">
            <summary>Indicates that a vertical gridline should be rendered at the left edge of the grid's border</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridLinesVisibility.RightEdge">
            <summary>Indicates that a vertical gridline should be rendered at the right edge of the grid's border</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridLineIntersection.HorizontalThenVertical">
            <summary>Indicates that horizontal gridlines should be rendered first, then vertical gridlines.<br/>
            This will result in the vertical gridline brush being drawn overtop of the horizontal gridline brush at their intersection points.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridLineIntersection.VerticalThenHorizontal">
            <summary>Indicates that vertical gridlines should be rendered first, then horizontal gridlines.<br/>
            This will result in the horizontal gridline brush being drawn overtop of the vertical gridline brush at their intersection points.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridSelectionMode.None">
            <summary>Indicates that nothing in an <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/> can be selected via left-clicking.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridSelectionMode.Row">
            <summary>Indicates that an entire row of content in an <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/> can be selected by left-clicking on any cell in the <see cref="T:MGUI.Core.UI.Containers.Grids.RowDefinition"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridSelectionMode.Column">
            <summary>Indicates that an entire column of content in an <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/> can be selected by left-clicking on any cell in the <see cref="T:MGUI.Core.UI.Containers.Grids.ColumnDefinition"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.GridSelectionMode.Cell">
            <summary>Indicates that a cell in an <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/> can be selected by left-clicking on it</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.NormalizeWeightedLengths">
            <summary>Converts all weighted row/column lengths to integral values that are clamped between the Min/Max size of the row/column.<para/>
            For example, if the columns are:<para/>
            <code>
            Index       Length      MinWidth        MaxWidth        ActualWidth
            0           <b>1*</b>          20              50              50
            1           25px        null            null            25
            2           <b>1.2*</b>        30              100             80
            
            Grid total width: 155
            </code>
            Normalizing the weights would convert the columns to:<para/>
            <code>
            Index       Length      MinWidth        MaxWidth        ActualWidth
            0           <b>50*</b>         20              50              50
            1           25px        null            null            25
            2           <b>80*</b>         30              100             80
            
            Grid total width: 155
            </code><para/>
            This method is typically only used when simplifying the row/column definitions before applying resizing logic, such as in <see cref="T:MGUI.Core.UI.Containers.Grids.MGGridSplitter"/>.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddColumns(System.Collections.Generic.IEnumerable{MGUI.Core.UI.Containers.Grids.GridLength})">
            <param name="Lengths">The lengths of each <see cref="T:MGUI.Core.UI.Containers.Grids.ColumnDefinition"/> to create.<para/>
            Consider using <see cref="M:MGUI.Core.UI.Containers.Grids.GridLength.ParseMultiple(System.String)"/> for a convenient/concise way to generate the values</param>
            <returns>The created <see cref="T:MGUI.Core.UI.Containers.Grids.ColumnDefinition"/>s</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddColumns(System.Collections.Generic.IEnumerable{MGUI.Core.UI.Containers.Grids.ConstrainedGridLength})">
            <param name="Lengths">The lengths of each <see cref="T:MGUI.Core.UI.Containers.Grids.ColumnDefinition"/> to create.<para/>
            Consider using <see cref="M:MGUI.Core.UI.Containers.Grids.ConstrainedGridLength.ParseMultiple(System.String)"/> for a convenient/concise way to generate the values</param>
            <returns>The created <see cref="T:MGUI.Core.UI.Containers.Grids.ColumnDefinition"/>s</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddColumn(MGUI.Core.UI.Containers.Grids.GridLength)">
            <summary>See also: <see cref="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddColumns(System.Collections.Generic.IEnumerable{MGUI.Core.UI.Containers.Grids.GridLength})"/>, <see cref="M:MGUI.Core.UI.Containers.Grids.GridLength.ParseMultiple(System.String)"/></summary>
            <param name="Length">Warning - <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Weighted"/> is treated as <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Auto"/> 
            when the column is inside of an <see cref="T:MGUI.Core.UI.MGScrollViewer"/> with a horizontal scrollbar</param>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddColumn(MGUI.Core.UI.Containers.Grids.ConstrainedGridLength)">
            <summary>See also: <see cref="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddColumns(System.Collections.Generic.IEnumerable{MGUI.Core.UI.Containers.Grids.ConstrainedGridLength})"/>, <see cref="M:MGUI.Core.UI.Containers.Grids.ConstrainedGridLength.ParseMultiple(System.String)"/></summary>
            <param name="Length">Warning - <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Weighted"/> is treated as <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Auto"/> 
            when the column is inside of an <see cref="T:MGUI.Core.UI.MGScrollViewer"/> with a horizontal scrollbar</param>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddRows(System.Collections.Generic.IEnumerable{MGUI.Core.UI.Containers.Grids.GridLength})">
            <param name="Lengths">The lengths of each <see cref="T:MGUI.Core.UI.Containers.Grids.RowDefinition"/> to create.<para/>
            Consider using <see cref="M:MGUI.Core.UI.Containers.Grids.GridLength.ParseMultiple(System.String)"/> for a convenient/concise way to generate the values</param>
            <returns>The created <see cref="T:MGUI.Core.UI.Containers.Grids.RowDefinition"/>s</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddRows(System.Collections.Generic.IEnumerable{MGUI.Core.UI.Containers.Grids.ConstrainedGridLength})">
            <param name="Lengths">The lengths of each <see cref="T:MGUI.Core.UI.Containers.Grids.RowDefinition"/> to create.<para/>
            Consider using <see cref="M:MGUI.Core.UI.Containers.Grids.ConstrainedGridLength.ParseMultiple(System.String)"/> for a convenient/concise way to generate the values</param>
            <returns>The created <see cref="T:MGUI.Core.UI.Containers.Grids.RowDefinition"/>s</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddRow(MGUI.Core.UI.Containers.Grids.GridLength)">
            <summary>See also: <see cref="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddRows(System.Collections.Generic.IEnumerable{MGUI.Core.UI.Containers.Grids.GridLength})"/>, <see cref="M:MGUI.Core.UI.Containers.Grids.GridLength.ParseMultiple(System.String)"/></summary>
            <param name="Length">Warning - <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Weighted"/> is treated as <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Auto"/> 
            when the row is inside of an <see cref="T:MGUI.Core.UI.MGScrollViewer"/> with a vertical scrollbar</param>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddRow(MGUI.Core.UI.Containers.Grids.ConstrainedGridLength)">
            <summary>See also: <see cref="M:MGUI.Core.UI.Containers.Grids.MGGrid.AddRows(System.Collections.Generic.IEnumerable{MGUI.Core.UI.Containers.Grids.ConstrainedGridLength})"/>, <see cref="M:MGUI.Core.UI.Containers.Grids.ConstrainedGridLength.ParseMultiple(System.String)"/></summary>
            <param name="Length">Warning - <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Weighted"/> is treated as <see cref="F:MGUI.Core.UI.Containers.Grids.GridUnitType.Auto"/> 
            when the row is inside of an <see cref="T:MGUI.Core.UI.MGScrollViewer"/> with a vertical scrollbar</param>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGrid.CellBounds">
            <summary>Warning - the <see cref="T:Microsoft.Xna.Framework.Rectangle"/>s in this dictionary do not account for <see cref="P:MGUI.Core.UI.MGElement.Origin"/>.<para/>
            See also: <see cref="M:MGUI.Core.UI.MGElement.ConvertCoordinateSpace(MGUI.Core.UI.CoordinateSpace,MGUI.Core.UI.CoordinateSpace,Microsoft.Xna.Framework.Point)"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGrid.ChildrenByRC">
            <summary>All content in this <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/>, indexed first by the <see cref="T:MGUI.Core.UI.Containers.Grids.RowDefinition"/> it resides in, then by the <see cref="T:MGUI.Core.UI.Containers.Grids.ColumnDefinition"/> it resides in.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGrid.ChildCellLookup">
            <summary>A lookup table that returns the <see cref="T:MGUI.Core.UI.Containers.Grids.RowDefinition"/> and <see cref="T:MGUI.Core.UI.Containers.Grids.ColumnDefinition"/> that a given <see cref="T:MGUI.Core.UI.MGElement"/> resides in.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGrid.ChildSpanLookup">
            <summary>A lookup table that returns the <see cref="T:MGUI.Core.UI.Containers.Grids.GridSpan"/> settings associated with a given <see cref="T:MGUI.Core.UI.MGElement"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.TryGetCell(MGUI.Core.UI.MGElement,MGUI.Core.UI.Containers.Grids.GridCell@)">
            <summary>Retrieves the <see cref="T:MGUI.Core.UI.Containers.Grids.GridCell"/> that the given <paramref name="Element"/> belongs to.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.TryAddChild(MGUI.Core.UI.Containers.Grids.GridCell,MGUI.Core.UI.Containers.Grids.GridSpan,MGUI.Core.UI.MGElement)">
            <returns>True if the given <paramref name="Item"/> was successfully added.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.TryRemoveChild(MGUI.Core.UI.MGElement)">
            <returns>True if the given <paramref name="Item"/> was found in <see cref="P:MGUI.Core.UI.Containers.MGMultiContentHost.Children"/> and was successfully removed.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.TryRemoveAll">
            <summary>Removes all elements from every row/column of this grid</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.UpdateSelection(Microsoft.Xna.Framework.Point,System.Boolean)">
            <param name="MousePosition">The current mouse position in <see cref="F:MGUI.Core.UI.CoordinateSpace.Layout"/><para/>
            See also: <see cref="M:MGUI.Core.UI.MGElement.ConvertCoordinateSpace(MGUI.Core.UI.CoordinateSpace,MGUI.Core.UI.CoordinateSpace,Microsoft.Xna.Framework.Point)"/></param>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGrid.GridLineIntersectionHandling">
            <summary>Default value: <see cref="F:MGUI.Core.UI.Containers.Grids.GridLineIntersection.HorizontalThenVertical"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGrid.GridLinesVisibility">
            <summary>Default value: <see cref="F:MGUI.Core.UI.Containers.Grids.GridLinesVisibility.None"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGrid.GridLineMargin">
            <summary>The amount of empty space around each gridline.<br/>
            For example: If horizontal gridlines are visible, and <see cref="P:MGUI.Core.UI.Containers.Grids.MGGrid.RowSpacing"/> = 6, and <see cref="P:MGUI.Core.UI.Containers.Grids.MGGrid.GridLineMargin"/> = 1, 
            then the horizontal gridline brush would fill the center 4 pixels of the 6 pixels between each row.<para/>
            This value should be less than half the value of <see cref="P:MGUI.Core.UI.Containers.Grids.MGGrid.RowSpacing"/>/<see cref="P:MGUI.Core.UI.Containers.Grids.MGGrid.ColumnSpacing"/> or else the corresponding gridline brush won't have any space to fill.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGrid.RowSpacing">
            <summary>The amount of padding, in pixels, between each consecutive row.<para/>
            Default value: 0<para/>
            If horizontal gridlines are visible, this value should be at least more than twice as large as <see cref="P:MGUI.Core.UI.Containers.Grids.MGGrid.GridLineMargin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGrid.ColumnSpacing">
            <summary>The amount of padding, in pixels, between each consecutive column.<para/>
            Default value: 0<para/>
            If vertical gridlines are visible, this value should be at least more than twice as large as <see cref="P:MGUI.Core.UI.Containers.Grids.MGGrid.GridLineMargin"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.ComputeDimensions(MonoGame.Extended.Size,System.Boolean)">
            <param name="IsMeasuring">True if measuring the grid's content (will result in * lengths being treated as Auto, so that this method can compute the minimally-required dimensions to show the content).<br/>
            False if the bounds of this element have already been allocated (will allow * lengths to stretch all available space)</param>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGrid.GetLastCellWithKnownBounds">
            <summary>Attempts to retrieve the bottom-right <see cref="T:MGUI.Core.UI.Containers.Grids.GridCell"/> whose layout has already been computed at least once.<para/>
            Usually this is just (_Rows[^1], _Columns[^1]) but might not be in cases where a new row/column was just added and the layout for it is yet to be calculated.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.Size">
            <summary>For a Vertical <see cref="T:MGUI.Core.UI.Containers.Grids.MGGridSplitter"/>, this represents the Width.<br/>
            For a Horizontal <see cref="T:MGUI.Core.UI.Containers.Grids.MGGridSplitter"/>, this represents the Height.<para/>
            The orientation is automatically determined based on the <see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/>.<br/>
            If the bounds are wider than they are tall, it is oriented horizontally and vice versa.<para/>
            Default value: 12.<br/>
            Recommended value: 6-20<para/>
            Note: This size does not include the size of the <see cref="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.BorderThickness"/>, if any.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.DefaultTickSize">
            <summary>The default value for <see cref="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.TickSize"/>: (22,1)</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.TickSize">
            <summary>The size to use when drawing the small grip thumb graphics in the center of this element's bounds.<para/>
            <see cref="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.TickSize"/>.Width represents the size of the larger dimension (The height of a vertical <see cref="T:MGUI.Core.UI.Containers.Grids.MGGridSplitter"/>, the width of a horizontal <see cref="T:MGUI.Core.UI.Containers.Grids.MGGridSplitter"/>)<br/>
            <see cref="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.TickSize"/>.Height represents the size of the smaller dimension.<para/>
            See also: <see cref="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.Orientation"/><para/>
            Default value: <see cref="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.DefaultTickSize"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.Foreground">
            <summary>The brush to use when drawing the thumb tick marks in the center of this element's bounds.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridData">
            <summary>Contains information about the target <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/> that the resizing operations will be applied to during <see cref="E:MGUI.Shared.Input.Mouse.MouseHandler.Dragged"/> events.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData.GridSplitterCell">
            <summary>The <see cref="T:MGUI.Core.UI.Containers.Grids.GridCell"/> that the <see cref="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData.GridSplitter"/> resides in.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData.OriginalColumns">
            <summary>Contains copies of the <see cref="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData.OwnerGrid"/>'s <see cref="P:MGUI.Core.UI.Containers.Grids.MGGrid.Columns"/>, representing the state of the columns when this object was created.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData._ActualToOriginalColumn">
            <summary>Key = Actual column. Value = Original column</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData.ActualToOriginalColumn">
            <summary>Key = Actual column. Value = Original column</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData._OriginalToActualColumn">
            <summary>Key = Original column. Value = Actual column</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData.OriginalToActualColumn">
            <summary>Key = Original column. Value = Actual column</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData.OriginalRows">
            <summary>Contains copies of the <see cref="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData.OwnerGrid"/>'s <see cref="P:MGUI.Core.UI.Containers.Grids.MGGrid.Rows"/>, representing the state of the rows when this object was created.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData._ActualToOriginalRow">
            <summary>Key = Actual row. Value = Original row</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData.ActualToOriginalRow">
            <summary>Key = Actual row. Value = Original row</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData._OriginalToActualRow">
            <summary>Key = Original row. Value = Actual row</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGGridSplitter.GridDragData.OriginalToActualRow">
            <summary>Key = Original row. Value = Actual row</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGGridSplitter.OrderedGridUnitTypes">
            <summary>Represents the order of precedence that resizing operations will be applied to rows/columns in.<para/>
            For example, if columns to the left of a <see cref="T:MGUI.Core.UI.Containers.Grids.MGGridSplitter"/> are reduced in width, it will attempt to reduce weighted columns first.<br/>
            If there are no weighted columns or the weighted column couldn't fully be reduced by the desired amount (such as if it had a MinWidth), then next the resize logic will look for pixel-length columns.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGGridSplitter.ApplyResizing(Microsoft.Xna.Framework.Point)">
            <param name="PositionDelta">The change in position from the start of the mouse drag to the current position</param>
        </member>
        <member name="T:MGUI.Core.UI.Containers.Grids.MGUniformGrid">
            <summary>Represents a 2d grid of cells, where each cell has a known, uniform size (such as a player's inventory)</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.Rows">
            <summary>Determines how many rows the grid contains.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.Columns">
            <summary>Determines how many columns the grid contains.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.CellSize">
            <summary>The dimensions of each cell.<para/>
            See also:<br/><see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.HeaderRowHeight"/><br/><see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.HeaderColumnWidth"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.HeaderRowHeight">
            <summary>If not null, this value overrides the height of the first row, rather than using <see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.CellSize"/>.Height</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.HeaderColumnWidth">
            <summary>If not null, this value overrides the width of the first column, rather than using <see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.CellSize"/>.Width</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.CellBounds">
            <summary>Warning - the <see cref="T:Microsoft.Xna.Framework.Rectangle"/>s in this dictionary do not account for <see cref="P:MGUI.Core.UI.MGElement.Origin"/><para/>
            See also: <see cref="M:MGUI.Core.UI.MGElement.ConvertCoordinateSpace(MGUI.Core.UI.CoordinateSpace,MGUI.Core.UI.CoordinateSpace,Microsoft.Xna.Framework.Point)"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGUniformGrid.ChildrenByRC">
            <summary>All content in this <see cref="T:MGUI.Core.UI.Containers.Grids.MGUniformGrid"/>, indexed by the <see cref="T:MGUI.Core.UI.Containers.Grids.GridCellIndex"/> it resides in.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Containers.Grids.MGUniformGrid.ChildCellLookup">
            <summary>A lookup table that returns the <see cref="T:MGUI.Core.UI.Containers.Grids.GridCellIndex"/> that a given <see cref="T:MGUI.Core.UI.MGElement"/> resides in.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGUniformGrid.TryGetCell(MGUI.Core.UI.MGElement,MGUI.Core.UI.Containers.Grids.GridCellIndex@)">
            <summary>Retrieves the <see cref="T:MGUI.Core.UI.Containers.Grids.GridCellIndex"/> that the given <paramref name="Element"/> belongs to.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGUniformGrid.TryAddChild(MGUI.Core.UI.Containers.Grids.GridCellIndex,MGUI.Core.UI.MGElement)">
            <returns>True if the given <paramref name="Item"/> was successfully added.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGUniformGrid.TryRemoveChild(MGUI.Core.UI.MGElement)">
            <returns>True if the given <paramref name="Item"/> was found in <see cref="P:MGUI.Core.UI.Containers.MGMultiContentHost.Children"/> and was successfully removed.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.Grids.MGUniformGrid.TryRemoveAll">
            <summary>Removes all elements from every row/column of this grid</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.GridLineIntersectionHandling">
            <summary>Default value: <see cref="F:MGUI.Core.UI.Containers.Grids.GridLineIntersection.HorizontalThenVertical"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.GridLinesVisibility">
            <summary>Default value: <see cref="F:MGUI.Core.UI.Containers.Grids.GridLinesVisibility.None"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.GridLineMargin">
            <summary>The amount of empty space around each gridline.<br/>
            For example: If horizontal gridlines are visible, and <see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.RowSpacing"/> = 6, and <see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.GridLineMargin"/> = 1, 
            then the horizontal gridline brush would fill the center 4 pixels of the 6 pixels between each row.<para/>
            This value should be less than half the value of <see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.RowSpacing"/>/<see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.ColumnSpacing"/> or else the corresponding gridline brush won't have any space to fill.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.RowSpacing">
            <summary>The amount of padding, in pixels, between each consecutive row.<para/>
            Default value: 0<para/>
            If horizontal gridlines are visible, this value should be at least more than twice as large as <see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.GridLineMargin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.ColumnSpacing">
            <summary>The amount of padding, in pixels, between each consecutive column.<para/>
            Default value: 0<para/>
            If vertical gridlines are visible, this value should be at least more than twice as large as <see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.GridLineMargin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.DrawEmptyCells">
            <summary>If true, the <see cref="P:MGUI.Core.UI.Containers.Grids.MGUniformGrid.CellBackground"/> will be drawn on cells which do not contain any child content.<para/>
            Default value: true.</summary>
        </member>
        <member name="E:MGUI.Core.UI.Containers.Grids.MGUniformGrid.OnRenderCell">
            <summary>Invoked on each cell whenever the cell is being drawn..<para/>
            This event is invoked even on cells that have no content.<br/>
            You may wish to check if <see cref="M:MGUI.Core.UI.Containers.Grids.MGUniformGrid.GetCellContent(MGUI.Core.UI.Containers.Grids.GridCellIndex)"/> is an empty list to skip custom rendering to empty cells.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Containers.MGContentHost">
            <summary>Represents an <see cref="T:MGUI.Core.UI.MGElement"/> that is capable of hosting one or more child <see cref="T:MGUI.Core.UI.MGElement"/>s as its content.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent">
            <summary>If false, attempting to add or remove children to this <see cref="T:MGUI.Core.UI.Containers.MGContentHost"/> will throw an exception.<para/>
            This is typically only false in rare cases where a control has built-in logic to micro-manage its children,<br/>
            such as the <see cref="T:MGUI.Core.UI.MGTabControl"/>'s <see cref="P:MGUI.Core.UI.MGTabControl.HeadersPanelElement"/>, or the <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/> of a <see cref="T:MGUI.Core.UI.MGComboBox`1"/> 
            (which is derived from <see cref="P:MGUI.Core.UI.MGComboBox`1.SelectedItemTemplate"/>)</summary>
        </member>
        <member name="E:MGUI.Core.UI.Containers.MGContentHost.OnContentAdded">
            <summary>Invoked when a child element is added directly to this <see cref="T:MGUI.Core.UI.Containers.MGContentHost"/>.<br/>
            (I.E. an immediate child is added)<para/>See also: <see cref="E:MGUI.Core.UI.Containers.MGContentHost.OnNestedContentAdded"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.Containers.MGContentHost.OnDirectOrNestedContentAdded">
            <summary>Invoked after either <see cref="E:MGUI.Core.UI.Containers.MGContentHost.OnContentAdded"/> or <see cref="E:MGUI.Core.UI.Containers.MGContentHost.OnNestedContentAdded"/> are invoked.</summary>
        </member>
        <member name="E:MGUI.Core.UI.Containers.MGContentHost.OnContentRemoved">
            <summary>Invoked when a child element is removed directly from this <see cref="T:MGUI.Core.UI.Containers.MGContentHost"/>.<br/>
            (I.E. an immediate child is removed)<para/>See also: <see cref="E:MGUI.Core.UI.Containers.MGContentHost.OnNestedContentRemoved"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.Containers.MGContentHost.OnDirectOrNestedContentRemoved">
            <summary>Invoked after either <see cref="E:MGUI.Core.UI.Containers.MGContentHost.OnContentRemoved"/> or <see cref="E:MGUI.Core.UI.Containers.MGContentHost.OnNestedContentRemoved"/> are invoked.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGContentHost.#ctor(MGUI.Core.UI.MGDesktop,MGUI.Core.UI.MGTheme,MGUI.Core.UI.MGWindow,MGUI.Core.UI.MGElementType)">
            <summary>Only intended to be used by <see cref="T:MGUI.Core.UI.MGWindow"/>'s constructor.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Containers.MGMultiContentHost">
            <summary>Represents an <see cref="T:MGUI.Core.UI.MGElement"/> that is capable of hosting 1 or more <see cref="T:MGUI.Core.UI.MGElement"/>s as its content, such as an <see cref="T:MGUI.Core.UI.Containers.MGStackPanel"/>.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Containers.MGSingleContentHost">
            <summary>Represents an <see cref="T:MGUI.Core.UI.MGElement"/> that is capable of hosting exactly one child <see cref="T:MGUI.Core.UI.MGElement"/> as its content, such as an <see cref="T:MGUI.Core.UI.MGBorder"/>.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGSingleContentHost.SetContent``1(MGUI.Core.UI.MGElement)">
            <returns>This <see cref="T:MGUI.Core.UI.Containers.MGContentHost"/> (for convenience, to chain multiple <see cref="M:MGUI.Core.UI.Containers.MGSingleContentHost.SetContent``1(MGUI.Core.UI.MGElement)"/> calls. Such as:<para/>
            <code>new MGBorder(...).SetContent(new MGButton(...).SetContent(new MGTextBlock(...)))</code></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGSingleContentHost.#ctor(MGUI.Core.UI.MGDesktop,MGUI.Core.UI.MGTheme,MGUI.Core.UI.MGWindow,MGUI.Core.UI.MGElementType)">
            <summary>Only intended to be used by <see cref="T:MGUI.Core.UI.MGWindow"/>'s constructor.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Containers.MGContentPresenter">
            <summary>Lightweight wrapper class that contains a single <see cref="T:MGUI.Core.UI.MGElement"/> as its <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Containers.MGHeaderedContentPresenter">
            <summary>A wrapper element that displays a <see cref="P:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.Header"/> at a given <see cref="P:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.HeaderPosition"/> in addition to the <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.HeaderChanging">
            <summary>Invoked just before <see cref="P:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.Header"/>'s value changes. The parameter is the new value that it is about to be set to. Allows cancellation.</summary>
        </member>
        <member name="E:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.HeaderChanged">
            <summary>Invoked just after <see cref="P:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.Header"/>'s value has changed.</summary>
        </member>
        <member name="E:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.HeaderPositionChanging">
            <summary>Invoked just before <see cref="P:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.HeaderPosition"/>'s value changes. The parameter is the new value that it is about to be set to. Allows cancellation.</summary>
        </member>
        <member name="E:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.HeaderPositionChanged">
            <summary>Invoked just after <see cref="P:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.HeaderPosition"/>'s value has changed.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.Spacing">
            <summary>Empty space, in pixels, between the <see cref="P:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.Header"/> and <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/>.<para/>
            Default value: <see cref="F:MGUI.Core.UI.Containers.MGHeaderedContentPresenter.DefaultSpacing"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.MGDockPanel.LastChildFill">
            <summary>If true, the last child of this <see cref="T:MGUI.Core.UI.Containers.MGDockPanel"/> will consume all remaining available space, regardless of it's <see cref="T:MGUI.Core.UI.Dock"/> position.<para/>
            Default value: true</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.MGDockPanel.ActualDockedChildren">
            <summary>The last child will consume all remaining available space if <see cref="P:MGUI.Core.UI.Containers.MGDockPanel.LastChildFill"/> is true, thus ignoring its <see cref="P:MGUI.Core.UI.Containers.MGDockPanel.DockedChild.Position"/> value.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Containers.MGOverlayPanel">
            <summary>A simple layout container that renders all its child elements overtop of each other, in the order they were added to this container, or in order of their Z-Index if specified.<para/>
            Children may also have an optional <see cref="T:MonoGame.Extended.Thickness"/> offset that determines how much empty space is around them inside this panel.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGOverlayPanel.TryAddChild(MGUI.Core.UI.MGElement,MonoGame.Extended.Thickness,System.Nullable{System.Double})">
            <param name="Offset">An offset to apply to this element's bounds. Use zero to have the element fill the entire panel's bounds (minus the panel's padding)</param>
            <param name="ZIndex">Determines the order that children are rendered in. Higher value is rendered last, appearing overtop of everything else.<para/>
            Children with <paramref name="ZIndex"/>=null will be rendered first.<para/>
            If multiple children have the same <paramref name="ZIndex"/> value, they are rendered in the same order that they were added to this panel in.</param>
            <returns>True if the given <paramref name="Item"/> was successfully added.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGOverlayPanel.TryRemoveChild(MGUI.Core.UI.MGElement)">
            <returns>True if the given <paramref name="Item"/> was found in <see cref="P:MGUI.Core.UI.Containers.MGMultiContentHost.Children"/> and was successfully removed.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGOverlayPanel.TryReplaceChild(MGUI.Core.UI.MGElement,MGUI.Core.UI.MGElement,MonoGame.Extended.Thickness,System.Nullable{System.Double})">
            <param name="Offset">An offset to apply to the new element's bounds. Use zero to have the element fill the entire panel's bounds (minus the panel's padding)</param>
            <returns>True if the given <paramref name="Old"/> item was found in <see cref="P:MGUI.Core.UI.Containers.MGMultiContentHost.Children"/> and was successfully replaced with <paramref name="New"/>.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="P:MGUI.Core.UI.Containers.MGStackPanel.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Containers.MGStackPanel.Spacing">
            <summary>A padding amount, in pixels, between each consecutive non-collapsed child in this <see cref="T:MGUI.Core.UI.Containers.MGStackPanel"/>.<br/>
            Spacing is ignored between children where <see cref="P:MGUI.Core.UI.MGElement.IsVisibilityCollapsed"/> is true.<para/>
            Default value: 0</summary>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGStackPanel.TryAddChild(MGUI.Core.UI.MGElement)">
            <returns>True if the given <paramref name="Item"/> was successfully added.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGStackPanel.TryInsertChild(System.Int32,MGUI.Core.UI.MGElement)">
            <returns>True if the given <paramref name="Item"/> was successfully inserted.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGStackPanel.TryRemoveChild(MGUI.Core.UI.MGElement)">
            <returns>True if the given <paramref name="Item"/> was found in <see cref="P:MGUI.Core.UI.Containers.MGMultiContentHost.Children"/> and was successfully removed.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGStackPanel.TryReplaceChild(MGUI.Core.UI.MGElement,MGUI.Core.UI.MGElement)">
            <returns>True if the given <paramref name="Old"/> item was found in <see cref="P:MGUI.Core.UI.Containers.MGMultiContentHost.Children"/> and was successfully replaced with <paramref name="New"/>.<br/>
            False otherwise, such as if <see cref="P:MGUI.Core.UI.Containers.MGContentHost.CanChangeContent"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.Containers.MGStackPanel.TryRemoveAll">
            <summary>Removes all elements from every row/column of this grid</summary>
        </member>
        <member name="P:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.Styles">
            <summary>See also:<br/>
            <see cref="M:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.AddNamedStyle(System.String,System.Action{MGUI.Core.UI.MGToolTip,MGUI.Core.UI.MGTextBlock})"/><br/>
            <see cref="M:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.RemoveNamedStyle(System.String)"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.AddNamedStyle(System.String,System.Action{MGUI.Core.UI.MGToolTip,MGUI.Core.UI.MGTextBlock})">
            <summary>Adds a named style to <see cref="P:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.Styles"/> so that it can be re-used and referenced via <see cref="P:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.StylePreset"/>.<para/>
            See also: <see cref="M:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.RemoveNamedStyle(System.String)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.StylePreset">
            <summary>If specified, the style with this name in <see cref="P:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.Styles"/> will be applied to the generated <see cref="T:MGUI.Core.UI.MGToolTip"/> 
            when converting from a string value to a <see cref="T:MGUI.Core.UI.MGToolTip"/>.<para/>
            This style is applied first, before any other properties such as <see cref="P:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.Background"/> or <see cref="P:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.FontSize"/> are resolved.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter.Host">
            <summary>The UI element that the generated <see cref="T:MGUI.Core.UI.MGToolTip"/> will be applied to.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipTypeConverter">
            <summary>The default <see cref="T:System.ComponentModel.TypeConverter"/> used to convert a string value to a ToolTip. For example:
            <code>ToolTip="{MGBinding Path=Description, Mode=OneWay}"</code>
            would take the string value from the DataContext's Description property, 
            and use this <see cref="T:System.ComponentModel.TypeConverter"/> to generate an <see cref="T:MGUI.Core.UI.MGToolTip"/> from it.<para/>
            See also: <see cref="T:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipConverter"/> (which is an <see cref="T:System.Windows.Data.IValueConverter"/>, not a <see cref="T:System.ComponentModel.TypeConverter"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipTypeConverter.DefaultStyle">
            <summary>An action that will be applied to the generated <see cref="T:MGUI.Core.UI.MGToolTip"/> (and it's generated <see cref="T:MGUI.Core.UI.MGTextBlock"/> Content) whenever a new <see cref="T:MGUI.Core.UI.MGToolTip"/>
            is created from a string value via <see cref="M:MGUI.Core.UI.Data_Binding.Converters.StringToToolTipTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/><para/>
            Use this action to change default values of the generated <see cref="T:MGUI.Core.UI.MGToolTip"/>, such as:<br/>
            <see cref="P:MGUI.Core.UI.MGWindow.BorderBrush"/><br/>
            <see cref="P:MGUI.Core.UI.MGWindow.BorderThickness"/><br/>
            <see cref="P:MGUI.Core.UI.MGElement.Padding"/><br/>
            <see cref="P:MGUI.Core.UI.MGElement.BackgroundBrush"/><br/>
            <see cref="P:MGUI.Core.UI.MGTextBlock.FontSize"/><br/>
            <see cref="P:MGUI.Core.UI.MGTextBlock.Foreground"/><br/>
            <see cref="P:MGUI.Core.UI.MGTextBlock.TextAlignment"/><br/>
            <see cref="P:MGUI.Core.UI.MGTextBlock.IsBold"/><br/>
            etc.<para/>
            Warning - Do not set <see cref="P:MGUI.Core.UI.MGTextBlock.Text"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.Data_Binding.DataContextResolver.DataContext">
            <summary>Indicates that data should be read from a 'DataContext' property on the targeted object.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Data_Binding.DataContextResolver.Self">
            <summary>Indicates that data should be read directly from the targeted object.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Data_Binding.DataBindingMode.OneTime">
            <summary>Indicates that the source object's property value should be read once while initializing the binding, and propagated to the target object's property value.<para/>
            The binding will not attempt to dynamically update the target object's property value if the source object's property value changes after initialization.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Data_Binding.DataBindingMode.OneWay">
            <summary>Indicates that the source object's property value should be propagated to the target object's property value.<para/>
            The binding will listen for changes to the source object's property value and attempt to dynamically update the target whenever a change is detected.<para/>
            This is the opposite binding direction of <see cref="F:MGUI.Core.UI.Data_Binding.DataBindingMode.OneWayToSource"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.Data_Binding.DataBindingMode.OneWayToSource">
            <summary>Indicates that the target object's property value should be propagated to the source object's property value.<para/>
            The binding will listen for changes to the target object's property value and attempt to dynamically update the source whenever a change is detected.<para/>
            This is the opposite binding direction of <see cref="F:MGUI.Core.UI.Data_Binding.DataBindingMode.OneWay"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.Data_Binding.DataBindingMode.TwoWay">
            <summary>Indicates that the source object's property value should be kept in sync with the target object's property value.<para/>
            If either the source or the target value changes, the binding will dynamically update the other value immediately after.<para/>
            This mode effectively combines the functionality of <see cref="F:MGUI.Core.UI.Data_Binding.DataBindingMode.OneWay"/> and <see cref="F:MGUI.Core.UI.Data_Binding.DataBindingMode.OneWayToSource"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.DataBinding">
            <summary>To instantiate a binding, use <see cref="M:MGUI.Core.UI.Data_Binding.DataBindingManager.AddBinding(MGUI.Core.UI.Data_Binding.BindingConfig,System.Object)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Data_Binding.DataBinding.SourceRoot">
            <summary>The root of the source object, as determined by <see cref="P:MGUI.Core.UI.Data_Binding.BindingConfig.SourceResolver"/> and <see cref="P:MGUI.Core.UI.Data_Binding.BindingConfig.DataContextResolver"/>.<para/>
            This might not be the same as <see cref="P:MGUI.Core.UI.Data_Binding.DataBinding.SourceObject"/> if the <see cref="P:MGUI.Core.UI.Data_Binding.BindingConfig.SourcePath"/> must recurse nested objects.<br/>
            For example, if the <see cref="P:MGUI.Core.UI.Data_Binding.BindingConfig.SourcePath"/> is "Foo.Bar", then the <see cref="P:MGUI.Core.UI.Data_Binding.DataBinding.SourceRoot"/> would be the object containing the Foo property, 
            and the <see cref="P:MGUI.Core.UI.Data_Binding.DataBinding.SourceObject"/> would be the Foo object itself. ("Bar" would be the Source Property's Name)</summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.DataBinding.GetUnderlyingType(System.Reflection.PropertyInfo)">
            <summary>Retrieve the given <paramref name="PropInfo"/>'s <see cref="P:System.Reflection.PropertyInfo.PropertyType"/>, 
            but prioritizes the underlying type if the type is wrapped in a Nullable&lt;T&gt;</summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.DataBinding.#ctor(MGUI.Core.UI.Data_Binding.BindingConfig,System.Object)">
            <param name="Object">The object which the property paths (<see cref="P:MGUI.Core.UI.Data_Binding.BindingConfig.TargetPath"/>, <see cref="P:MGUI.Core.UI.Data_Binding.BindingConfig.SourcePath"/>) should be retrieved from.</param>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.DataBinding.TrySetValue(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Object,System.Reflection.PropertyInfo,System.Type,System.Nullable{MGUI.Core.UI.Data_Binding.DataBinding.ConverterConfig},System.String)">
            <summary>Attempts to copy the given <paramref name="Value"/> into the <paramref name="TargetObject"/>'s <paramref name="TargetProperty"/>.</summary>
            <param name="TargetPropertyType">If null, will be retrieved via <see cref="M:MGUI.Core.UI.Data_Binding.DataBinding.GetUnderlyingType(System.Reflection.PropertyInfo)"/></param>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.DataBinding.TrySetValue(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Reflection.PropertyInfo,System.Type,System.Object,System.Reflection.PropertyInfo,System.Type,System.Nullable{MGUI.Core.UI.Data_Binding.DataBinding.ConverterConfig},System.String)">
            <summary>Attempts to copy the value of the <paramref name="SourceObject"/>'s <paramref name="SourceProperty"/> into the 
            <paramref name="TargetObject"/>'s <paramref name="TargetProperty"/>.</summary>
            <param name="SourcePropertyType">If null, will be retrieved via <see cref="M:MGUI.Core.UI.Data_Binding.DataBinding.GetUnderlyingType(System.Reflection.PropertyInfo)"/></param>
            <param name="TargetPropertyType">If null, will be retrieved via <see cref="M:MGUI.Core.UI.Data_Binding.DataBinding.GetUnderlyingType(System.Reflection.PropertyInfo)"/></param>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.DataBinding.ConvertValue(System.ComponentModel.ITypeDescriptorContext,System.Type,System.Type,System.Object,System.Nullable{System.Boolean},System.String)">
            <param name="CanAssign">If null, will be computed via <see cref="M:MGUI.Core.UI.Data_Binding.DataBinding.IsAssignable(System.Type,System.Type)"/></param>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.DataBinding.RegisterDefaultTypeConverter(System.Type,System.Type)">
            <summary>Registers the given <see cref="T:System.ComponentModel.TypeConverter"/> as the default converter to use when converting to the given <paramref name="TargetType"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.DataBinding.RegisterDefaultTypeConverter(System.Type,System.ComponentModel.TypeConverterAttribute)">
            <summary>Registers the given <see cref="T:System.ComponentModel.TypeConverter"/> as the default converter to use when converting to the given <paramref name="TargetType"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.Data_Binding.DataBinding.IsSubscribedToSourceObjectPropertyChanged">
            <summary>True if this binding subscribed to the <see cref="P:MGUI.Core.UI.Data_Binding.DataBinding.SourceObject"/>'s PropertyChanged event the last time <see cref="P:MGUI.Core.UI.Data_Binding.DataBinding.SourceObject"/> was set.<para/>
            If true, the event must be unsubscribed from when changing <see cref="P:MGUI.Core.UI.Data_Binding.DataBinding.SourceObject"/> or when disposing this <see cref="T:MGUI.Core.UI.Data_Binding.DataBinding"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.Data_Binding.DataBinding.IsSubscribedToTargetObjectPropertyChanged">
            <summary>True if this binding subscribed to the <see cref="F:MGUI.Core.UI.Data_Binding.DataBinding.TargetObject"/>'s PropertyChanged event during initialization.<para/>
            If true, the event must be unsubscribed from when disposing this <see cref="T:MGUI.Core.UI.Data_Binding.DataBinding"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.DataBindingManager">
            <summary>Static class that keeps track of all <see cref="T:MGUI.Core.UI.Data_Binding.DataBinding"/>s for all objects.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.DataBindingManager.RemoveBindings(System.Object)">
            <summary>Removes all <see cref="T:MGUI.Core.UI.Data_Binding.DataBinding"/>s that use <paramref name="TargetObject"/> as their <see cref="F:MGUI.Core.UI.Data_Binding.DataBinding.TargetObject"/></summary>
            <returns>The count of the removed bindings</returns>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.ISourceObjectResolver">
            <summary>For concrete implementations, use:<br/>
            <see cref="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverSelf"/><br/>
            <see cref="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverElementName"/><br/>
            <see cref="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverStaticResource"/><br/>
            <see cref="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverElementAncestor`1"/><br/>
            <see cref="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverDesktop"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.ISourceObjectResolver.FromSelf">
            <summary>Indicates that the source object of the binding is the same as the Targeted object</summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.ISourceObjectResolver.FromElementName(System.String)">
            <summary>Indicates that the source object of the binding should be retrieved via <see cref="M:MGUI.Core.UI.MGWindow.GetElementByName(System.String)"/><br/>
            (assuming the target object is of type <see cref="T:MGUI.Core.UI.MGElement"/> and belongs to a <see cref="T:MGUI.Core.UI.MGWindow"/>)</summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.ISourceObjectResolver.FromResourceName(System.String)">
            <summary>Indicates that the source object of the binding should be retrieved via a particular named resource in <see cref="P:MGUI.Core.UI.MGResources.StaticResources"/><br/>
            (assuming the target object is of type <see cref="T:MGUI.Core.UI.MGElement"/> so that the resources can obtained from <see cref="P:MGUI.Core.UI.MGDesktop.Resources"/>)</summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.ISourceObjectResolver.FromElementAncestor``1(System.Int32)">
            <summary>Indicates that the source object of the binding should be retrieved by traversing up the visual tree 
            by a certain number of hierarchical levels and looking for a parent of a particular <typeparamref name="T"/> type.<br/>
            (assuming the target object is of type <see cref="T:MGUI.Core.UI.MGElement"/>)</summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.ISourceObjectResolver.FromDesktop">
            <summary>Indicates that the source object of the binding should be retrieved via <see cref="M:MGUI.Core.UI.MGElement.GetDesktop"/><br/>
            (assuming the target object is of type <see cref="T:MGUI.Core.UI.MGElement"/>)</summary>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverSelf">
            <summary>Indicates that the source object of the binding is the same as the Targeted object</summary>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverElementName">
            <summary>Indicates that the source object of the binding should be retrieved via <see cref="M:MGUI.Core.UI.MGWindow.GetElementByName(System.String)"/><br/>
            (assuming the target object is of type <see cref="T:MGUI.Core.UI.MGElement"/> and belongs to a <see cref="T:MGUI.Core.UI.MGWindow"/>)</summary>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverStaticResource">
            <summary>Indicates that the source object of the binding should be retrieved via <see cref="P:MGUI.Core.UI.MGResources.StaticResources"/> using the given <see cref="F:MGUI.Core.UI.Data_Binding.SourceObjectResolverStaticResource.ResourceName"/><br/>
            (assuming the target object is of type <see cref="T:MGUI.Core.UI.MGElement"/> so that the resources can obtained from <see cref="P:MGUI.Core.UI.MGDesktop.Resources"/>)</summary>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverElementAncestor`1">
            <summary>Indicates that the source object of the binding should be retrieved by traversing up the visual tree 
            by a certain number of hierarchical levels and looking for a parent of a particular <typeparamref name="T"/> type.<br/>
            (assuming the target object is of type <see cref="T:MGUI.Core.UI.MGElement"/>)</summary>
        </member>
        <member name="F:MGUI.Core.UI.Data_Binding.SourceObjectResolverElementAncestor`1.AncestorLevel">
            <summary>The number of matches that must be found before ending the search.<para/>
            EX: If <see cref="F:MGUI.Core.UI.Data_Binding.SourceObjectResolverElementAncestor`1.AncestorLevel"/>=2 and <typeparamref name="T"/>=typeof(<see cref="T:MGUI.Core.UI.MGBorder"/>), 
            this resolver will look for the 2nd <see cref="T:MGUI.Core.UI.MGBorder"/> parent when traversing the visual tree upwards.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Data_Binding.SourceObjectResolverElementAncestor`1.#ctor(System.Int32)">
            <param name="AncestorLevel">The number of matches that must be found before ending the search.<para/>
            EX: If <paramref name="AncestorLevel"/>=2 and <typeparamref name="T"/>=typeof(<see cref="T:MGUI.Core.UI.MGBorder"/>), 
            this resolver will look for the 2nd <see cref="T:MGUI.Core.UI.MGBorder"/> parent when traversing the visual tree upwards.</param>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverDesktop">
            <summary>Indicates that the source object of the binding should be retrieved via <see cref="M:MGUI.Core.UI.MGElement.GetDesktop"/><br/>
            (assuming the target object is of type <see cref="T:MGUI.Core.UI.MGElement"/>)</summary>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.PropertyNameHandler">
            <summary>Helper class that executes the given handler logic when a specific named property on the target object changes.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Data_Binding.PropertyNameListener">
            <summary>Wrapper class that only propagates the <see cref="E:MGUI.Core.UI.Data_Binding.PropertyNameListener.PropertyChanged"/> events of the given <see cref="F:MGUI.Core.UI.Data_Binding.PropertyNameListener.Source"/> object 
            if the <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/> matches the given <see cref="F:MGUI.Core.UI.Data_Binding.PropertyNameListener.PropertyName"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.MGBinding.Path">
            <summary>The path to the source property. Separate nested object properties with a '.'.<para/>
            EX: "Location.City" retrieve the value of the "Location" property. Then look for the value of the "City" property on that inner object.</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.MGBinding.ElementName">
            <summary>If specified, the binding will use <see cref="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverElementName"/> to find the source object.<para/>
            See also: <see cref="P:MGUI.Core.UI.XAML.MGBinding.SourceObjectResolver"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.MGBinding.ResourceName">
            <summary>If specified, the binding will use <see cref="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverStaticResource"/> to find the source object.<para/>
            See also: <see cref="P:MGUI.Core.UI.XAML.MGBinding.SourceObjectResolver"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.MGBinding.DataContextResolver">
            <summary>If not specified, defaults to <see cref="F:MGUI.Core.UI.Data_Binding.DataContextResolver.Self"/> when binding using <see cref="P:MGUI.Core.UI.XAML.MGBinding.ElementName"/> or <see cref="P:MGUI.Core.UI.XAML.MGBinding.ResourceName"/>.<br/>
            Uses <see cref="F:MGUI.Core.UI.Data_Binding.DataContextResolver.DataContext"/> in all other cases.</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.MGBinding.Converter">
            <summary>Optional. Converts values of the source or target property before setting them to the other property.<para/>
            If <see cref="P:MGUI.Core.UI.XAML.MGBinding.Mode"/> is <see cref="F:MGUI.Core.UI.Data_Binding.DataBindingMode.OneTime"/>, <see cref="F:MGUI.Core.UI.Data_Binding.DataBindingMode.OneWay"/>, or <see cref="F:MGUI.Core.UI.Data_Binding.DataBindingMode.TwoWay"/>,
            this converter must implement <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>.<para/>
            If <see cref="P:MGUI.Core.UI.XAML.MGBinding.Mode"/> is <see cref="F:MGUI.Core.UI.Data_Binding.DataBindingMode.OneWayToSource"/> or <see cref="F:MGUI.Core.UI.Data_Binding.DataBindingMode.TwoWay"/>,
            this converter must implement <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.MGBinding.ConverterParameter">
            <summary>Optional. A parameter to pass in when converting values via the given <see cref="P:MGUI.Core.UI.XAML.MGBinding.Converter"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.MGBinding.FallbackValue">
            <summary>Optional. A default value to set the target property to if the source property of the binding could not be resolved.</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.MGBinding.StringFormat">
            <summary>Optional. Used to format values that are being converted to a string property value.</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.MGBinding.TargetPathOverride">
            <summary>This value is automatically determined by the name of the property that the binding is attached to.<para/>
            However, some properties on <see cref="N:MGUI.Core.UI.XAML"/> objects (such as <see cref="T:MGUI.Core.UI.XAML.Button"/>) don't have the same name as their corresponding property on the
            <see cref="N:MGUI.Core.UI"/> objects (such as <see cref="T:MGUI.Core.UI.MGButton"/>), so you can override the <see cref="P:MGUI.Core.UI.Data_Binding.BindingConfig.TargetPath"/> if needed.</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.MGBinding.SourceObjectResolver">
            <summary>Uses <see cref="T:MGUI.Core.UI.Data_Binding.SourceObjectResolverSelf"/> if neither <see cref="P:MGUI.Core.UI.XAML.MGBinding.ElementName"/> nor <see cref="P:MGUI.Core.UI.XAML.MGBinding.ResourceName"/> are specified.</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.UniformGrid.AutoAssignCells">
            <summary>If true, the Row and Column values of each child element will be automatically assigned in order.<para/>
            For example, if there are 2 columns, 3 rows:<br/>
            1st child will be placed in Row=0,Column=0. 2nd child will be placed in Row=0,Column=1. 3rd child will be placed in Row=1,Column=0 etc.<para/>
            Explicitly setting the child element's row or column to a non-zero value will override this behavior.</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Button.CommandName">
            <summary>The name of the command to execute when this <see cref="T:MGUI.Core.UI.XAML.Button"/> is left-clicked, or null if no named command should be executed when left-clicked.<para/>
            This name should exist in <see cref="P:MGUI.Core.UI.MGResources.Commands"/>, otherwise nothing will be invoked when clicking this <see cref="T:MGUI.Core.UI.XAML.Button"/><para/>
            See also:<br/><see cref="M:MGUI.Core.UI.MGElement.GetResources"/><br/><see cref="P:MGUI.Core.UI.MGResources.Commands"/><br/><see cref="M:MGUI.Core.UI.MGResources.AddCommand(System.String,System.Action{MGUI.Core.UI.MGElement})"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.ComboBox.ItemType">
            <summary>The generic type that will be used when instantiating <see cref="T:MGUI.Core.UI.MGComboBox`1"/>.<para/>
            To set this value from a XAML string, you must define the namespace the type belongs to, then use the x:Type Markup Extension<br/>
            (See: <see href="https://learn.microsoft.com/en-us/dotnet/desktop/xaml-services/xtype-markup-extension"/>)<para/>
            Example:
            <code>&lt;ComboBox xmlns:System="clr-namespace:System;assembly=mscorlib" ItemType="{x:Type System:Double}" /&gt;</code><para/>
            Default value: <code>typeof(object)</code></summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Window.ThemeName">
            <summary>The name of the <see cref="T:MGUI.Core.UI.MGTheme"/> to use when parsing this XAML content.<br/>
            Themes are retrieved via <see cref="P:MGUI.Core.UI.MGResources.Themes"/>. Uses <see cref="P:MGUI.Core.UI.MGResources.DefaultTheme"/> if no name is specified.</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Element.Dock">
            <summary>Used by <see cref="T:MGUI.Core.UI.XAML.DockPanel"/>'s children</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Element.GridRow">
            <summary>Used by <see cref="T:MGUI.Core.UI.XAML.Grid"/>'s children</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Element.GridColumn">
            <summary>Used by <see cref="T:MGUI.Core.UI.XAML.Grid"/>'s children</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Element.GridRowSpan">
            <summary>Used by <see cref="T:MGUI.Core.UI.XAML.Grid"/>'s children</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Element.GridColumnSpan">
            <summary>Used by <see cref="T:MGUI.Core.UI.XAML.Grid"/>'s children</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Element.GridAffectsMeasure">
            <summary>Used by <see cref="T:MGUI.Core.UI.XAML.Grid"/>'s children</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Element.Offset">
            <summary>Used by <see cref="T:MGUI.Core.UI.XAML.OverlayPanel"/>'s children</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Element.ZIndex">
            <summary>Used by <see cref="T:MGUI.Core.UI.XAML.OverlayPanel"/>'s children</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Element.IsStyleable">
            <summary>If true, this object can have <see cref="T:MGUI.Core.UI.XAML.Setter"/>s applied to its properties.<para/>
            Default value: true</summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Element.StyleNames">
            <summary>The names of the named <see cref="T:MGUI.Core.UI.XAML.Style"/>s that should be applied to this <see cref="T:MGUI.Core.UI.XAML.Element"/>.<br/>
            Use a comma to delimit multiple names, such as: "Style1,Style2<br/>
            to apply <see cref="T:MGUI.Core.UI.XAML.Style"/> with <see cref="P:MGUI.Core.UI.XAML.Style.Name"/>="Style1" and <see cref="T:MGUI.Core.UI.XAML.Style"/> with <see cref="P:MGUI.Core.UI.XAML.Style.Name"/>="Style2" to this <see cref="T:MGUI.Core.UI.XAML.Element"/><para/>
            See also: <see cref="P:MGUI.Core.UI.XAML.Style.Name"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.XAML.Element.ToElement``1(MGUI.Core.UI.MGWindow,MGUI.Core.UI.MGElement,System.Action{``0})">
            <param name="ApplyBaseSettings">If not null, this action will be invoked before <see cref="M:MGUI.Core.UI.XAML.Element.ApplySettings(MGUI.Core.UI.MGElement,MGUI.Core.UI.MGElement,System.Boolean)"/> executes.</param>
        </member>
        <member name="M:MGUI.Core.UI.XAML.Element.ApplySettings(MGUI.Core.UI.MGElement,MGUI.Core.UI.MGElement,System.Boolean)">
            <param name="IncludeContent">Recommended value: true. If true, the child XAML content, if any, will also be processed.</param>
        </member>
        <member name="M:MGUI.Core.UI.XAML.Element.ProcessBindings(MGUI.Core.UI.MGElement,System.Boolean,System.Object)">
            <summary>Resolves any pending <see cref="T:MGUI.Core.UI.Data_Binding.BindingConfig"/>s by converting them into <see cref="T:MGUI.Core.UI.Data_Binding.DataBinding"/>s</summary>
            <param name="DataContextOverride">If not null, this value will be applied to the <see cref="P:MGUI.Core.UI.MGElement.DataContextOverride"/> value of every element that is processed.<para/>
            If <paramref name="RecurseChildren"/> is false, this is only applied to <paramref name="Element"/>. Else it's applied to <paramref name="Element"/> and all its nested children.</param>
        </member>
        <member name="M:MGUI.Core.UI.XAML.Element.ApplyDerivedSettings(MGUI.Core.UI.MGElement,MGUI.Core.UI.MGElement,System.Boolean)">
            <param name="IncludeContent">Recommended value: true. If true, child XAML content, if any, will also be processed.</param>
        </member>
        <member name="P:MGUI.Core.UI.XAML.ListBox.ItemType">
            <summary>The generic type that will be used when instantiating <see cref="T:MGUI.Core.UI.MGListBox`1"/>.<para/>
            To set this value from a XAML string, you must define the namespace the type belongs to, then use the x:Type Markup Extension<br/>
            (See: <see href="https://learn.microsoft.com/en-us/dotnet/desktop/xaml-services/xtype-markup-extension"/>)<para/>
            Example:
            <code>&lt;ListBox xmlns:System="clr-namespace:System;assembly=mscorlib" ItemType="{x:Type System:Double}" /&gt;</code><para/>
            Default value: <code>typeof(object)</code></summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.ListView.ItemType">
            <summary>The generic type that will be used when instantiating <see cref="T:MGUI.Core.UI.MGListView`1"/>.<para/>
            To set this value from a XAML string, you must define the namespace the type belongs to, then use the x:Type Markup Extension<br/>
            (See: <see href="https://learn.microsoft.com/en-us/dotnet/desktop/xaml-services/xtype-markup-extension"/>)<para/>
            Example:
            <code>&lt;ListView xmlns:System="clr-namespace:System;assembly=mscorlib" ItemType="{x:Type System:Double}" /&gt;</code><para/>
            Default value: <code>typeof(object)</code></summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.Style.Name">
            <summary>If null, this style will affect all elements of the <see cref="P:MGUI.Core.UI.XAML.Style.TargetType"/>.<br/>
            Otherwise, this style will only affect elements of the <see cref="P:MGUI.Core.UI.XAML.Style.TargetType"/> that also have this name in their <see cref="P:MGUI.Core.UI.XAML.Element.StyleNames"/><para/>
            This value should never contain commas, because commas are used to delimit multiple style names in <see cref="P:MGUI.Core.UI.XAML.Element.StyleNames"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.XAML.ContentTemplate.ContentTemplateName">
            <summary>The name of the <see cref="T:MGUI.Core.UI.MGElementTemplate"/> to when generating the Content. <see cref="T:MGUI.Core.UI.MGElementTemplate"/>s are retrieved via <see cref="P:MGUI.Core.UI.MGResources.ElementTemplates"/><para/>
            You should only specify either <see cref="P:MGUI.Core.UI.XAML.ContentTemplate.ContentTemplateName"/> or <see cref="P:MGUI.Core.UI.XAML.ContentTemplate.Content"/>, not both.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGDesktop.Resources"/>, <see cref="P:MGUI.Core.UI.MGResources.ElementTemplates"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.XAML.ContentTemplate.GetContent(MGUI.Core.UI.MGWindow,MGUI.Core.UI.MGElement,System.Object,System.Action{MGUI.Core.UI.MGElement})">
            <param name="ApplyBaseSettings">If not null, this action will be invoked before <see cref="M:MGUI.Core.UI.XAML.Element.ApplySettings(MGUI.Core.UI.MGElement,MGUI.Core.UI.MGElement,System.Boolean)"/>
            executes on the created <see cref="T:MGUI.Core.UI.MGElement"/>.</param>
        </member>
        <member name="M:MGUI.Core.UI.XAML.XAMLParser.Load``1(MGUI.Core.UI.MGWindow,System.String,System.Boolean,System.Boolean)">
            <param name="SanitizeXAMLString">If true, the given <paramref name="XAMLString"/> will be pre-processed via the following logic:<para/>
            1. Trim leading and trailing whitespace<br/>
            2. Insert required XML namespaces (such as "xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation")<br/>
            3. Replace type names with their fully-qualified names, such as "Button" -> "MGUI:Button" where the "MGUI" namespace prefix points to the URI defined by <see cref="F:MGUI.Core.UI.XAML.XAMLParser.XMLLocalNameSpaceUri"/><para/>
            If your XAML already contains fully-qualified types, you probably should set this to false.</param>
            <param name="ReplaceLinebreakLiterals">If true, the literal string @"\n" will be replaced with "&#38;#x0a;", which is the XAML encoding of the linebreak character '\n'.<br/>
            If false, setting the text of an <see cref="T:MGUI.Core.UI.MGTextBlock"/> requires encoding the '\n' character as "&#38;#x0a;"<para/>
            See also: <see href="https://stackoverflow.com/a/183435/11689514"/></param>
        </member>
        <member name="M:MGUI.Core.UI.XAML.XAMLParser.LoadRootWindow(MGUI.Core.UI.MGDesktop,System.String,System.Boolean,System.Boolean)">
            <param name="SanitizeXAMLString">If true, the given <paramref name="XAMLString"/> will be pre-processed via the following logic:<para/>
            1. Trim leading and trailing whitespace<br/>
            2. Insert required XML namespaces (such as "xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation")<br/>
            3. Replace type names with their fully-qualified names, such as "Button" -> "MGUI:Button" where the "MGUI" namespace prefix points to the URI defined by <see cref="F:MGUI.Core.UI.XAML.XAMLParser.XMLLocalNameSpaceUri"/><para/>
            If your XAML already contains fully-qualified types, you probably should set this to false.</param>
            <param name="ReplaceLinebreakLiterals">If true, the literal string @"\n" will be replaced with "&#38;#x0a;", which is the XAML encoding of the linebreak character '\n'.<br/>
            If false, setting the text of an <see cref="T:MGUI.Core.UI.MGTextBlock"/> requires encoding the '\n' character as "&#38;#x0a;"<para/>
            See also: <see href="https://stackoverflow.com/a/183435/11689514"/></param>
        </member>
        <member name="F:MGUI.Core.UI.MGElementType.Misc">
            <summary>Represents an element that doesn't fit any other category</summary>
        </member>
        <member name="T:MGUI.Core.UI.VerticalAlignment">
            <summary>Describes how a child element is vertically positioned or stretched within a parent's layout slot</summary>
        </member>
        <member name="F:MGUI.Core.UI.VerticalAlignment.Top">
            <summary>The child element is aligned to the top of the parent's layout slot.</summary>
        </member>
        <member name="F:MGUI.Core.UI.VerticalAlignment.Center">
            <summary>The child element is aligned to the center of the parent's layout slot.</summary>
        </member>
        <member name="F:MGUI.Core.UI.VerticalAlignment.Bottom">
            <summary>The child element is aligned to the bottom of the parent's layout slot.</summary>
        </member>
        <member name="F:MGUI.Core.UI.VerticalAlignment.Stretch">
            <summary>The child element stretches to fill the parent's layout slot.</summary>
        </member>
        <member name="T:MGUI.Core.UI.HorizontalAlignment">
            <summary>Indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element.</summary>
        </member>
        <member name="F:MGUI.Core.UI.HorizontalAlignment.Left">
            <summary>An element aligned to the left of the layout slot for the parent element.</summary>
        </member>
        <member name="F:MGUI.Core.UI.HorizontalAlignment.Center">
            <summary>An element aligned to the center of the layout slot for the parent element.</summary>
        </member>
        <member name="F:MGUI.Core.UI.HorizontalAlignment.Right">
            <summary>An element aligned to the right of the layout slot for the parent element.</summary>
        </member>
        <member name="F:MGUI.Core.UI.HorizontalAlignment.Stretch">
            <summary>An element stretched to fill the entire layout slot of the parent element.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Orientation">
            <summary>Defines the different orientations that a control or layout can have.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Orientation.Horizontal">
            <summary>Control or layout should be horizontally oriented.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Orientation.Vertical">
            <summary>Control or layout should be vertically oriented.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Visibility">
            <summary>Specifies the display state of an element.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Visibility.Visible">
            <summary>Display the element.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Visibility.Hidden">
            <summary>Do not display the element, but reserve space for the element in layout.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Visibility.Collapsed">
            <summary>Do not display the element, and do not reserve space for it in layout.</summary>
        </member>
        <member name="T:MGUI.Core.UI.ScrollBarVisibility">
            <summary>Specifies the visibility of a ScrollBar for scrollable content.</summary>
        </member>
        <member name="F:MGUI.Core.UI.ScrollBarVisibility.Disabled">
            <summary>A ScrollBar does not appear even when the viewport cannot display all of the content.<br/>
            The content is not allocated infinite space in the ScrollBar's dimension, and instead only receives the space of the viewport.<para/>
            ScrollBar Layout Size: Zero<br/>
            ScrollBar Render Size: Zero<br/>
            Content AvailableSpace: Same as Viewport</summary>
        </member>
        <member name="F:MGUI.Core.UI.ScrollBarVisibility.Auto">
            <summary>A ScrollBar appears if the viewport cannot display all of the content. The content is allocated infinite space in the ScrollBar's dimension.<para/>
            If Content fits within Viewport:<br/>
            ScrollBar Layout Size: Zero<br/>
            ScrollBar Render Size: Zero<br/>
            Content AvailableSpace: Infinite<para/>
            If Content does not fit within Viewport:<br/>
            ScrollBar Layout Size: Non-Zero<br/>
            ScrollBar Render Size: Non-Zero<br/>
            Content AvailableSpace: Infinite</summary>
        </member>
        <member name="F:MGUI.Core.UI.ScrollBarVisibility.Hidden">
            <summary>A ScrollBar does not appear, even when the viewport cannot display all of the content, but the ScrollBar still consumes space in the layout.<br/>
            The content is allocated infinite space in the ScrollBar's dimension.<br/>
            This value is typically only used if you want to render your own ScrollBar, while having the ScrollBar's layout bounds reserved for you. Otherwise, consider using <see cref="F:MGUI.Core.UI.ScrollBarVisibility.Collapsed"/> instead.<para/>
            ScrollBar Layout Size: Non-Zero<br/>
            ScrollBar Render Size: Zero<br/>
            Content AvailableSpace: Infinite</summary>
        </member>
        <member name="F:MGUI.Core.UI.ScrollBarVisibility.Visible">
            <summary>A ScrollBar always appears, even if the viewport can display all of the content. The content is allocated infinite space in the ScrollBar's dimension.<para/>
            ScrollBar Layout Size: Non-Zero<br/>
            ScrollBar Render Size: Non-Zero<br/>
            Content AvailableSpace: Infinite</summary>
        </member>
        <member name="F:MGUI.Core.UI.ScrollBarVisibility.Collapsed">
            <summary>A ScrollBar does not appear, even when the viewport cannot display all of the content. The content is allocated infinite space in the ScrollBar's dimension.<para/>
            ScrollBar Layout Size: Zero<br/>
            ScrollBar Render Size: Zero<br/>
            Content  AvailableSpace: Infinite</summary>
        </member>
        <member name="T:MGUI.Core.UI.Dock">
            <summary>Specifies the Dock position of a child element that is inside a DockPanel.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Dock.Left">
            <summary>A child element that is positioned on the left side of the DockPanel.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Dock.Top">
            <summary>A child element that is positioned at the top of the DockPanel.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Dock.Right">
            <summary>A child element that is positioned on the right side of the DockPanel.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Dock.Bottom">
            <summary>A child element that is positioned at the bottom of the DockPanel.</summary>
        </member>
        <member name="T:MGUI.Core.UI.SizeToContent">
            <summary>Specifies how a window will automatically size itself to fit the size of its content.</summary>
        </member>
        <member name="F:MGUI.Core.UI.SizeToContent.Manual">
            <summary>Specifies that a window will not automatically set its size to fit the size of its content. 
            Instead, the size of a window is determined by other properties, including WindowWidth, WindowHeight, 
            MaxWidth, MaxHeight, MinWidth, and MinHeight.</summary>
        </member>
        <member name="F:MGUI.Core.UI.SizeToContent.Width">
            <summary>Specifies that a window will automatically set its width to fit the width of its content, but not the height.</summary>
        </member>
        <member name="F:MGUI.Core.UI.SizeToContent.Height">
            <summary>Specifies that a window will automatically set its height to fit the height of its content, but not the width.</summary>
        </member>
        <member name="F:MGUI.Core.UI.SizeToContent.WidthAndHeight">
            <summary>Specifies that a window will automatically set both its width and height to fit the width and height of its content.</summary>
        </member>
        <member name="F:MGUI.Core.UI.CoordinateSpace.Layout">
            <summary>Coordinates in this <see cref="T:MGUI.Core.UI.CoordinateSpace"/> are relative to an origin specified by <see cref="P:MGUI.Core.UI.MGElement.Origin"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.CoordinateSpace.UnscaledScreen">
            <summary>Coordinates in this <see cref="T:MGUI.Core.UI.CoordinateSpace"/> always use an origin of <see cref="P:Microsoft.Xna.Framework.Point.Zero"/>,<br/>
            but do not account for <see cref="P:MGUI.Core.UI.MGWindow.Scale"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.CoordinateSpace.Screen">
            <summary>Coordinates in this <see cref="T:MGUI.Core.UI.CoordinateSpace"/> always use an origin of <see cref="P:Microsoft.Xna.Framework.Point.Zero"/>, and have already been scaled based on <see cref="P:MGUI.Core.UI.MGWindow.Scale"/> value.<para/>
            Mouse Positions are typically defined in this <see cref="T:MGUI.Core.UI.CoordinateSpace"/> and converted to <see cref="F:MGUI.Core.UI.CoordinateSpace.Layout"/><br/>
            before checking if the position intersects the <see cref="T:MGUI.Core.UI.MGElement"/> bounds (such as <see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGButton.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGButton.CommandName">
            <summary>The name of the command to execute when this <see cref="T:MGUI.Core.UI.MGButton"/> is left-clicked, or null if no named command should be executed when left-clicked.<para/>
            If <see cref="P:MGUI.Core.UI.MGButton.Command"/> is also specified, <see cref="P:MGUI.Core.UI.MGButton.Command"/> will take priority and be executed first.<br/>
            (Which may result in the <see cref="P:MGUI.Core.UI.MGButton.CommandName"/> logic not being executed if <see cref="P:MGUI.Core.UI.MGButton.Command"/> returns true)<para/>
            See also:<br/><see cref="P:MGUI.Core.UI.MGButton.Command"/><br/><see cref="M:MGUI.Core.UI.MGElement.GetResources"/><br/><see cref="P:MGUI.Core.UI.MGResources.Commands"/><br/><see cref="M:MGUI.Core.UI.MGResources.AddCommand(System.String,System.Action{MGUI.Core.UI.MGElement})"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGButton.Command">
            <summary>The function to execute when this <see cref="T:MGUI.Core.UI.MGButton"/> is left-clicked, or null if no explicit action should be executed when left-clicked.<para/>
            The parameter of this <see cref="T:System.Func`2"/> is this <see cref="T:MGUI.Core.UI.MGButton"/> instance.<br/>
            The return value should be true if the function handled the click, or false to let the click propagate to other mouse handlers.<para/>
            If both <see cref="P:MGUI.Core.UI.MGButton.CommandName"/> and <see cref="P:MGUI.Core.UI.MGButton.Command"/> are specified, this <see cref="P:MGUI.Core.UI.MGButton.Command"/> takes priority and is executed first.<br/>
            (Which may result in the <see cref="P:MGUI.Core.UI.MGButton.CommandName"/> logic not being executed if this <see cref="P:MGUI.Core.UI.MGButton.Command"/> returns true)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGButton.IsRepeatButton">
            <summary>If true, this <see cref="T:MGUI.Core.UI.MGButton"/>'s <see cref="P:MGUI.Core.UI.MGButton.CommandName"/> and/or <see cref="P:MGUI.Core.UI.MGButton.Command"/> will be repeatedly fired while the mouse is held pressed overtop it.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGButton.InitialRepeatInterval"/>, <see cref="P:MGUI.Core.UI.MGButton.RepeatInterval"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGButton.DefaultInitialRepeatInterval">
            <summary>0.5s</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGButton.InitialRepeatInterval">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGButton.IsRepeatButton"/> is true.<para/>
            The initial delay before this <see cref="T:MGUI.Core.UI.MGButton"/>'s <see cref="P:MGUI.Core.UI.MGButton.CommandName"/> and/or <see cref="P:MGUI.Core.UI.MGButton.Command"/> will be repeatedly fired while the mouse is held pressed overtop it.<br/>
            Default value: <see cref="F:MGUI.Core.UI.MGButton.DefaultInitialRepeatInterval"/><para/>
            See also: <see cref="P:MGUI.Core.UI.MGButton.IsRepeatButton"/>, <see cref="P:MGUI.Core.UI.MGButton.RepeatInterval"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGButton.DefaultRepeatInterval">
            <summary>10 repetitions per second</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGButton.RepeatInterval">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGButton.IsRepeatButton"/> is true.<para/>
            How often to repeatedly fire this <see cref="T:MGUI.Core.UI.MGButton"/>'s <see cref="P:MGUI.Core.UI.MGButton.CommandName"/> and/or <see cref="P:MGUI.Core.UI.MGButton.Command"/> while the mouse is held pressed overtop it.<br/>
            Default value: <see cref="F:MGUI.Core.UI.MGButton.DefaultRepeatInterval"/><para/>
            See also: <see cref="P:MGUI.Core.UI.MGButton.IsRepeatButton"/>, <see cref="P:MGUI.Core.UI.MGButton.InitialRepeatInterval"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGButton.#ctor(MGUI.Core.UI.MGWindow,System.Action{MGUI.Core.UI.MGButton})">
            <param name="HandleLeftClick">An <see cref="T:System.Action"/> to invoke when this <see cref="T:MGUI.Core.UI.MGButton"/> is left-clicked.<para/>
            This handler will only be invoked if <see cref="P:MGUI.Shared.Input.HandledByEventArgs`1.IsHandled"/> is false.<br/>
            This handler will also set <see cref="P:MGUI.Shared.Input.HandledByEventArgs`1.IsHandled"/> to true after being invoked.<para/>
            If you want to avoid this default behavior, manually subscribe to <see cref="E:MGUI.Core.UI.MGButton.OnLeftClicked"/>,<br/>
            call <see cref="M:MGUI.Core.UI.MGButton.AddCommandHandler(System.Action{MGUI.Core.UI.MGButton,MGUI.Shared.Input.Mouse.BaseMouseReleasedEventArgs},System.Boolean)"/>,<br/>
            or set <see cref="P:MGUI.Core.UI.MGButton.Command"/> instead.</param>
        </member>
        <member name="M:MGUI.Core.UI.MGButton.#ctor(MGUI.Core.UI.MGWindow,MonoGame.Extended.Thickness,MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush,System.Action{MGUI.Core.UI.MGButton})">
            <param name="HandleLeftClick">An <see cref="T:System.Action"/> to invoke when this <see cref="T:MGUI.Core.UI.MGButton"/> is left-clicked.<para/>
            This handler will only be invoked if <see cref="P:MGUI.Shared.Input.HandledByEventArgs`1.IsHandled"/> is false.<br/>
            This handler will also set <see cref="P:MGUI.Shared.Input.HandledByEventArgs`1.IsHandled"/> to true after being invoked.<para/>
            If you want to avoid this default behavior, manually subscribe to <see cref="E:MGUI.Core.UI.MGButton.OnLeftClicked"/>,<br/>
            call <see cref="M:MGUI.Core.UI.MGButton.AddCommandHandler(System.Action{MGUI.Core.UI.MGButton,MGUI.Shared.Input.Mouse.BaseMouseReleasedEventArgs},System.Boolean)"/>,<br/>
            or set <see cref="P:MGUI.Core.UI.MGButton.Command"/> instead.</param>
        </member>
        <member name="P:MGUI.Core.UI.MGButton.PressedAt">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGButton.IsRepeatButton"/> is true.<para/>
            The last time that this <see cref="T:MGUI.Core.UI.MGButton"/> was pressed.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGButton.RepeatedAt">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGButton.IsRepeatButton"/> is true.<para/>
            The last time that this <see cref="T:MGUI.Core.UI.MGButton"/>'s <see cref="P:MGUI.Core.UI.MGButton.CommandName"/> and/or <see cref="P:MGUI.Core.UI.MGButton.Command"/> was repeated.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGButton.AddCommandHandler(System.Action{MGUI.Core.UI.MGButton,MGUI.Shared.Input.Mouse.BaseMouseReleasedEventArgs},System.Boolean)">
            <summary>Helper method to subscribe to <see cref="E:MGUI.Core.UI.MGButton.OnLeftClicked"/>.<para/>
            Recommended to set <see cref="P:MGUI.Core.UI.MGButton.Command"/> or <see cref="P:MGUI.Core.UI.MGButton.CommandName"/> instead, unless you require multiple handlers for the left-click event.</summary>
            <param name="Command">The <see cref="T:System.Action"/> to invoke when this <see cref="T:MGUI.Core.UI.MGButton"/> is left-clicked (more specifically, occurs when the left mouse button is released overtop of this <see cref="T:MGUI.Core.UI.MGButton"/>)</param>
            <param name="SetsHandledToTrue">If true, this <paramref name="Command"/> will set <see cref="P:MGUI.Shared.Input.HandledByEventArgs`1.IsHandled"/> to true if it executes.</param>
        </member>
        <member name="E:MGUI.Core.UI.MGButton.OnLeftClicked">
            <summary>Invoked when the left mouse button is released overtop of this <see cref="T:MGUI.Core.UI.MGButton"/>.<para/>
            Consider checking <see cref="P:MGUI.Shared.Input.HandledByEventArgs`1.IsHandled"/> at the start of this <see cref="T:System.EventHandler"/><br/>
            or subscribing via <see cref="M:MGUI.Core.UI.MGButton.AddCommandHandler(System.Action{MGUI.Core.UI.MGButton,MGUI.Shared.Input.Mouse.BaseMouseReleasedEventArgs},System.Boolean)"/>.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGButton.OnRightClicked">
            <summary>Invoked when the right mouse button is released overtop of this <see cref="T:MGUI.Core.UI.MGButton"/>.<para/>
            Consider checking <see cref="P:MGUI.Shared.Input.HandledByEventArgs`1.IsHandled"/> at the start of this <see cref="T:System.EventHandler"/><br/>
            or subscribing via <see cref="M:MGUI.Core.UI.MGButton.AddCommandHandler(System.Action{MGUI.Core.UI.MGButton,MGUI.Shared.Input.Mouse.BaseMouseReleasedEventArgs},System.Boolean)"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGChatBox.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGChatBox.TimestampFormat">
            <summary>A format string used to compute the text to display for each message's <see cref="T:System.DateTime"/> (<see cref="P:MGUI.Core.UI.MGChatBoxMessage.Timestamp"/>)<para/>
            Default value: @"'\\['HH:mm:ss']'", which displays the hours/minutes/seconds surrounded by brackets, such as: "[14:33:20]"<para/>
            Note: Single quotes can be used as an escape character to insert any text you wish, such as:
            <code>@"'[color=Red] \\[ [b]' HH:mm:ss '[/b] ] [/color]'"</code><para/>
            Which would result in the entire timestamp text being red, with the hour/minutes/seconds surrounded by brackets and rendered in bold font.<para/>
            Note that the open bracket '[' is a special character that typically indicates the start of a text formatting code.<br/>
            If you want to use an open bracket literally, you must escape the inlined markdown by prefixing the open bracket with 2 backslash literals ('\\\\' or @"\\")</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGChatBox.TimestampFormatChanged">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGChatBox.TimestampFormat"/> changes.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGChatBox.CurrentUserTextBlock">
            <summary>The <see cref="T:MGUI.Core.UI.MGTextBlock"/> that displays the current user's name next to the <see cref="P:MGUI.Core.UI.MGChatBox.InputTextBox"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGChatBox.InputTextBox">
            <summary>The <see cref="T:MGUI.Core.UI.MGTextBox"/> that the user may type a new message into</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGChatBox.SendButton">
            <summary>The <see cref="T:MGUI.Core.UI.MGButton"/> that commits the current message that is typed into the <see cref="P:MGUI.Core.UI.MGChatBox.InputTextBox"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGChatBox.Separator">
            <summary>A separator between the messages list and the bottom portion of the chatbox that contains the <see cref="P:MGUI.Core.UI.MGChatBox.InputTextBox"/> and <see cref="P:MGUI.Core.UI.MGChatBox.SendButton"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGChatBox.MaxMessages">
            <summary>The maximum number of items that can be stored in <see cref="P:MGUI.Core.UI.MGChatBox.Messages"/>.<br/>
            Once this limit is reached, the oldest item will be removed to make room for new items.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGChatBox.#ctor(MGUI.Core.UI.MGWindow,System.Int32,System.Int32)">
            <param name="MaxMessageLength">The maximum number of characters that can be sent in a single message</param>
        </member>
        <member name="T:MGUI.Core.UI.MGChatBoxMessage">
            <summary>Represents a single message inside an <see cref="T:MGUI.Core.UI.MGChatBox"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGChatBoxMessage.TimestampTextBlock">
            <summary>The <see cref="T:MGUI.Core.UI.MGTextBlock"/> responsible for displaying the message's <see cref="P:MGUI.Core.UI.MGChatBoxMessage.Timestamp"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGChatBoxMessage.UsernameTextBlock">
            <summary>The <see cref="T:MGUI.Core.UI.MGTextBlock"/> responsible for displaying the author of the message (See: <see cref="P:MGUI.Core.UI.MGChatBoxMessage.Username"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGChatBoxMessage.MessageTextBlock">
            <summary>The <see cref="T:MGUI.Core.UI.MGTextBlock"/> responsible for displaying the message's content (See: <see cref="P:MGUI.Core.UI.MGChatBoxMessage.Message"/>)</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGCheckBox.DefaultCheckBoxSize">
            <summary>The default width/height of the checkable part of an <see cref="T:MGUI.Core.UI.MGCheckBox"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGCheckBox.DefaultCheckBoxSpacingWidth">
            <summary>The default empty width between the checkable part of an <see cref="T:MGUI.Core.UI.MGCheckBox"/> and its <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGCheckBox.ButtonComponent">
            <summary>Provides direct access to the button component that appears to the left of this checkbox's content.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGCheckBox.ButtonElement"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGCheckBox.ButtonElement">
            <summary>The checkable button portion of this <see cref="T:MGUI.Core.UI.MGCheckBox"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGCheckBox.CheckBoxComponentSize">
            <summary>The dimensions of the checkable part of this <see cref="T:MGUI.Core.UI.MGCheckBox"/>.<para/>
            See also: <see cref="F:MGUI.Core.UI.MGCheckBox.DefaultCheckBoxSize"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGCheckBox.SpacingWidth">
            <summary>The reserved empty width between the checkable part of this <see cref="T:MGUI.Core.UI.MGCheckBox"/> and its <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/>.<para/>
            See also: <see cref="F:MGUI.Core.UI.MGCheckBox.DefaultCheckBoxSpacingWidth"/>.<para/>
            This value is functionally equivalent to <see cref="P:MGUI.Core.UI.MGCheckBox.ButtonElement"/>'s right <see cref="P:MGUI.Core.UI.MGElement.Margin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGCheckBox.CheckMarkColor">
            <summary>The <see cref="T:Microsoft.Xna.Framework.Color"/> to use when stroking the check mark if <see cref="P:MGUI.Core.UI.MGCheckBox.IsChecked"/> is true.<para/>
            Default value: <see cref="P:MGUI.Core.UI.MGTheme.CheckMarkColor"/><para/>
            See also:<br/><see cref="P:MGUI.Core.UI.MGWindow.Theme"/><br/><see cref="P:MGUI.Core.UI.MGDesktop.Theme"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGCheckBox.IsCheckMarkShadowed">
            <summary>If true, the graphics of the <see cref="P:MGUI.Core.UI.MGCheckBox.ButtonElement"/> will be drawn an extra time
            with Color=<see cref="P:MGUI.Core.UI.MGCheckBox.CheckMarkShadowColor"/> and using Offset=<see cref="P:MGUI.Core.UI.MGCheckBox.CheckMarkShadowOffset"/><para/>
            Default value: false</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGCheckBox.IsThreeState">
            <summary>True if 'null' is a valid value for <see cref="P:MGUI.Core.UI.MGCheckBox.IsChecked"/><para/>
            Default value: false</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGCheckBox.IsChecked">
            <summary>If <see cref="P:MGUI.Core.UI.MGCheckBox.IsThreeState"/> is false, this value should not be set to null.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGCheckBox.IsReadonly">
            <summary>If true, the user will be unable to modify <see cref="P:MGUI.Core.UI.MGCheckBox.IsChecked"/> by manually clicking the <see cref="P:MGUI.Core.UI.MGCheckBox.ButtonElement"/>.<para/>
            Default value: false</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGCheckBox.OnCheckStateChanged">
            <summary>Note: This event is invoked before <see cref="E:MGUI.Core.UI.MGCheckBox.OnChecked"/> / <see cref="E:MGUI.Core.UI.MGCheckBox.OnUnchecked"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.MGComboBox`1">
            <typeparam name="TItemType">The type that the ItemsSource will be bound to. Usually this would be: <see cref="T:System.String"/> for simple text-choices</typeparam>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DropdownArrowComponent">
            <summary>Provides direct access to the dropdown part of this combobox.</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGComboBox`1.DropdownArrowPaddedWidth">
            <summary>The width of the <see cref="T:MGUI.Core.UI.Containers.MGContentPresenter"/> that hosts the dropdown arrow. This should be >= <see cref="F:MGUI.Core.UI.MGComboBox`1.DropdownArrowWidth"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGComboBox`1.DropdownArrowWidth">
            <summary>The width of the dropdown arrow</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGComboBox`1.DropdownArrowPaddedHeight">
            <summary>The height of the <see cref="T:MGUI.Core.UI.Containers.MGContentPresenter"/> that hosts the dropdown arrow. This should be >= <see cref="F:MGUI.Core.UI.MGComboBox`1.DropdownArrowHeight"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGComboBox`1.DropdownArrowHeight">
            <summary>The height of the dropdown arrow</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DefaultDropdownArrowLeftMargin">
            <summary>The default empty width between the right edge of the <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/> and the left edge of the dropdown arrow</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DefaultDropdownArrowRightMargin">
            <summary>The default empty width between the right edge of the dropdown arrow and the right edge of this <see cref="T:MGUI.Core.UI.MGComboBox`1"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DropdownArrowLeftMargin">
            <summary>The default empty width between the right edge of the <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/> and the left edge of the dropdown arrow<para/>
            See also: <see cref="P:MGUI.Core.UI.MGComboBox`1.DefaultDropdownArrowLeftMargin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DropdownArrowRightMargin">
            <summary>The default empty width between the right edge of the dropdown arrow and the right edge of this <see cref="T:MGUI.Core.UI.MGComboBox`1"/><para/>
            See also: <see cref="P:MGUI.Core.UI.MGComboBox`1.DefaultDropdownArrowRightMargin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.SelectedItem">
            <summary>Warning - If <see cref="P:MGUI.Core.UI.MGComboBox`1.ItemsSource"/> contains several items with the same hash code, this property's setter function will always select the first matching value.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGComboBox`1.SelectedIndex"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.SelectedIndex">
            <summary>The index of the currently-selected item.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGComboBox`1.SelectedItem"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.HoveredItem">
            <summary>The item within the dropdown that is currently hovered by the mouse, if any.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGComboBox`1.SetItemsSource(System.Collections.Generic.ICollection{`0})">
            <param name="Value"><see cref="P:MGUI.Core.UI.MGComboBox`1.ItemsSource"/> will be set to a copy of this <see cref="T:System.Collections.Generic.ICollection`1"/>.<br/>
            If you want <see cref="P:MGUI.Core.UI.MGComboBox`1.ItemsSource"/> to dynamically update as the collection changes, pass in an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/></param>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:MGUI.Core.UI.MGComboBox`1.IsDropdownOpen"/>=true.</exception>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DefaultDropdownItemPadding">
            <summary>The default amount of padding in each item within the dropdown.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGComboBox`1.CreateDefaultDropdownButton">
            <summary>See also: <see cref="M:MGUI.Core.UI.MGComboBox`1.ApplyDefaultDropdownButtonSettings(MGUI.Core.UI.MGButton)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DropdownItemTemplate">
            <summary>The template to use for items inside the dropdown.<br/>
            Highly recommend to use an <see cref="T:MGUI.Core.UI.MGElement"/> with Padding, such as '8,5,8,5'. See also: <see cref="P:MGUI.Core.UI.MGComboBox`1.DefaultDropdownItemPadding"/><para/>
            Default value: <see cref="M:MGUI.Core.UI.MGComboBox`1.CreateDefaultDropdownButton"/>, which is then populated with an <see cref="T:MGUI.Core.UI.MGTextBlock"/> whose Text is given by the <typeparamref name="TItemType"/>'s <see cref="M:System.Object.ToString"/><para/>
            <code>
            DropdownItemTemplate = item =>
            {
                <see cref="T:MGUI.Core.UI.MGButton"/> Button = <see cref="M:MGUI.Core.UI.MGComboBox`1.CreateDefaultDropdownButton"/>;
                Button.SetContent(item.ToString());
                return Button;
            }
            </code></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.SelectedItemTemplate">
            <summary>The template to use for the selected item<para/>
            Default value:<para/>
            <code>
            SelectedItemTemplate = item => new <see cref="T:MGUI.Core.UI.MGTextBlock"/>(Window, item.ToString()) { WrapText = false, VerticalAlignment = <see cref="F:MGUI.Core.UI.VerticalAlignment.Center"/> };
            </code></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.MinDropdownWidth">
            <summary>When the dropdown is opened, it will attempt to use the <see cref="P:MGUI.Core.UI.MGElement.ActualWidth"/> of this <see cref="T:MGUI.Core.UI.MGComboBox`1"/>,<br/>
            but the width will be clamped to the range [<see cref="P:MGUI.Core.UI.MGComboBox`1.MinDropdownWidth"/>, <see cref="P:MGUI.Core.UI.MGComboBox`1.MaxDropdownWidth"/>]</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.MaxDropdownWidth">
            <summary>When the dropdown is opened, it will attempt to use the <see cref="P:MGUI.Core.UI.MGElement.ActualWidth"/> of this <see cref="T:MGUI.Core.UI.MGComboBox`1"/>,<br/>
            but the width will be clamped to the range [<see cref="P:MGUI.Core.UI.MGComboBox`1.MinDropdownWidth"/>, <see cref="P:MGUI.Core.UI.MGComboBox`1.MaxDropdownWidth"/>]</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.Dropdown">
            <summary>The floating <see cref="T:MGUI.Core.UI.MGWindow"/> used to display the content inside of the dropdown when <see cref="P:MGUI.Core.UI.MGComboBox`1.IsDropdownOpen"/> is true.<para/>
            Warning - be careful when editing properties on this object. Some changes could break the combobox's functionality,<br/>
            such as setting <see cref="P:MGUI.Core.UI.MGWindow.IsTitleBarVisible"/> and <see cref="P:MGUI.Core.UI.MGWindow.IsCloseButtonVisible"/> to true, and then clicking the close button.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGComboBox`1.DropdownScrollViewer"/>, <see cref="P:MGUI.Core.UI.MGComboBox`1.DropdownStackPanel"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DropdownScrollViewer">
            <summary>The <see cref="T:MGUI.Core.UI.MGScrollViewer"/> that the <see cref="P:MGUI.Core.UI.MGComboBox`1.Dropdown"/>'s Content is wrapped in.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGComboBox`1.Dropdown"/>, <see cref="P:MGUI.Core.UI.MGComboBox`1.DropdownStackPanel"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DropdownStackPanel">
            <summary>The <see cref="T:MGUI.Core.UI.Containers.MGStackPanel"/> that the <see cref="P:MGUI.Core.UI.MGComboBox`1.ItemsSource"/>'s rows are added to.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGComboBox`1.Dropdown"/>, <see cref="P:MGUI.Core.UI.MGComboBox`1.DropdownScrollViewer"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DropdownArrowColor">
            <summary>The color of the inverted triangle on the right-side of this <see cref="T:MGUI.Core.UI.MGComboBox`1"/>.<para/>
            Default value: <see cref="P:MGUI.Core.UI.MGTheme.DropdownArrowColor"/><para/>
            See also:<br/><see cref="P:MGUI.Core.UI.MGWindow.Theme"/><br/><see cref="P:MGUI.Core.UI.MGDesktop.Theme"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DropdownHeader">
            <summary>Optional content that is displayed at the top of the <see cref="P:MGUI.Core.UI.MGComboBox`1.Dropdown"/> window.<para/>
            Recommended to use a bottom margin or padding to visually separate the <see cref="P:MGUI.Core.UI.MGComboBox`1.DropdownHeader"/> from the items list.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGComboBox`1.DropdownFooter"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGComboBox`1.DropdownFooter">
            <summary>Optional content that is displayed at the bottom of the <see cref="P:MGUI.Core.UI.MGComboBox`1.Dropdown"/> window.<para/>
            Recommended to use a top margin or padding to visually separate the <see cref="P:MGUI.Core.UI.MGComboBox`1.DropdownFooter"/> from the items list.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGComboBox`1.DropdownHeader"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGComponentBase.BaseElement">
            <summary>Consider using <see cref="F:MGUI.Core.UI.MGComponent`1.Element"/> instead.</summary>
        </member>
        <member name="T:MGUI.Core.UI.MGComponent`1">
            <summary>Represents an <see cref="T:MGUI.Core.UI.MGElement"/> that is part of another <see cref="T:MGUI.Core.UI.MGElement"/>, but isn't explicitly its content.<para/>
            For example, an <see cref="T:MGUI.Core.UI.MGCheckBox"/> consists of a checkable rectangular button that is rendered in-line with the checkbox's content.</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGComponent`1.Element">
            <summary>The underlying <see cref="T:MGUI.Core.UI.MGElement"/> of this <see cref="T:MGUI.Core.UI.MGComponent`1"/>.<para/>
            Be careful editing properties of this element. Some changes could have unintended consequences to the parent element's layout. Modify at your own risk.<para/>
            For example, if you set <see cref="P:MGUI.Core.UI.MGWindow.TitleBarComponent"/>'s <see cref="P:MGUI.Core.UI.MGElement.HorizontalAlignment"/> to <see cref="F:MGUI.Core.UI.HorizontalAlignment.Center"/>,
            the title wouldn't span the entire window width anymore, so the title bar's background color wouldn't stretch either.
            On the other hand, if you set <see cref="P:MGUI.Core.UI.MGWindow.TitleBarTextBlockElement"/>'s <see cref="P:MGUI.Core.UI.MGTextBlock.TextAlignment"/> to <see cref="F:MGUI.Core.UI.HorizontalAlignment.Center"/>, 
            it would still look as intended.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGComponent`1.#ctor(`0,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Func{Microsoft.Xna.Framework.Rectangle,MonoGame.Extended.Thickness,Microsoft.Xna.Framework.Rectangle})">
            <param name="UsesOwnersPadding">If true, then the available bounds will be reduced by the owner's padding before measuring this component.</param>
            <param name="Arrange">Parameters: A rectangle of the available bounds, and the size of the component. Output: The actual bounds the component should occupy.</param>
        </member>
        <member name="M:MGUI.Core.UI.MGComponent`1.#ctor(`0,MGUI.Core.UI.ComponentUpdatePriority,MGUI.Core.UI.ComponentDrawPriority,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Func{Microsoft.Xna.Framework.Rectangle,MonoGame.Extended.Thickness,Microsoft.Xna.Framework.Rectangle})">
            <param name="UpdatePriority">Recommended value: <see cref="F:MGUI.Core.UI.ComponentUpdatePriority.AfterContents"/></param>
            <param name="DrawPriority">Recommended value: <see cref="F:MGUI.Core.UI.ComponentDrawPriority.BeforeContents"/></param>
            <param name="UsesOwnersPadding">If true, then the available bounds will be reduced by the owner's padding before measuring this component.</param>
            <param name="Arrange">Parameters: A rectangle of the available bounds, and the size of the component. Output: The actual bounds the component should occupy.</param>
        </member>
        <member name="T:MGUI.Core.UI.IContextMenuHost">
            <summary>For concrete implementations, see also:<para/>
            <see cref="T:MGUI.Core.UI.MGDesktop"/> (For root-level <see cref="T:MGUI.Core.UI.MGContextMenu"/>)<br/>
            <see cref="T:MGUI.Core.UI.MGContextMenu"/> (For nested <see cref="T:MGUI.Core.UI.MGContextMenu"/>s)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextMenu.CanContextMenuOpen">
            <summary>True if this <see cref="T:MGUI.Core.UI.MGContextMenu"/> can be shown.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextMenu.IsContextMenuOpen">
            <summary>True if this <see cref="T:MGUI.Core.UI.MGContextMenu"/> is currently being shown. To open this <see cref="T:MGUI.Core.UI.MGContextMenu"/>, use <see cref="P:MGUI.Core.UI.MGContextMenu.Host"/>'s <see cref="M:MGUI.Core.UI.IContextMenuHost.TryOpenContextMenu(MGUI.Core.UI.MGContextMenu,Microsoft.Xna.Framework.Point)"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGDesktop.ActiveContextMenu"/>,  <see cref="P:MGUI.Core.UI.MGContextMenu.ActiveContextMenu"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.TryOpenContextMenu(Microsoft.Xna.Framework.Rectangle)">
            <summary>See also: <see cref="M:MGUI.Core.UI.IContextMenuHost.TryOpenContextMenu(MGUI.Core.UI.MGContextMenu,Microsoft.Xna.Framework.Point)"/><br/>(<see cref="T:MGUI.Core.UI.MGContextMenu"/> and <see cref="T:MGUI.Core.UI.MGDesktop"/> are implementations of <see cref="T:MGUI.Core.UI.IContextMenuHost"/>)</summary>
            <returns>True if this <see cref="T:MGUI.Core.UI.MGContextMenu"/> wasn't already opened, and now is opened.<br/>
            False if unable to open, such as if it was already open, closing the current menu was cancelled, opening this menu was cancelled, or <see cref="P:MGUI.Core.UI.MGContextMenu.CanContextMenuOpen"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.TryOpenContextMenu(Microsoft.Xna.Framework.Point)">
            <summary>See also: <see cref="M:MGUI.Core.UI.IContextMenuHost.TryOpenContextMenu(MGUI.Core.UI.MGContextMenu,Microsoft.Xna.Framework.Point)"/><br/>(<see cref="T:MGUI.Core.UI.MGContextMenu"/> and <see cref="T:MGUI.Core.UI.MGDesktop"/> are implementations of <see cref="T:MGUI.Core.UI.IContextMenuHost"/>)</summary>
            <returns>True if this <see cref="T:MGUI.Core.UI.MGContextMenu"/> wasn't already opened, and now is opened.<br/>
            False if unable to open, such as if it was already open, closing the current menu was cancelled, opening this menu was cancelled, or <see cref="P:MGUI.Core.UI.MGContextMenu.CanContextMenuOpen"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.TryCloseContextMenu">
            <summary>See also: <see cref="M:MGUI.Core.UI.MGDesktop.TryCloseActiveContextMenu"/></summary>
            <returns>True if this <see cref="T:MGUI.Core.UI.MGContextMenu"/> was open, and then was successfully closed.<br/>
            False if it wasn't already open, or the action was cancelled.</returns>
        </member>
        <member name="P:MGUI.Core.UI.MGContextMenu.StaysOpenOnItemSelected">
            <summary>If true, this menu will not be automatically closed when the user clicks on a particular <see cref="T:MGUI.Core.UI.MGContextMenuButton"/> to execute.<para/>
            Warning - Closing this menu may be cancelled, such as via <see cref="E:MGUI.Core.UI.MGDesktop.ContextMenuClosing"/>'s 'Cancel' property.<para/>
            Default value: false<para/>See also: <see cref="P:MGUI.Core.UI.MGContextMenu.StaysOpenOnItemToggled"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextMenu.StaysOpenOnItemToggled">
            <summary>If true, this menu will not be automatically closed when the user clicks on a particular <see cref="T:MGUI.Core.UI.MGContextMenuToggle"/> to toggle.<para/>
            Warning - Closing this menu may be cancelled, such as via <see cref="E:MGUI.Core.UI.MGDesktop.ContextMenuClosing"/>'s 'Cancel' property.<para/>
            Default value: true<para/>See also: <see cref="P:MGUI.Core.UI.MGContextMenu.StaysOpenOnItemSelected"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextMenu.AutoCloseThreshold">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGContextMenu.IsSubmenu"/> is false.<br/>
            Determines how far away the mouse can move from <see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/> before this menu is automatically closed.<para/>
            Warning - Closing this menu may be cancelled, such as via <see cref="E:MGUI.Core.UI.MGDesktop.ContextMenuClosing"/>'s 'Cancel' property.<para/>
            Default value: <see cref="F:MGUI.Core.UI.MGContextMenu.DefaultAutoCloseThreshold"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextMenu.ButtonWrapperTemplate">
            <summary>Every <see cref="T:MGUI.Core.UI.MGContextMenuButton"/> and <see cref="T:MGUI.Core.UI.MGContextMenuToggle"/> within <see cref="P:MGUI.Core.UI.MGContextMenu.Items"/> will be automatically wrapped in an <see cref="T:MGUI.Core.UI.MGButton"/> created by this function.<para/>
            Default value: <see cref="M:MGUI.Core.UI.MGContextMenu.CreateDefaultDropdownButton(MGUI.Core.UI.MGWindow)"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.AddButton(System.String,System.Action{MGUI.Core.UI.MGContextMenuButton})">
            <param name="Action">The action to invoke if the <see cref="T:MGUI.Core.UI.MGContextMenuButton"/> is left-clicked.</param>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.AddButton(MGUI.Core.UI.MGElement,System.Action{MGUI.Core.UI.MGContextMenuButton})">
            <param name="Action">The action to invoke if the <see cref="T:MGUI.Core.UI.MGContextMenuButton"/> is left-clicked.</param>
        </member>
        <member name="P:MGUI.Core.UI.MGContextMenu.HeaderSize">
            <summary>The size of the header items that appear on the left edge of each <see cref="T:MGUI.Core.UI.MGContextMenuItem"/>.<para/>
            For <see cref="T:MGUI.Core.UI.MGContextMenuButton"/>s, this is either blank space or an icon.<br/>
            For <see cref="T:MGUI.Core.UI.MGContextMenuToggle"/>s, this is a check mark.<para/>
            Default value: 14x14</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextMenu.ActiveContextMenu">
            <summary>The currently open nested <see cref="T:MGUI.Core.UI.MGContextMenu"/>.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.TryCloseActiveContextMenu">
            <returns>True if there was no <see cref="P:MGUI.Core.UI.MGContextMenu.ActiveContextMenu"/> or it was successfully closed, false otherwise.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.TryOpenContextMenu(MGUI.Core.UI.MGContextMenu,Microsoft.Xna.Framework.Rectangle)">
            <returns>True if the <paramref name="Menu"/> was already opened, or was successfully opened.<br/>
            False if <see cref="P:MGUI.Core.UI.MGContextMenu.CanContextMenuOpen"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.IsHoveringSubmenu(System.Int32)">
            <summary>True if the current mouse position is hovering any nested submenu in <see cref="P:MGUI.Core.UI.MGContextMenu.Submenus"/>. See also: <see cref="P:MGUI.Core.UI.MGContextMenu.ActiveContextMenu"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGContextMenu.ItemSelected">
            <summary>Invoked when a <see cref="T:MGUI.Core.UI.MGContextMenuButton"/> item is clicked.<br/>
            The <see cref="T:MGUI.Core.UI.MGContextMenuButton"/> may exist within a nested submenu (See also: <see cref="P:MGUI.Core.UI.MGContextMenu.Submenus"/>)</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGContextMenu.ItemToggled">
            <summary>Invoked when a <see cref="T:MGUI.Core.UI.MGContextMenuToggle"/> item is clicked, after the <see cref="P:MGUI.Core.UI.MGContextMenuToggle.IsChecked"/> value changes. <br/>
            The <see cref="T:MGUI.Core.UI.MGContextMenuButton"/> may exist within a nested submenu (See also: <see cref="P:MGUI.Core.UI.MGContextMenu.Submenus"/>)</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.CreateSimpleMenu(MGUI.Core.UI.MGDesktop,System.String,System.Nullable{Microsoft.Xna.Framework.Color},MGUI.Core.UI.MGSimpleContextMenuItem[])">
            <summary>Consider subscribing to <see cref="E:MGUI.Core.UI.MGContextMenu.ItemSelected"/> and <see cref="E:MGUI.Core.UI.MGContextMenu.ItemToggled"/> to handle user actions.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.CreateSimpleMenu(MGUI.Core.UI.MGWindow,System.String,System.Nullable{Microsoft.Xna.Framework.Color},MGUI.Core.UI.MGSimpleContextMenuItem[])">
            <summary>Consider subscribing to <see cref="E:MGUI.Core.UI.MGContextMenu.ItemSelected"/> and <see cref="E:MGUI.Core.UI.MGContextMenu.ItemToggled"/> to handle user actions.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.#ctor(MGUI.Core.UI.MGContextMenu)">
            <summary>Creates a nested <see cref="T:MGUI.Core.UI.MGContextMenu"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.#ctor(MGUI.Core.UI.MGWindow,System.String,MGUI.Core.UI.MGTheme)">
            <summary>Creates a root-level <see cref="T:MGUI.Core.UI.MGContextMenu"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.#ctor(MGUI.Core.UI.MGDesktop,System.String,MGUI.Core.UI.MGTheme)">
            <summary>Creates a root-level <see cref="T:MGUI.Core.UI.MGContextMenu"/> that does not belong to any <see cref="T:MGUI.Core.UI.MGWindow"/>s</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGContextMenu.FindItemByCommandId``1(System.String)">
            <summary>Throws <see cref="T:System.InvalidOperationException"/> if no <see cref="T:MGUI.Core.UI.MGContextMenuItem"/> was found with the given <paramref name="CommandId"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSimpleContextMenuItem.Icon">
            <summary>Can be null. Only used if <see cref="P:MGUI.Core.UI.MGSimpleContextMenuItem.IsToggle"/> is false.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSimpleContextMenuItem.IsToggle">
            <summary>If true, an instance of <see cref="T:MGUI.Core.UI.MGContextMenuToggle"/> will be created to represent this item. Otherwise, creates an instance of <see cref="T:MGUI.Core.UI.MGContextMenuButton"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSimpleContextMenuItem.IsChecked">
            <summary>Only used if <see cref="P:MGUI.Core.UI.MGSimpleContextMenuItem.IsToggle"/> is true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSimpleContextMenuItem.Submenu">
            <summary>Can be null. Represents a nested submenu that will appear when hovering over this item.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextMenuItem.HandlesInput">
            <summary>True if this <see cref="T:MGUI.Core.UI.MGContextMenuItem"/> can accept and handle mouse input.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextMenuItem.ComputeIsVisible">
            <summary>Can be null. This <see cref="T:System.Func`1"/> will be evaluated each time the parent <see cref="P:MGUI.Core.UI.MGContextMenuItem.Menu"/> is opened to refresh this element's <see cref="P:MGUI.Core.UI.MGElement.Visibility"/>.<para/>
            True = <see cref="F:MGUI.Core.UI.Visibility.Visible"/><br/>False = <see cref="F:MGUI.Core.UI.Visibility.Collapsed"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWrappedContextMenuItem.ContentWrapper">
            <summary>The wrapper element that contains the <see cref="P:MGUI.Core.UI.MGWrappedContextMenuItem.MenuItemContent"/>.<para/>
            This element is automatically created via <see cref="P:MGUI.Core.UI.MGContextMenu.ButtonWrapperTemplate"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWrappedContextMenuItem.MenuItemContent">
            <summary>The content to display inside this <see cref="T:MGUI.Core.UI.MGContextMenuItem"/>.<para/>
            This content is automatically wrapped inside of an <see cref="T:MGUI.Core.UI.MGButton"/> that is created via <see cref="P:MGUI.Core.UI.MGContextMenu.ButtonWrapperTemplate"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGWrappedContextMenuItem.ContentWrapper"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGWrappedContextMenuItem.SubmenuArrowWidth">
            <summary>The width of the dropdown arrow that appears on the right-edge of a <see cref="T:MGUI.Core.UI.MGContextMenuItem"/> that has a nested <see cref="P:MGUI.Core.UI.MGWrappedContextMenuItem.Submenu"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGWrappedContextMenuItem.SubmenuArrowHeight">
            <summary>The height of the dropdown arrow that appears on the right-edge of a <see cref="T:MGUI.Core.UI.MGContextMenuItem"/> that has a nested <see cref="P:MGUI.Core.UI.MGWrappedContextMenuItem.Submenu"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGWrappedContextMenuItem.DefaultSubmenuArrowRightMargin">
            <summary>The default empty width between the right edge of an <see cref="T:MGUI.Core.UI.MGContextMenuItem"/> and the left edge of the dropdown arrow that appears when the <see cref="T:MGUI.Core.UI.MGContextMenuItem"/> has a nested <see cref="P:MGUI.Core.UI.MGWrappedContextMenuItem.Submenu"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWrappedContextMenuItem.SubmenuArrowComponent">
            <summary>Provides direct access to the dropdown arrow that appears on the right-edge of this <see cref="T:MGUI.Core.UI.MGContextMenuItem"/> if there is a nested <see cref="P:MGUI.Core.UI.MGWrappedContextMenuItem.Submenu"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWrappedContextMenuItem.Submenu">
            <summary>If not null, represents a nested <see cref="T:MGUI.Core.UI.MGContextMenu"/> that will open when hovering over this <see cref="T:MGUI.Core.UI.MGContextMenuItem"/>.</summary>
        </member>
        <member name="T:MGUI.Core.UI.MGContextMenuButton">
            <summary>Instantiated via <see cref="M:MGUI.Core.UI.MGContextMenu.AddButton(MGUI.Core.UI.MGElement,System.Action{MGUI.Core.UI.MGContextMenuButton})"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGContextMenuButton.OnSelected">
            <summary>Invoked when this <see cref="T:MGUI.Core.UI.MGContextMenuButton"/> is left-clicked.</summary>
        </member>
        <member name="T:MGUI.Core.UI.MGContextMenuToggle">
            <summary>Instantiated via <see cref="M:MGUI.Core.UI.MGContextMenu.AddCheckBox(System.String,System.Boolean)"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.MGContextMenuSeparator">
            <summary>Instantiated via <see cref="M:MGUI.Core.UI.MGContextMenu.AddSeparator(System.Int32)"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.MGContextualContentPresenter">
            <summary>A wrapper class that provides mutually-exclusive visibility of 2 child elements.<para/>
            If <see cref="P:MGUI.Core.UI.MGContextualContentPresenter.Value"/> is true, this element will display the <see cref="P:MGUI.Core.UI.MGContextualContentPresenter.TrueContent"/>, else displays the <see cref="P:MGUI.Core.UI.MGContextualContentPresenter.FalseContent"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextualContentPresenter.Value">
            <summary>If true, the <see cref="P:MGUI.Core.UI.MGContextualContentPresenter.TrueContent"/> will be displayed.<br/>
            If false, the <see cref="P:MGUI.Core.UI.MGContextualContentPresenter.FalseContent"/> will be displayed.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGContextualContentPresenter.OnValueChanged">
            <summary>Invoked after <see cref="P:MGUI.Core.UI.MGContextualContentPresenter.Value"/> changes.<para/>
            This event is invoked before <see cref="E:MGUI.Core.UI.MGContextualContentPresenter.OnContentUpdated"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextualContentPresenter.TrueContent">
            <summary>The content to display when <see cref="P:MGUI.Core.UI.MGContextualContentPresenter.Value"/> is true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGContextualContentPresenter.FalseContent">
            <summary>The content to display when <see cref="P:MGUI.Core.UI.MGContextualContentPresenter.Value"/> is false.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGContextualContentPresenter.OnContentUpdated">
            <summary>Invoked after the <see cref="P:MGUI.Core.UI.MGContextualContentPresenter.CurrentContent"/> has been set to a new value.</summary>
        </member>
        <member name="T:MGUI.Core.UI.MGDesktop">
            <summary>Represents a Rectanglular screen bounds that you can add or remove <see cref="T:MGUI.Core.UI.MGWindow"/>s to/from, 
            and handles mutual exclusion with things like input handling or ensuring there is only 1 <see cref="T:MGUI.Core.UI.MGToolTip"/> or <see cref="T:MGUI.Core.UI.MGContextMenu"/> on the user interface at a time.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGDesktop.HighPriorityMouseHandler">
            <summary>A <see cref="T:MGUI.Shared.Input.Mouse.MouseHandler"/> that is updated at the start of <see cref="M:MGUI.Core.UI.MGDesktop.Update"/>, before any <see cref="T:MGUI.Core.UI.MGWindow"/>s in <see cref="P:MGUI.Core.UI.MGDesktop.Windows"/> are updated.<br/>
            Objects that subscribe to this handler's mouse events will be the very first to receive and handle the event.<para/>
            Highly recommended to avoid using this unless absolutely necessary, and if you do use it, you probably shouldn't call e.SetHandledBy(...) so other elements can still receive the input.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGDesktop.HighPriorityKeyboardHandler">
            <summary>A <see cref="T:MGUI.Shared.Input.Keyboard.KeyboardHandler"/> that is updated at the start of <see cref="M:MGUI.Core.UI.MGDesktop.Update"/>, before any <see cref="T:MGUI.Core.UI.MGWindow"/>s in <see cref="P:MGUI.Core.UI.MGDesktop.Windows"/> are updated.<br/>
            Objects that subscribe to this handler's keyboard events will be the very first to receive and handle the event.<para/>
            Highly recommended to avoid using this unless absolutely necessary, and if you do use it, you probably shouldn't call e.SetHandledBy(...) so other elements can still receive the input.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGDesktop.DefaultToolTipShowDelay">
            <summary>Default value: 0.4s</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGDesktop.ToolTipShowDelay">
            <summary>The amount of time that the mouse must hover a particular <see cref="T:MGUI.Core.UI.MGElement"/> before its <see cref="P:MGUI.Core.UI.MGElement.ToolTip"/> can be shown.<para/>
            Default value: <see cref="P:MGUI.Core.UI.MGDesktop.DefaultToolTipShowDelay"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGDesktop.ActiveContextMenu">
            <summary>The currently open <see cref="T:MGUI.Core.UI.MGContextMenu"/>.<para/>
            To set this value, use <see cref="M:MGUI.Core.UI.MGDesktop.TryCloseActiveContextMenu"/> or <see cref="M:MGUI.Core.UI.MGDesktop.TryOpenContextMenu(MGUI.Core.UI.MGContextMenu,Microsoft.Xna.Framework.Point)"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGDesktop.TryCloseActiveContextMenu">
            <returns>True if there was no <see cref="P:MGUI.Core.UI.MGDesktop.ActiveContextMenu"/> or it was successfully closed.<br/>
            False if the action was cancelled such as via <see cref="E:MGUI.Core.UI.MGDesktop.ContextMenuOpening"/>'s <see cref="T:MGUI.Core.UI.ContextMenuOpeningClosingEventArgs"/>.Cancel.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGDesktop.TryOpenContextMenu(MGUI.Core.UI.MGContextMenu,Microsoft.Xna.Framework.Rectangle)">
            <returns>True if the <paramref name="Menu"/> was already opened, or was successfully opened.<br/>
            False if the action was cancelled (such as via <see cref="T:MGUI.Core.UI.ContextMenuOpeningClosingEventArgs"/>.Cancel while trying to close the current menu, or while trying to open the new menu), or because <see cref="P:MGUI.Core.UI.MGContextMenu.CanContextMenuOpen"/> is false.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGDesktop.TryOpenContextMenu(MGUI.Core.UI.MGContextMenu,Microsoft.Xna.Framework.Point)">
            <returns>True if the <paramref name="Menu"/> was already opened, or was successfully opened.<br/>
            False if the action was cancelled (such as via <see cref="T:MGUI.Core.UI.ContextMenuOpeningClosingEventArgs"/>.Cancel while trying to close the current menu, or while trying to open the new menu), or because <see cref="P:MGUI.Core.UI.MGContextMenu.CanContextMenuOpen"/> is false.</returns>
        </member>
        <member name="E:MGUI.Core.UI.MGDesktop.ContextMenuOpening">
            <summary>Invoked just before an <see cref="T:MGUI.Core.UI.MGContextMenu"/> is opened. Allows cancellation.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGDesktop.ContextMenuOpened">
            <summary>Invoked immediately after an <see cref="T:MGUI.Core.UI.MGContextMenu"/> is opened.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGDesktop.ContextMenuClosing">
            <summary>Invoked just before an <see cref="T:MGUI.Core.UI.MGContextMenu"/> is closed. Allows cancellation.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGDesktop.ContextMenuClosed">
            <summary>Invoked immediately after an <see cref="T:MGUI.Core.UI.MGContextMenu"/> is closed.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGDesktop.Windows">
            <summary>The last element represents the <see cref="T:MGUI.Core.UI.MGWindow"/> that will be
            drawn last (I.E., rendered overtop of everything else), and updated first (I.E., has the first chance to handle inputs)<para/>
            except in cases where a Topmost window is prioritized (See: <see cref="P:MGUI.Core.UI.MGWindow.IsTopmost"/>)<para/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGDesktop.BringToFront(MGUI.Core.UI.MGWindow)">
            <summary>Moves the given <paramref name="Window"/> to the end of <see cref="P:MGUI.Core.UI.MGDesktop.Windows"/> list.<br/>
            It will typically be rendered overtop of all other <see cref="P:MGUI.Core.UI.MGDesktop.Windows"/> and have first chance at receiving/handling input,<br/>
            unless another window is Topmost (See: <see cref="P:MGUI.Core.UI.MGWindow.IsTopmost"/>).</summary>
            <returns>True if the <paramref name="Window"/> was brought to the front. False if it was not a valid element in <see cref="P:MGUI.Core.UI.MGDesktop.Windows"/>.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGDesktop.BringToBack(MGUI.Core.UI.MGWindow)">
            <summary>Moves the given <paramref name="Window"/> to the start of <see cref="P:MGUI.Core.UI.MGDesktop.Windows"/> list.<br/>
            It will typically be rendered underneath of all other <see cref="P:MGUI.Core.UI.MGDesktop.Windows"/>, unless it is Topmost (See: <see cref="P:MGUI.Core.UI.MGWindow.IsTopmost"/>)</summary>
            <returns>True if the <paramref name="Window"/> was moved to the back. False if it was not a valid element in <see cref="P:MGUI.Core.UI.MGDesktop.Windows"/>.</returns>
        </member>
        <member name="P:MGUI.Core.UI.MGDesktop.FocusedKeyboardHandler">
            <summary>The <see cref="T:MGUI.Core.UI.MGElement"/> that should handle Keyboard inputs, if any.<para/>
            Only <see cref="T:MGUI.Core.UI.MGElement"/>'s where <see cref="P:MGUI.Core.UI.MGElement.CanHandleKeyboardInput"/> is true can be set as the <see cref="P:MGUI.Core.UI.MGDesktop.FocusedKeyboardHandler"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGDesktop.ValidScreenBounds">
            <summary>Represents the screen space that can be occupied with <see cref="T:MGUI.Core.UI.MGElement"/>s.<para/>
            For example, an <see cref="T:MGUI.Core.UI.MGContextMenu"/> will attempt to position itself such that it is not rendered outside of these bounds.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGDesktop.Theme">
            <summary>Convenience property that just returns <see cref="P:MGUI.Core.UI.MGDesktop.Resources"/>.<see cref="P:MGUI.Core.UI.MGResources.DefaultTheme"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGDesktop.FindFirstOpaqueParent(MGUI.Core.UI.MGElement,System.Boolean)">
            <summary>Traverses up the visual tree, starting from the given <paramref name="Element"/>, looking for an <see cref="T:MGUI.Core.UI.MGElement"/> that is fully opaque (<see cref="P:MGUI.Core.UI.MGElement.Opacity"/> >= 1.0f)</summary>
            <param name="IncludeSelf">If true, this method may return the input <paramref name="Element"/>. If false, starts checking for valid matches from the input's <see cref="P:MGUI.Core.UI.MGElement.Parent"/></param>
        </member>
        <member name="M:MGUI.Core.UI.MGDesktop.Draw(System.Single,MGUI.Shared.Rendering.DrawSettings)">
            <param name="InitialDrawSettings">If null, uses <see cref="P:MGUI.Shared.Rendering.DrawSettings.Default"/></param>
        </member>
        <member name="T:MGUI.Core.UI.ConditionalScaleTransform">
            <param name="PressedScale">A scale to apply to the target element when <see cref="P:MGUI.Core.UI.MGElement.IsLMBPressed"/> is true</param>
            <param name="HoveredScale">A scale to apply to the target element when <see cref="P:MGUI.Core.UI.MGElement.IsHovered"/> is true</param>
        </member>
        <member name="M:MGUI.Core.UI.ConditionalScaleTransform.#ctor(System.Single,System.Single)">
            <param name="PressedScale">A scale to apply to the target element when <see cref="P:MGUI.Core.UI.MGElement.IsLMBPressed"/> is true</param>
            <param name="HoveredScale">A scale to apply to the target element when <see cref="P:MGUI.Core.UI.MGElement.IsHovered"/> is true</param>
        </member>
        <member name="P:MGUI.Core.UI.ConditionalScaleTransform.PressedScale">
            <summary>A scale to apply to the target element when <see cref="P:MGUI.Core.UI.MGElement.IsLMBPressed"/> is true</summary>
        </member>
        <member name="P:MGUI.Core.UI.ConditionalScaleTransform.HoveredScale">
            <summary>A scale to apply to the target element when <see cref="P:MGUI.Core.UI.MGElement.IsHovered"/> is true</summary>
        </member>
        <member name="T:MGUI.Core.UI.MGElement">
            <summary>Base class for all UI elements.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.GetTheme">
            <summary>Prioritizes <see cref="P:MGUI.Core.UI.MGWindow.Theme"/>. If null, falls back to <see cref="P:MGUI.Core.UI.MGDesktop.Theme"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.ParentWindow">
            <summary>The <see cref="T:MGUI.Core.UI.MGWindow"/> that this <see cref="T:MGUI.Core.UI.MGElement"/> belongs to. This value is only null if this <see cref="T:MGUI.Core.UI.MGElement"/> is an <see cref="T:MGUI.Core.UI.MGWindow"/> with no parent.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.SelfOrParentWindow">
            <summary>Returns a reference to 'this' if this is an instance of <see cref="T:MGUI.Core.UI.MGWindow"/>. Else returns <see cref="P:MGUI.Core.UI.MGElement.ParentWindow"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.DataContextOverride">
            <summary>If null, this element's <see cref="P:MGUI.Core.UI.MGElement.DataContext"/> is defaulted to the window's <see cref="P:MGUI.Core.UI.MGWindow.WindowDataContext"/>.<para/>
            Note: <see cref="T:MGUI.Core.UI.MGWindow"/> instances cannot have an override and will always use their <see cref="P:MGUI.Core.UI.MGWindow.WindowDataContext"/> instead.<br/>
            For <see cref="T:MGUI.Core.UI.MGWindow"/>, this property is overridden to set <see cref="P:MGUI.Core.UI.MGWindow.WindowDataContext"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.DataContext">
            <summary>The source object that data bindings are resolved from.<para/>
            This value prioritizes <see cref="P:MGUI.Core.UI.MGElement.DataContextOverride"/>, but falls back on <see cref="P:MGUI.Core.UI.MGWindow.WindowDataContext"/> if there is no explicit override.<para/>
            To set this value, set <see cref="P:MGUI.Core.UI.MGElement.DataContextOverride"/> or set <see cref="P:MGUI.Core.UI.MGWindow.WindowDataContext"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGElement.DataContextChanged">
            <summary>Invoked after <see cref="P:MGUI.Core.UI.MGElement.DataContext"/> is changed.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.ManagedParent">
            <summary>The parent <see cref="T:MGUI.Core.UI.MGElement"/> that micromanages this <see cref="T:MGUI.Core.UI.MGElement"/>, or null if this <see cref="T:MGUI.Core.UI.MGElement"/> is not tightly coupled with its creator.<para/>
            For example, an <see cref="T:MGUI.Core.UI.MGListView`1"/> always contains an <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/> to display the column headers, and another <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/> to display the rows<br/>
            Those 2 <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/>s are specially-created elements whose <see cref="P:MGUI.Core.UI.MGElement.ManagedParent"/> is the <see cref="T:MGUI.Core.UI.MGListView`1"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.IsManagedElement">
            <summary>True if this <see cref="T:MGUI.Core.UI.MGElement"/> is automatically created and managed by its parent,<br/>
            such as a ComboBox's <see cref="P:MGUI.Core.UI.MGComboBox`1.Dropdown"/> or a ContextMenu's <see cref="P:MGUI.Core.UI.MGContextMenu.ItemsPanel"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.ComponentParent">
            <summary>The parent <see cref="T:MGUI.Core.UI.MGElement"/> that this <see cref="T:MGUI.Core.UI.MGComponent`1"/> belongs to, or null if this <see cref="T:MGUI.Core.UI.MGElement"/> is not a <see cref="T:MGUI.Core.UI.MGComponent`1"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.IsComponent">
            <summary>True if this <see cref="T:MGUI.Core.UI.MGElement"/> is a <see cref="T:MGUI.Core.UI.MGComponent`1"/> of its parent,
            such as the <see cref="P:MGUI.Core.UI.MGCheckBox.ButtonComponent"/> of an <see cref="T:MGUI.Core.UI.MGCheckBox"/>, or the <see cref="P:MGUI.Core.UI.MGButton.BorderComponent"/> of an <see cref="T:MGUI.Core.UI.MGButton"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.Name">
            <summary>Optional - can be null. If not null, the <see cref="P:MGUI.Core.UI.MGElement.SelfOrParentWindow"/> will index all child elements by their <see cref="P:MGUI.Core.UI.MGElement.Name"/>, so <see cref="P:MGUI.Core.UI.MGElement.Name"/>s must be unique.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.HorizontalMargin">
            <summary>Total width of <see cref="P:MGUI.Core.UI.MGElement.Margin"/> (<see cref="P:MonoGame.Extended.Thickness.Left"/> + <see cref="P:MonoGame.Extended.Thickness.Right"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.VerticalMargin">
            <summary>Total height of <see cref="P:MGUI.Core.UI.MGElement.Margin"/> (<see cref="P:MonoGame.Extended.Thickness.Top"/> + <see cref="P:MonoGame.Extended.Thickness.Bottom"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.MarginSize">
            <summary>Total size of <see cref="P:MGUI.Core.UI.MGElement.Margin"/><para/>
            Width = <see cref="P:MonoGame.Extended.Thickness.Left"/> + <see cref="P:MonoGame.Extended.Thickness.Right"/>;<br/>
            Height = <see cref="P:MonoGame.Extended.Thickness.Top"/> + <see cref="P:MonoGame.Extended.Thickness.Bottom"/>;</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.HorizontalPadding">
            <summary>Total width of <see cref="P:MGUI.Core.UI.MGElement.Padding"/> (<see cref="P:MonoGame.Extended.Thickness.Left"/> + <see cref="P:MonoGame.Extended.Thickness.Right"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.VerticalPadding">
            <summary>Total height of <see cref="P:MGUI.Core.UI.MGElement.Padding"/> (<see cref="P:MonoGame.Extended.Thickness.Top"/> + <see cref="P:MonoGame.Extended.Thickness.Bottom"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.PaddingSize">
            <summary>Total size of <see cref="P:MGUI.Core.UI.MGElement.Padding"/><para/>
            Width = <see cref="P:MonoGame.Extended.Thickness.Left"/> + <see cref="P:MonoGame.Extended.Thickness.Right"/>;<br/>
            Height = <see cref="P:MonoGame.Extended.Thickness.Top"/> + <see cref="P:MonoGame.Extended.Thickness.Bottom"/>;</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.HorizontalMarginAndPadding">
            <summary>Total width of <see cref="P:MGUI.Core.UI.MGElement.Margin"/> + <see cref="P:MGUI.Core.UI.MGElement.Padding"/> (<see cref="P:MonoGame.Extended.Thickness.Left"/> + <see cref="P:MonoGame.Extended.Thickness.Right"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.VerticalMarginAndPadding">
            <summary>Total height of <see cref="P:MGUI.Core.UI.MGElement.Margin"/> + <see cref="P:MGUI.Core.UI.MGElement.Padding"/> (<see cref="P:MonoGame.Extended.Thickness.Top"/> + <see cref="P:MonoGame.Extended.Thickness.Bottom"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.MarginAndPaddingSize">
            <summary>Total size of <see cref="P:MGUI.Core.UI.MGElement.Margin"/> + <see cref="P:MGUI.Core.UI.MGElement.Padding"/><para/>
            Width = <see cref="P:MonoGame.Extended.Thickness.Left"/> + <see cref="P:MonoGame.Extended.Thickness.Right"/>;<br/>
            Height = <see cref="P:MonoGame.Extended.Thickness.Top"/> + <see cref="P:MonoGame.Extended.Thickness.Bottom"/>;</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.MinWidth">
            <summary>The minimum width of this <see cref="T:MGUI.Core.UI.MGElement"/>, not including <see cref="P:MGUI.Core.UI.MGElement.HorizontalMargin"/>, or 0 if null.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.MinHeight">
            <summary>The minimum height of this <see cref="T:MGUI.Core.UI.MGElement"/>, not including <see cref="P:MGUI.Core.UI.MGElement.VerticalMargin"/>, or 0 if null.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.MaxWidth">
            <summary>The maximum width of this <see cref="T:MGUI.Core.UI.MGElement"/>, not including <see cref="P:MGUI.Core.UI.MGElement.HorizontalMargin"/>, or <see cref="F:System.Int32.MaxValue"/> if null.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.MaxHeight">
            <summary>The maximum height of this <see cref="T:MGUI.Core.UI.MGElement"/>, not including <see cref="P:MGUI.Core.UI.MGElement.VerticalMargin"/>, or <see cref="F:System.Int32.MaxValue"/> if null.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.MinSize">
            <summary>Combination of <see cref="P:MGUI.Core.UI.MGElement.MinWidth"/> and <see cref="P:MGUI.Core.UI.MGElement.MinHeight"/>. Uses 0 if value is not specified.<para/>
            This value does not include <see cref="P:MGUI.Core.UI.MGElement.Margin"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.MinSizeIncludingMargin"/>, <see cref="P:MGUI.Core.UI.MGElement.MaxSize"/>, <see cref="P:MGUI.Core.UI.MGElement.MaxSizeIncludingMargin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.MinSizeIncludingMargin">
            <summary>Combination of <see cref="P:MGUI.Core.UI.MGElement.MinWidth"/> and <see cref="P:MGUI.Core.UI.MGElement.MinHeight"/>. Uses 0 if value is not specified.<para/>
            This value includes <see cref="P:MGUI.Core.UI.MGElement.Margin"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.MinSize"/>, <see cref="P:MGUI.Core.UI.MGElement.MaxSize"/>, <see cref="P:MGUI.Core.UI.MGElement.MaxSizeIncludingMargin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.MaxSize">
            <summary>Combination of <see cref="P:MGUI.Core.UI.MGElement.MinWidth"/> and <see cref="P:MGUI.Core.UI.MGElement.MinHeight"/>. Uses <see cref="F:System.Int32.MaxValue"/> if value is not specified.<para/>
            This value does not include <see cref="P:MGUI.Core.UI.MGElement.Margin"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.MaxSizeIncludingMargin"/>, <see cref="P:MGUI.Core.UI.MGElement.MinSize"/>, <see cref="P:MGUI.Core.UI.MGElement.MinSizeIncludingMargin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.MaxSizeIncludingMargin">
            <summary>Combination of <see cref="P:MGUI.Core.UI.MGElement.MinWidth"/> and <see cref="P:MGUI.Core.UI.MGElement.MinHeight"/>. Uses <see cref="F:System.Int32.MaxValue"/> if value is not specified.<para/>
            This value includes <see cref="P:MGUI.Core.UI.MGElement.Margin"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.MaxSize"/>, <see cref="P:MGUI.Core.UI.MGElement.MinSize"/>, <see cref="P:MGUI.Core.UI.MGElement.MinSizeIncludingMargin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.PreferredWidth">
            <summary>The requested layout width of this <see cref="T:MGUI.Core.UI.MGElement"/>, not including <see cref="P:MGUI.Core.UI.MGElement.HorizontalMargin"/>.<br/>
            For the value that includes <see cref="P:MGUI.Core.UI.MGElement.HorizontalMargin"/>, use <see cref="P:MGUI.Core.UI.MGElement.ActualPreferredWidth"/>.<para/>
            Not the same as the rendered width if the parent <see cref="T:MGUI.Core.UI.MGElement"/> did not have enough available space to allocate to this <see cref="T:MGUI.Core.UI.MGElement"/> or if there is a non-zero <see cref="P:MGUI.Core.UI.MGElement.HorizontalMargin"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.ActualWidth"/>, <see cref="P:MGUI.Core.UI.MGElement.ActualPreferredWidth"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.PreferredHeight">
            <summary>The requested layout height of this <see cref="T:MGUI.Core.UI.MGElement"/>, not including <see cref="P:MGUI.Core.UI.MGElement.VerticalMargin"/>.<br/>
            For the value that includes <see cref="P:MGUI.Core.UI.MGElement.VerticalMargin"/>, use <see cref="P:MGUI.Core.UI.MGElement.ActualPreferredHeight"/>.<para/>
            Not the same as the rendered height if the parent <see cref="T:MGUI.Core.UI.MGElement"/> did not have enough available space to allocate to this <see cref="T:MGUI.Core.UI.MGElement"/> or if there is a non-zero <see cref="P:MGUI.Core.UI.MGElement.VerticalMargin"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.ActualHeight"/>, <see cref="P:MGUI.Core.UI.MGElement.ActualPreferredHeight"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.ActualPreferredWidth">
            <summary>Same as <see cref="P:MGUI.Core.UI.MGElement.PreferredWidth"/>, except this includes the <see cref="P:MGUI.Core.UI.MGElement.HorizontalMargin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.ActualPreferredHeight">
            <summary>Same as <see cref="P:MGUI.Core.UI.MGElement.PreferredHeight"/>, except this includes the <see cref="P:MGUI.Core.UI.MGElement.VerticalMargin"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGElement.ContextMenuChanged">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGElement.ContextMenu"/> is set to a new value. (Not invoked when the content within <see cref="P:MGUI.Core.UI.MGElement.ContextMenu"/> is modified)<para/>
            See also: <see cref="P:MGUI.Core.UI.MGDesktop.ActiveContextMenu"/>, <see cref="E:MGUI.Core.UI.MGDesktop.ContextMenuClosing"/>, <see cref="E:MGUI.Core.UI.MGDesktop.ContextMenuClosed"/>, <see cref="E:MGUI.Core.UI.MGDesktop.ContextMenuOpening"/>, <see cref="E:MGUI.Core.UI.MGDesktop.ContextMenuOpened"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.KeyboardHandler">
            <summary>Warning - the events within this handler might never be invoked if <see cref="M:MGUI.Shared.Input.Keyboard.IKeyboardHandlerHost.CanReceiveKeyboardInput"/> or <see cref="P:MGUI.Core.UI.MGElement.CanHandleKeyboardInput"/> are false.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGDesktop.FocusedKeyboardHandler"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.IsLMBPressed">
            <summary>True if <see cref="F:MGUI.Shared.Input.Mouse.MouseButton.Left"/> was pressed overtop of this <see cref="T:MGUI.Core.UI.MGElement"/> and has not been released yet.<para/>
            This property can be true even if the mouse isn't overtop of this <see cref="T:MGUI.Core.UI.MGElement"/> (if pressed overtop, but then moved outside and not yet released)<para/>
            You may want to consider checking for <see cref="P:MGUI.Core.UI.MGElement.VisualState"/>'s <see cref="F:MGUI.Core.UI.SecondaryVisualState.Pressed"/> instead.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGWindow.PressedElement"/> (You might also want to call <see cref="M:MGUI.Core.UI.MGElement.IsSelfOrAncestorOf(MGUI.Core.UI.MGElement)"/> on the <see cref="P:MGUI.Core.UI.MGWindow.PressedElement"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.IsHovered">
            <summary>Warning - this property can be true even if this <see cref="T:MGUI.Core.UI.MGElement"/> is entirely occluded by another <see cref="T:MGUI.Core.UI.MGElement"/> overtop it.<para/>
            You may want to consider checking for <see cref="P:MGUI.Core.UI.MGElement.VisualState"/>'s <see cref="F:MGUI.Core.UI.SecondaryVisualState.Hovered"/> instead.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGWindow.HoveredElement"/> (You might also want to call <see cref="M:MGUI.Core.UI.MGElement.IsSelfOrAncestorOf(MGUI.Core.UI.MGElement)"/> on the <see cref="P:MGUI.Core.UI.MGWindow.HoveredElement"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.IsHitTestVisible">
            <summary>True if this <see cref="T:MGUI.Core.UI.MGElement"/> should be allowed to detect and handle mouse and keyboard inputs.<para/>
            This property does not account for the parent's <see cref="P:MGUI.Core.UI.MGElement.IsHitTestVisible"/>. Consider using <see cref="P:MGUI.Core.UI.MGElement.DerivedIsHitTestVisible"/> instead.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.DerivedIsHitTestVisible">
            <summary>True if this <see cref="T:MGUI.Core.UI.MGElement"/> should be allowed to detect and handle mouse and keyboard inputs.<para/>
            This property is only true if both this <see cref="T:MGUI.Core.UI.MGElement"/> and every parent along the visual tree have <see cref="P:MGUI.Core.UI.MGElement.IsHitTestVisible"/>==true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.SpoofIsPressedWhileDrawingBackground">
            <summary>If true, <see cref="P:MGUI.Core.UI.MGElement.IsLMBPressed"/> will be evaluated as true while drawing this element's background, regardless of the real MouseState.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.SpoofIsHoveredWhileDrawingBackground">
            <summary>If true, <see cref="P:MGUI.Core.UI.MGElement.IsHovered"/> will be evaluated as true while drawing this element's background, regardless of the real MouseState.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGElement.VisualStateChanged">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGElement.VisualState"/> changes.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.IsSelected">
            <summary>This property does not account for the parent's <see cref="P:MGUI.Core.UI.MGElement.IsSelected"/>. Consider using <see cref="P:MGUI.Core.UI.MGElement.DerivedIsSelected"/> instead.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.DerivedIsSelected">
            <summary>This property is only false if both this <see cref="T:MGUI.Core.UI.MGElement"/> and every parent along the visual tree have <see cref="P:MGUI.Core.UI.MGElement.IsSelected"/>==false.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.IsEnabled">
            <summary>This property does not account for the parent's <see cref="P:MGUI.Core.UI.MGElement.IsEnabled"/>. Consider using <see cref="P:MGUI.Core.UI.MGElement.DerivedIsEnabled"/> instead.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.DerivedIsEnabled">
            <summary>This property is only true if both this <see cref="T:MGUI.Core.UI.MGElement"/> and every parent along the visual tree have <see cref="P:MGUI.Core.UI.MGElement.IsEnabled"/>==true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.BackgroundRenderPadding">
            <summary>A padding to use when drawing the <see cref="P:MGUI.Core.UI.MGElement.BackgroundBrush"/>.<br/>Default = (0,0,0,0).<para/>
            A negative value allows the background to span a larger rectangular region, such as if the element's border contained some transparent pixels that you would want to fill with the <see cref="P:MGUI.Core.UI.MGElement.BackgroundBrush"/>.<para/>
            Warning - negative padding does NOT increase this element's layout bounds.<br/>
            If using a large enough negative padding, some of the background may be rendered outside of this element's bounds, and thus might be clipped if <see cref="P:MGUI.Core.UI.MGElement.ClipToBounds"/> is true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.BackgroundBrush">
            <summary>The <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/>es to use for this <see cref="T:MGUI.Core.UI.MGElement"/>'s background, depending on the current <see cref="P:MGUI.Core.UI.MGElement.VisualState"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.BackgroundUnderlay"/>, <see cref="P:MGUI.Core.UI.MGElement.BackgroundOverlay"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.BackgroundUnderlay">
            <summary>The first <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> used to draw this <see cref="T:MGUI.Core.UI.MGElement"/>'s background. Drawn before <see cref="P:MGUI.Core.UI.MGElement.BackgroundOverlay"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.BackgroundOverlay">
            <summary>The second <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> used to draw this <see cref="T:MGUI.Core.UI.MGElement"/>'s background. Drawn after <see cref="P:MGUI.Core.UI.MGElement.BackgroundUnderlay"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.DefaultTextForeground">
            <summary>The default foreground color to use when rendering text on this <see cref="T:MGUI.Core.UI.MGElement"/> or any of its child elements.<br/>
            For a value that accounts for the parent's <see cref="P:MGUI.Core.UI.MGElement.DefaultTextForeground"/>, use <see cref="P:MGUI.Core.UI.MGElement.DerivedDefaultTextForeground"/> instead.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.DerivedDefaultTextForeground"/>, <see cref="P:MGUI.Core.UI.MGElement.CurrentDefaultTextForeground"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.CurrentDefaultTextForeground">
            <summary>The currently-active value from <see cref="P:MGUI.Core.UI.MGElement.DefaultTextForeground"/>, based on <see cref="P:MGUI.Core.UI.MGElement.VisualState"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.DerivedDefaultTextForeground">
            <summary>This property prioritizes <see cref="P:MGUI.Core.UI.MGElement.CurrentDefaultTextForeground"/> if it has a value.<br/>
            Else traverses up the visual tree until finding the first non-null <see cref="P:MGUI.Core.UI.MGElement.CurrentDefaultTextForeground"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.Opacity">
            <summary>This property does not account for the parent's <see cref="P:MGUI.Core.UI.MGElement.Opacity"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.Metadata">
            <summary>General-purpose dictionary to attach your own data to this <see cref="T:MGUI.Core.UI.MGElement"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.Tag">
            <summary>General-purpose object to attach your own data to this <see cref="T:MGUI.Core.UI.MGElement"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.BeginInitializing">
            <summary>To improve performance, consider invoking this method during constructor initialization.<para/>
            This will defer layout updates until the <see cref="T:MGUI.Shared.Helpers.DeferEventsTransaction"/> is disposed.</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGElement.InvokeLaterPriority.OnBeginUpdate">
            <summary>See also: <see cref="E:MGUI.Core.UI.MGElement.OnBeginUpdate"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGElement.InvokeLaterPriority.OnBeginUpdateContents">
            <summary>See also: <see cref="E:MGUI.Core.UI.MGElement.OnBeginUpdateContents"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGElement.InvokeLaterPriority.OnEndUpdateContents">
            <summary>See also: <see cref="E:MGUI.Core.UI.MGElement.OnEndUpdateContents"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGElement.InvokeLaterPriority.OnEndUpdate">
            <summary>See also: <see cref="E:MGUI.Core.UI.MGElement.OnEndUpdate"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.InvokeLater(System.Action,System.Int32,MGUI.Core.UI.MGElement.InvokeLaterPriority)">
            <summary>Invokes the given <paramref name="Action"/> after a certain number of update ticks given by <paramref name="FrameDelay"/>.</summary>
            <param name="Action"></param>
            <param name="FrameDelay">How many update ticks to wait before executing the <paramref name="Action"/>.<br/>
            Must be > 0. If 1, the <paramref name="Action"/> will be executed during the next update.</param>
            <param name="Priority">Determines what part of the update tick the action should be invoked during</param>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.RemoveDataBindings(System.Boolean)">
            <summary>Removes all <see cref="T:MGUI.Core.UI.Data_Binding.DataBinding"/>s that are associated with this <see cref="T:MGUI.Core.UI.MGElement"/>.<para/>
            Recommended to invoke this method if you are about to remove this <see cref="T:MGUI.Core.UI.MGElement"/> from the visual tree,<br/>
            so that all data bindings can unsubscribe from events such as <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.</summary>
            <param name="IncludeChildren">If true, will also recursively remove bindings for all child items.</param>
            <returns>The number of <see cref="T:MGUI.Core.UI.Data_Binding.DataBinding"/>s that were deleted.</returns>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.Origin">
            <summary>This value is typically <see cref="P:Microsoft.Xna.Framework.Point.Zero"/> except when this <see cref="T:MGUI.Core.UI.MGElement"/> is a child of an <see cref="T:MGUI.Core.UI.MGScrollViewer"/>,<br/>
            in which case the origin would be based on the <see cref="P:MGUI.Core.UI.MGScrollViewer.HorizontalOffset"/> / <see cref="P:MGUI.Core.UI.MGScrollViewer.VerticalOffset"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.ActualLayoutBounds">
            <summary>The screen space that this element is rendered to.<para/>
            Unlike <see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/>, this value always uses an origin of <see cref="P:Microsoft.Xna.Framework.Point.Zero"/>, rather than being relative to <see cref="P:MGUI.Core.UI.MGElement.Origin"/>,<br/>
            and also accounts for <see cref="P:MGUI.Core.UI.MGElement.ClipToBounds"/> by intersecting the bounds with the parent's <see cref="P:MGUI.Core.UI.MGElement.ActualLayoutBounds"/>.<para/>
            This value will show Width=0/Height=0 for elements that are outside the visible viewport, even if they've technically been allocated non-zero dimensions.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/>, <see cref="P:MGUI.Core.UI.MGElement.Origin"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.AllocatedBounds">
            <summary>The screen space that was allocated to this <see cref="T:MGUI.Core.UI.MGElement"/>.<br/>
            This <see cref="T:MGUI.Core.UI.MGElement"/> may choose not to use all of the allocated space based on <see cref="P:MGUI.Core.UI.MGElement.HorizontalAlignment"/> and <see cref="P:MGUI.Core.UI.MGElement.VerticalAlignment"/>.<para/>
            This value does not account for <see cref="P:MGUI.Core.UI.MGElement.Origin"/> and thus might not match the exact screen bounds where this <see cref="T:MGUI.Core.UI.MGElement"/> was drawn.<para/>
            See also: <br/><see cref="P:MGUI.Core.UI.MGElement.AllocatedBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.RenderBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.StretchedContentBounds"/><br/>
            <see cref="P:MGUI.Core.UI.MGElement.AlignedContentBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.ActualLayoutBounds"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.RenderBounds">
            <summary>The screen space that this <see cref="T:MGUI.Core.UI.MGElement"/> will render itself to.<br/>
            This value accounts for <see cref="P:MGUI.Core.UI.MGElement.HorizontalAlignment"/> and <see cref="P:MGUI.Core.UI.MGElement.VerticalAlignment"/>.<para/>
            This value does not account for <see cref="P:MGUI.Core.UI.MGElement.Origin"/> and thus might not match the exact screen bounds where this <see cref="T:MGUI.Core.UI.MGElement"/> was drawn.<para/>
            See also: <br/><see cref="P:MGUI.Core.UI.MGElement.AllocatedBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.RenderBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.StretchedContentBounds"/><br/>
            <see cref="P:MGUI.Core.UI.MGElement.AlignedContentBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.ActualLayoutBounds"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.LayoutBounds">
            <summary>The screen space that this <see cref="T:MGUI.Core.UI.MGElement"/> will render itself to, after accounting for <see cref="P:MGUI.Core.UI.MGElement.Margin"/>.<br/>
            The <see cref="P:MGUI.Core.UI.MGElement.BackgroundBrush"/> of this <see cref="T:MGUI.Core.UI.MGElement"/> spans these bounds.<para/>
            This value does not account for <see cref="P:MGUI.Core.UI.MGElement.Origin"/> and thus might not match the exact screen bounds where this <see cref="T:MGUI.Core.UI.MGElement"/> was drawn.<para/>
            See also: <br/><see cref="P:MGUI.Core.UI.MGElement.AllocatedBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.RenderBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.StretchedContentBounds"/><br/>
            <see cref="P:MGUI.Core.UI.MGElement.AlignedContentBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.ActualLayoutBounds"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.StretchedContentBounds">
            <summary>The screen space that this <see cref="T:MGUI.Core.UI.MGElement"/>'s contents will render to, before accounting for <see cref="P:MGUI.Core.UI.MGElement.HorizontalContentAlignment"/> and <see cref="P:MGUI.Core.UI.MGElement.VerticalContentAlignment"/>.<br/>
            This value accounts for <see cref="P:MGUI.Core.UI.MGElement.Margin"/>, <see cref="P:MGUI.Core.UI.MGElement.Padding"/>, and any other properties that affect this <see cref="T:MGUI.Core.UI.MGElement"/>'s size (such as BorderThickness of a <see cref="T:MGUI.Core.UI.MGBorder"/>).<para/>
            This value does not account for <see cref="P:MGUI.Core.UI.MGElement.Origin"/> and thus might not match the exact screen bounds where this <see cref="T:MGUI.Core.UI.MGElement"/> was drawn.<para/>
            See also: <br/><see cref="P:MGUI.Core.UI.MGElement.AllocatedBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.RenderBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.StretchedContentBounds"/><br/>
            <see cref="P:MGUI.Core.UI.MGElement.AlignedContentBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.ActualLayoutBounds"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.AlignedContentBounds">
            <summary>The screen space that this <see cref="T:MGUI.Core.UI.MGElement"/>'s contents will render to, after accounting for <see cref="P:MGUI.Core.UI.MGElement.HorizontalContentAlignment"/> and <see cref="P:MGUI.Core.UI.MGElement.VerticalContentAlignment"/>.<br/>
            This value accounts for <see cref="P:MGUI.Core.UI.MGElement.Margin"/>, <see cref="P:MGUI.Core.UI.MGElement.Padding"/>, and any other properties that affect this <see cref="T:MGUI.Core.UI.MGElement"/>'s size (such as BorderThickness of a <see cref="T:MGUI.Core.UI.MGBorder"/>).<para/>
            This value does not account for <see cref="P:MGUI.Core.UI.MGElement.Origin"/> and thus might not match the exact screen bounds where this <see cref="T:MGUI.Core.UI.MGElement"/> was drawn.<para/>
            See also: <br/><see cref="P:MGUI.Core.UI.MGElement.AllocatedBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.RenderBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.StretchedContentBounds"/><br/>
            <see cref="P:MGUI.Core.UI.MGElement.AlignedContentBounds"/><br/><see cref="P:MGUI.Core.UI.MGElement.ActualLayoutBounds"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.ActualWidth">
            <summary>Note: This value does not include <see cref="P:MGUI.Core.UI.MGElement.Margin"/>. For a value with <see cref="P:MGUI.Core.UI.MGElement.Margin"/>, consider using <see cref="P:MGUI.Core.UI.MGElement.RenderBounds"/>.Width</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.ActualHeight">
            <summary>Note: This value does not include <see cref="P:MGUI.Core.UI.MGElement.Margin"/>. For a value with <see cref="P:MGUI.Core.UI.MGElement.Margin"/>, consider using <see cref="P:MGUI.Core.UI.MGElement.RenderBounds"/>.Height</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.RenderScale">
            <summary>A scale transform to apply to this <see cref="T:MGUI.Core.UI.MGElement"/> when the appropriate condition is met. (such as <see cref="P:MGUI.Core.UI.MGElement.IsLMBPressed"/> is true)<para/>
            This scale transform only affects how the element is rendered, but not its layout, so it may result in overlapping elements. Uses the center of <see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/> as the scaling origin.<para/>
            Default value: null</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.RecentDrawWasClipped">
            <summary>True if the most recent Draw call resulted in this <see cref="T:MGUI.Core.UI.MGElement"/> not being drawn, due to one of the following reasons:<para/>
            It was out-of-bounds (See: <see cref="P:MGUI.Core.UI.MGElement.ClipToBounds"/>, <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ScissorRectangle"/>, <see cref="P:Microsoft.Xna.Framework.Graphics.RasterizerState.ScissorTestEnable"/>)<br/>
            It was not visible (See: <see cref="P:MGUI.Core.UI.MGElement.Visibility"/>)<br/>
            It had no geometry (See: <see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/>, Width and/or Height = 0)</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGElement.OnEndingDraw">
            <summary>Invoked after drawing the background, self, and all components, 
            but while the <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ScissorRectangle"/> is still set to the desired screen-space bounds of this element.<para/>
            See also: <see cref="E:MGUI.Core.UI.MGElement.OnEndDraw"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGElement.OnEndDraw">
            <summary>Invoked at the very end of <see cref="M:MGUI.Core.UI.MGElement.Draw(MGUI.Core.UI.ElementDrawArgs)"/>.<br/>
            Unlike <see cref="E:MGUI.Core.UI.MGElement.OnEndingDraw"/>, this event is invoked AFTER the <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ScissorRectangle"/> has been reverted to its prior value.<para/>
            See also: <see cref="E:MGUI.Core.UI.MGElement.OnEndingDraw"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.LayoutChanged(MGUI.Core.UI.MGElement,System.Boolean)">
            <summary>Invoked when a property that affects this <see cref="T:MGUI.Core.UI.MGElement"/>'s layout has changed, such as <see cref="P:MGUI.Core.UI.MGElement.Padding"/>, <see cref="P:MGUI.Core.UI.MGElement.Margin"/>, or its content.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.IsLayoutValid">
            <summary>If true, indicates that the layout will be re-calculated during the next update tick. This also invalidates any cached measurements.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.RecentMeasurementsFull">
            <summary>Full measurements - I.E. includes the requested size of this <see cref="T:MGUI.Core.UI.MGElement"/> and its content, if any.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.RecentMeasurementsSelfOnly"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.RecentMeasurementsSelfOnly">
            <summary>Recent measurements that only account for the requested size of this <see cref="T:MGUI.Core.UI.MGElement"/>; does not include the requested size of its content, if any.<br/>
            For example, a Border would only account for the total width of it's Margin, Padding, and BorderThickness.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.RecentMeasurementsFull"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.TryGetCachedMeasurement(MonoGame.Extended.Size,MGUI.Core.UI.ElementMeasurement@,MGUI.Core.UI.ElementMeasurement@)">
            <param name="SelfMeasurement">A measurement that only accounts for this <see cref="T:MGUI.Core.UI.MGElement"/> and not its content.<br/>
            For example, for a Border, this would include Margin, Padding, and BorderThickness.</param>
            <param name="FullMeasurement">A measurement that accounts for both this <see cref="T:MGUI.Core.UI.MGElement"/> self-measurement and the measurement of its content, if any.</param>
        </member>
        <member name="P:MGUI.Core.UI.MGElement.CanConsumeSpaceInSingleDimension">
            <summary>If true, this element is capable of consuming non-zero width when the height is zero, or a non-zero height when the width is zero.<br/>
            Default value is false, which means that if the element is assigned 0 width or height, then BOTH the width and height are automatically truncated to zero.<para/>
            For example, if an <see cref="T:MGUI.Core.UI.MGButton"/> requested 16x16, but there was no vertical space available, then rather than allocating it 16x0, it is allocated 0x0</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.MeasureSelf(MonoGame.Extended.Size,MonoGame.Extended.Thickness@)">
            <summary>Returns the screen space required to display this <see cref="T:MGUI.Core.UI.MGElement"/> if it has no child elements.<para/>
            For simple elements, this accounts for <see cref="P:MGUI.Core.UI.MGElement.Margin"/> and <see cref="P:MGUI.Core.UI.MGElement.Padding"/>.<br/>
            For a Border, this would also include the BorderThickness.<br/>
            For a TextBlock, this would include the size of the text content etc.</summary>
            <param name="SharedSize">Typically 0. This represents how much of the self measurement can be shared with the measurement of the content.<para/>
            For example, a checkbox contains a checkable rectangular portion that is in-line with the content.<br/>
            So if that checkable rectangle has height=16, and content has height=20, the total height is '16 + Math.Max(0, 20-16)' rather than 16+20=36.</param>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.MeasureSelfOverride(MonoGame.Extended.Size,MonoGame.Extended.Thickness@)">
            <summary>This method should not include <see cref="P:MGUI.Core.UI.MGElement.Margin"/> nor <see cref="P:MGUI.Core.UI.MGElement.Padding"/>.</summary>
            <param name="SharedSize">Typically 0. This represents how much of the self measurement can be shared with the measurement of the content.<para/>
            For example, a checkbox contains a checkable rectangular portion that is in-line with the content.<br/>
            So if that checkable rectangle has height=16, and content has height=20, the total height is '16 + Math.Max(0, 20-16)' rather than 16+20=36.</param>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.GetVisualTreeChildren(System.Boolean,System.Boolean)">
            <param name="IncludeActive">If true, active content will also be enumerated. Recommended value: true</param>
            <param name="IncludeInactive">If true, inactive content (child content which is unable to receive inputs, regardless of its <see cref="P:MGUI.Core.UI.MGElement.IsHitTestVisible"/> value,<br/>
            such as an unselected tab within a <see cref="T:MGUI.Core.UI.MGTabControl"/>) will also be enumerated.</param>
        </member>
        <member name="F:MGUI.Core.UI.MGElement.TreeTraversalMode.Preorder">
            <summary>Visits the root node, then visits its children</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGElement.TreeTraversalMode.Postorder">
            <summary>Visits the root node's children, then visits itself</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.IsSelfOrAncestorOf(MGUI.Core.UI.MGElement)">
            <summary>Returns true if this <see cref="T:MGUI.Core.UI.MGElement"/> is the same reference as the given <paramref name="Element"/>,<br/>
            or if this <see cref="T:MGUI.Core.UI.MGElement"/> is a parent of the given <paramref name="Element"/> anywhere along the visual tree (does not need to be the immediate parent)</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.TraverseVisualTree(System.Boolean,System.Boolean,System.Boolean,System.Boolean,MGUI.Core.UI.MGElement.TreeTraversalMode)">
            <param name="IncludeSelf">If true, may return a reference to this element, or to one of this element's components (if <paramref name="IncludeComponents"/> is also true).</param>
            <param name="IncludeComponents">If true, may returns a reference to a component of an element, such as the button part of an <see cref="T:MGUI.Core.UI.MGCheckBox"/>.</param>
            <param name="TraversalMode">The order to visit the nodes in.</param>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.TraverseVisualTree``1(System.Boolean,System.Boolean,System.Boolean,System.Boolean,MGUI.Core.UI.MGElement.TreeTraversalMode)">
            <param name="IncludeSelf">If true, may return a reference to this element, or to one of this element's components (if <paramref name="IncludeComponents"/> is also true).</param>
            <param name="IncludeComponents">If true, may returns a reference to a component of an element, such as the button part of an <see cref="T:MGUI.Core.UI.MGCheckBox"/>.</param>
            <param name="TraversalMode">The order to visit the nodes in.</param>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.FindElement(System.Predicate{MGUI.Core.UI.MGElement},System.Boolean,System.Boolean,System.Boolean,System.Boolean,MGUI.Core.UI.MGElement.TreeTraversalMode)">
            <summary>Returns the first element in the visual tree that satisfies the given <paramref name="Predicate"/></summary>
            <param name="IncludeSelf">If true, may return a reference to this element, or to one of this element's components (if <paramref name="IncludeComponents"/> is also true).</param>
            <param name="IncludeComponents">If true, may returns a reference to a component of an element, such as the button part of an <see cref="T:MGUI.Core.UI.MGCheckBox"/>.</param>
            <param name="TraversalMode">The order to visit the nodes and evaluate the <paramref name="Predicate"/> in.</param>
            <returns>The first match, or null if no valid match was found.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.FindElement``1(System.Predicate{``0},System.Boolean,System.Boolean,System.Boolean,System.Boolean,MGUI.Core.UI.MGElement.TreeTraversalMode)">
            <summary>Returns the first element in the visual tree of type=<typeparamref name="T"/> that satisfies the given <paramref name="Predicate"/></summary>
            <param name="IncludeSelf">If true, may return a reference to this element, or to one of this element's components (if <paramref name="IncludeComponents"/> is also true).</param>
            <param name="IncludeComponents">If true, may returns a reference to a component of an element, such as the button part of an <see cref="T:MGUI.Core.UI.MGCheckBox"/>.</param>
            <param name="TraversalMode">The order to visit the nodes and evaluate the <paramref name="Predicate"/> in.</param>
            <returns>The first match, or null if no valid match was found.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.GetElements(System.Predicate{MGUI.Core.UI.MGElement},System.Boolean,System.Boolean,System.Boolean,System.Boolean,MGUI.Core.UI.MGElement.TreeTraversalMode)">
            <summary>Returns all elements in the visual tree that satisfy the given <paramref name="Predicate"/></summary>
            <param name="IncludeSelf">If true, may return a reference to this element, or to one of this element's components (if <paramref name="IncludeComponents"/> is also true).</param>
            <param name="IncludeComponents">If true, may returns a reference to a component of an element, such as the button part of an <see cref="T:MGUI.Core.UI.MGCheckBox"/>.</param>
            <param name="TraversalMode">The order to visit the nodes and evaluate the <paramref name="Predicate"/> in.</param>
        </member>
        <member name="M:MGUI.Core.UI.MGElement.GetElements``1(System.Predicate{``0},System.Boolean,System.Boolean,System.Boolean,System.Boolean,MGUI.Core.UI.MGElement.TreeTraversalMode)">
            <summary>Returns all elements in the visual tree of type=<typeparamref name="T"/> that satisfy the given <paramref name="Predicate"/></summary>
            <param name="IncludeSelf">If true, may return a reference to this element, or to one of this element's components (if <paramref name="IncludeComponents"/> is also true).</param>
            <param name="IncludeComponents">If true, may returns a reference to a component of an element, such as the button part of an <see cref="T:MGUI.Core.UI.MGCheckBox"/>.</param>
            <param name="TraversalMode">The order to visit the nodes and evaluate the <paramref name="Predicate"/> in.</param>
        </member>
        <member name="T:MGUI.Core.UI.MGElementTemplate">
            <summary>Represents a template that can be used to generate <see cref="T:MGUI.Core.UI.MGElement"/> instances.<para/>
            For example, <see cref="T:MGUI.Core.UI.XAML.ContentTemplate"/> may specify an <see cref="T:MGUI.Core.UI.MGElementTemplate"/> via <see cref="P:MGUI.Core.UI.XAML.ContentTemplate.ContentTemplateName"/> instead of using <see cref="P:MGUI.Core.UI.XAML.ContentTemplate.Content"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGElementTemplate.IsShared">
            <summary>If true, this template will only generate a single element instance and return that same instance every time <see cref="M:MGUI.Core.UI.MGElementTemplate.GetInstance(MGUI.Core.UI.MGWindow)"/> is invoked.<para/>
            If unsure, set this to false.</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGElementTemplate.Template">
            <summary>The function that is invoked to generate the element instance.<para/>
            Recommended to use <see cref="M:MGUI.Core.UI.MGElementTemplate.GetInstance(MGUI.Core.UI.MGWindow)"/> instead of invoking this function to account for <see cref="F:MGUI.Core.UI.MGElementTemplate.IsShared"/>.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGElementTemplate.#ctor(System.String,System.Boolean,System.Func{MGUI.Core.UI.MGWindow,MGUI.Core.UI.MGElement})">
            <param name="IsShared">If true, this template will only generate a single element instance and return that same instance every 
            time <see cref="M:MGUI.Core.UI.MGElementTemplate.GetInstance(MGUI.Core.UI.MGWindow)"/> is invoked.<para/>If unsure, set this to false.</param>
            <param name="Template">The function that will be invoked to generate the element instance.</param>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.ExpanderButtonSize">
            <summary>The width and height of the button part of this <see cref="T:MGUI.Core.UI.MGExpander"/>'s header.<para/>
            Default value: <see cref="P:MGUI.Core.UI.MGExpander.DefaultExpanderButtonSize"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.ExpanderButtonBackgroundBrush">
            <summary>Contains the <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/>es to use when drawing the background of the button part of this <see cref="T:MGUI.Core.UI.MGExpander"/>'s header.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.ExpanderDropdownArrowColor">
            <summary>The color to use when rendering the dropdown arrow icon inside the button part of this <see cref="T:MGUI.Core.UI.MGExpander"/>'s header.<para/>
            Default value: <see cref="P:MGUI.Core.UI.MGTheme.DropdownArrowColor"/><para/>
            See also:<br/><see cref="P:MGUI.Core.UI.MGWindow.Theme"/><br/><see cref="P:MGUI.Core.UI.MGDesktop.Theme"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.ExpanderDropdownArrowSize">
            <summary>The width of the dropdown arrow icon inside the button part of this <see cref="T:MGUI.Core.UI.MGExpander"/>'s header.<para/>
            The height of the dropdown arrow icon is based on the width.<para/>
            Default value: <see cref="P:MGUI.Core.UI.MGExpander.DefaultExpanderDropdownArrowSize"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.HeaderSpacingWidth">
            <summary>The empty width between the expander button and the <see cref="P:MGUI.Core.UI.MGExpander.Header"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.Header">
            <summary>Optional. Additional content to display to the right of the expander button.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.HeaderVerticalAlignment">
            <summary>Convenience property that just gets or sets <see cref="P:MGUI.Core.UI.MGExpander.Header"/>'s <see cref="P:MGUI.Core.UI.MGElement.VerticalAlignment"/>.<para/>
            This property is null if there is no <see cref="P:MGUI.Core.UI.MGExpander.Header"/>.<para/>
            This value is not maintained if <see cref="P:MGUI.Core.UI.MGExpander.Header"/> is set to a new value. 
            For example, if you set <see cref="P:MGUI.Core.UI.MGExpander.HeaderVerticalAlignment"/> to <see cref="F:MGUI.Core.UI.VerticalAlignment.Bottom"/>,
            but then set <see cref="P:MGUI.Core.UI.MGExpander.Header"/> to a new value with <see cref="P:MGUI.Core.UI.MGElement.VerticalAlignment"/>=<see cref="F:MGUI.Core.UI.VerticalAlignment.Center"/>,
            the new <see cref="P:MGUI.Core.UI.MGExpander.Header"/> will not automatically be changed to <see cref="F:MGUI.Core.UI.VerticalAlignment.Bottom"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.IsExpanded">
            <summary>See also: <see cref="P:MGUI.Core.UI.MGExpander.IsCollapsed"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.IsCollapsed">
            <summary>This value is always the opposite of <see cref="P:MGUI.Core.UI.MGExpander.IsExpanded"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGExpander.PreviewExpandedStateChanging">
            <summary>Invoked just before <see cref="P:MGUI.Core.UI.MGExpander.IsExpanded"/> is changed. (Invoked before <see cref="E:MGUI.Core.UI.MGExpander.PreviewExpanding"/> and <see cref="E:MGUI.Core.UI.MGExpander.PreviewCollapsing"/>)</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGExpander.PreviewExpanding">
            <summary>Invoked just before <see cref="P:MGUI.Core.UI.MGExpander.IsExpanded"/> is set to true. (Invoked after <see cref="E:MGUI.Core.UI.MGExpander.PreviewExpandedStateChanging"/>)</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGExpander.PreviewCollapsing">
            <summary>Invoked just before <see cref="P:MGUI.Core.UI.MGExpander.IsExpanded"/> is set to false. (Invoked after <see cref="E:MGUI.Core.UI.MGExpander.PreviewExpandedStateChanging"/>)</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGExpander.ExpandedStateChanged">
            <summary>Invoked after <see cref="P:MGUI.Core.UI.MGExpander.IsExpanded"/> is changed. (Invoked before <see cref="E:MGUI.Core.UI.MGExpander.Expanded"/> and <see cref="E:MGUI.Core.UI.MGExpander.Collapsed"/>)</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGExpander.Expanded">
            <summary>Invoked after <see cref="P:MGUI.Core.UI.MGExpander.IsExpanded"/> is set to true. (Invoked after <see cref="E:MGUI.Core.UI.MGExpander.ExpandedStateChanged"/>)</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGExpander.Collapsed">
            <summary>Invoked after <see cref="P:MGUI.Core.UI.MGExpander.IsExpanded"/> is set to false. (Invoked after <see cref="E:MGUI.Core.UI.MGExpander.ExpandedStateChanged"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.ExpandedVisibility">
            <summary>The <see cref="T:MGUI.Core.UI.Visibility"/> value to apply to <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/> when <see cref="P:MGUI.Core.UI.MGExpander.IsExpanded"/> is true<para/>
            Default value: <see cref="F:MGUI.Core.UI.Visibility.Visible"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.CollapsedVisibility">
            <summary>The <see cref="T:MGUI.Core.UI.Visibility"/> value to apply to <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/> when <see cref="P:MGUI.Core.UI.MGExpander.IsCollapsed"/> is true<para/>
            Default value: <see cref="F:MGUI.Core.UI.Visibility.Collapsed"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGExpander.BindVisibility(MGUI.Core.UI.MGElement)">
            <summary>Binds the given <paramref name="Element"/>'s <see cref="P:MGUI.Core.UI.MGElement.Visibility"/> to this <see cref="T:MGUI.Core.UI.MGExpander"/>'s <see cref="P:MGUI.Core.UI.MGExpander.IsExpanded"/> state.<para/>
            See also: <see cref="M:MGUI.Core.UI.MGExpander.UnbindVisibility(MGUI.Core.UI.MGElement)"/>, <see cref="P:MGUI.Core.UI.MGExpander.ExpandedVisibility"/>, <see cref="P:MGUI.Core.UI.MGExpander.CollapsedVisibility"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGExpander.UnbindVisibility(MGUI.Core.UI.MGElement)">
            <summary>Unbinds the given <paramref name="Element"/>'s <see cref="P:MGUI.Core.UI.MGElement.Visibility"/> from this <see cref="T:MGUI.Core.UI.MGExpander"/>'s <see cref="P:MGUI.Core.UI.MGExpander.IsExpanded"/> state.<para/>
            See also: <see cref="M:MGUI.Core.UI.MGExpander.BindVisibility(MGUI.Core.UI.MGElement)"/>, <see cref="P:MGUI.Core.UI.MGExpander.ExpandedVisibility"/>, <see cref="P:MGUI.Core.UI.MGExpander.CollapsedVisibility"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.HeadersPanelComponent">
            <summary>Provides direct access to to the stackpanel component that the expander button and the header content are placed inside of.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGExpander.HeaderBottomMargin">
            <summary>Margin between the bottom of the header and the top of the expandable content.<para/>
            Functionally equivalent to the bottom margin of <see cref="P:MGUI.Core.UI.MGExpander.HeadersPanelElement"/>'s <see cref="P:MGUI.Core.UI.MGElement.Margin"/><para/>
            Default value: 3</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGGroupBox.OuterHeaderPresenter">
            <summary>The primary header of this <see cref="T:MGUI.Core.UI.MGGroupBox"/> which contains both the <see cref="P:MGUI.Core.UI.MGGroupBox.Expander"/> and the <see cref="P:MGUI.Core.UI.MGGroupBox.HeaderPresenter"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGGroupBox.Expander">
            <summary>Only visible if <see cref="P:MGUI.Core.UI.MGGroupBox.IsExpandable"/> is true. Defaults to a 5px right margin.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGGroupBox.HeaderPresenter">
            <summary>The wrapper element that contains the <see cref="P:MGUI.Core.UI.MGGroupBox.Header"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGGroupBox.Header">
            <summary>The content to displays in this <see cref="T:MGUI.Core.UI.MGGroupBox"/>'s header, above the content and vertically-centered with the top edge of the <see cref="P:MGUI.Core.UI.MGGroupBox.BorderBrush"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGGroupBox.HeaderHorizontalMargin">
            <summary>The empty width to the left and the right of the <see cref="P:MGUI.Core.UI.MGGroupBox.Header"/>. This space will not be occupied by the top portion of the border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGGroupBox.HeaderHorizontalPadding">
            <summary>The empty width to the left and the right of the <see cref="P:MGUI.Core.UI.MGGroupBox.Header"/>. This space WILL be occupied by the top portion of the border.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Stretch">
            <summary>Describes how content is resized to fill its allocated space.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Stretch.None">
            <summary>The content preserves its original size.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Stretch.Fill">
            <summary>The content is resized to fill the destination dimensions. The aspect ratio is not preserved.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Stretch.Uniform">
            <summary>The content is resized to fit in the destination dimensions while it preserves its native aspect ratio.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Stretch.UniformToFill">
            <summary>The content is resized to fill the destination dimensions while it preserves its native aspect ratio. 
            If the aspect ratio of the destination rectangle differs from the source, the source content is clipped to fit in the destination dimensions.</summary>
        </member>
        <member name="T:MGUI.Core.UI.StretchDirection">
            <summary>Describes how scaling applies to content and restricts scaling to named axis types.</summary>
        </member>
        <member name="F:MGUI.Core.UI.StretchDirection.UpOnly">
            <summary>The content scales upward only when it is smaller than the parent. If the content is larger, no scaling downward is performed.</summary>
        </member>
        <member name="F:MGUI.Core.UI.StretchDirection.DownOnly">
            <summary>The content scales downward only when it is larger than the parent. If the content is smaller, no scaling upward is performed.</summary>
        </member>
        <member name="F:MGUI.Core.UI.StretchDirection.Both">
            <summary>The content stretches to fit the parent according to the Stretch mode.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGImage.SourceName">
            <summary>The name of the <see cref="T:MGUI.Core.UI.MGTextureData"/> resource to draw, 
            or null if the <see cref="T:MGUI.Core.UI.MGTextureData"/> is explicitly specified via <see cref="P:MGUI.Core.UI.MGImage.Source"/>.<br/>
            This resource is retrieved from <see cref="P:MGUI.Core.UI.MGResources.Textures"/><para/>
            See also:<br/><see cref="M:MGUI.Core.UI.MGElement.GetResources"/><br/><see cref="P:MGUI.Core.UI.MGResources.Textures"/><br/><see cref="M:MGUI.Core.UI.MGResources.AddTexture(System.String,MGUI.Core.UI.MGTextureData)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGImage.Source">
            <summary>The <see cref="T:MGUI.Core.UI.MGTextureData"/> resource to draw,
            or null if the <see cref="T:MGUI.Core.UI.MGTextureData"/> is instead referenced by name via <see cref="P:MGUI.Core.UI.MGImage.SourceName"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGImage.SourceName"/>, <see cref="P:MGUI.Core.UI.MGImage.ActualSource"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGImage.ActualSource">
            <summary>Prioritizes <see cref="P:MGUI.Core.UI.MGImage.Source"/> if specified, otherwise attempts to retrieve the named texture resource from <see cref="P:MGUI.Core.UI.MGResources.Textures"/> based on <see cref="P:MGUI.Core.UI.MGImage.SourceName"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGImage.TextureColor">
            <summary>A color to use when drawing the texture. Uses <see cref="P:Microsoft.Xna.Framework.Color.White"/> if null.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGImage.#ctor(MGUI.Core.UI.MGWindow,System.String,MGUI.Core.UI.Stretch)">
            <param name="SourceName">The name of the <see cref="T:MGUI.Core.UI.MGTextureData"/> in <see cref="P:MGUI.Core.UI.MGResources.Textures"/> that should be drawn by this <see cref="T:MGUI.Core.UI.MGImage"/>.<para/>
            See also: <see cref="M:MGUI.Core.UI.MGElement.GetResources"/>, <see cref="P:MGUI.Core.UI.MGResources.Textures"/>, <see cref="P:MGUI.Core.UI.MGImage.SourceName"/></param>
        </member>
        <member name="T:MGUI.Core.UI.MGInputConsumer">
            <summary>A wrapper element that ensures mouse-related inputs are handled either by this element or its children,<br/>
            rather than allowing unhandled inputs to continue bubbling up the visual tree.</summary>
        </member>
        <member name="F:MGUI.Core.UI.ListBoxSelectionMode.None">
            <summary>Items cannot be selected</summary>
        </member>
        <member name="F:MGUI.Core.UI.ListBoxSelectionMode.Single">
            <summary>A single item may be selected at a time, by left-clicking it</summary>
        </member>
        <member name="F:MGUI.Core.UI.ListBoxSelectionMode.Contiguous">
            <summary>A set of consecutive items may be selected at once. Left-click to replace selection with a single item.<br/>
            Shift+Left-click to select all consecutive items between the current selection source and the clicked item.</summary>
        </member>
        <member name="F:MGUI.Core.UI.ListBoxSelectionMode.Multiple">
            <summary>Any number of items may be selected at once. Left-click to replace selection with a single item.<br/>
            Ctrl+Left-click to toggle the selection state of the clicked item.</summary>
        </member>
        <member name="T:MGUI.Core.UI.MGListBox`1">
            <typeparam name="TItemType">The type that the ItemsSource will be bound to.</typeparam>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.OuterBorder">
            <summary><see cref="T:MGUI.Core.UI.MGListBox`1"/>es contain 3 borders:<para/>
            1. <see cref="P:MGUI.Core.UI.MGListBox`1.OuterBorder"/>: Wrapped around the entire <see cref="T:MGUI.Core.UI.MGListBox`1"/><br/>
            2. <see cref="P:MGUI.Core.UI.MGListBox`1.InnerBorder"/>: Wrapped around the <see cref="P:MGUI.Core.UI.MGListBox`1.ItemsPanel"/>, but not the <see cref="P:MGUI.Core.UI.MGListBox`1.TitleComponent"/><br/>
            3. <see cref="P:MGUI.Core.UI.MGListBox`1.TitleBorder"/>: Wrapped around the <see cref="P:MGUI.Core.UI.MGListBox`1.TitleComponent"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.InnerBorder">
            <summary><see cref="T:MGUI.Core.UI.MGListBox`1"/>es contain 3 borders:<para/>
            1. <see cref="P:MGUI.Core.UI.MGListBox`1.OuterBorder"/>: Wrapped around the entire <see cref="T:MGUI.Core.UI.MGListBox`1"/><br/>
            2. <see cref="P:MGUI.Core.UI.MGListBox`1.InnerBorder"/>: Wrapped around the <see cref="P:MGUI.Core.UI.MGListBox`1.ItemsPanel"/>, but not the <see cref="P:MGUI.Core.UI.MGListBox`1.TitleComponent"/><br/>
            3. <see cref="P:MGUI.Core.UI.MGListBox`1.TitleBorder"/>: Wrapped around the <see cref="P:MGUI.Core.UI.MGListBox`1.TitleComponent"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.TitleBorder">
            <summary><see cref="T:MGUI.Core.UI.MGListBox`1"/>es contain 3 borders:<para/>
            1. <see cref="P:MGUI.Core.UI.MGListBox`1.OuterBorder"/>: Wrapped around the entire <see cref="T:MGUI.Core.UI.MGListBox`1"/><br/>
            2. <see cref="P:MGUI.Core.UI.MGListBox`1.InnerBorder"/>: Wrapped around the <see cref="P:MGUI.Core.UI.MGListBox`1.ItemsPanel"/>, but not the <see cref="P:MGUI.Core.UI.MGListBox`1.TitleComponent"/><br/>
            3. <see cref="P:MGUI.Core.UI.MGListBox`1.TitleBorder"/>: Wrapped around the <see cref="P:MGUI.Core.UI.MGListBox`1.TitleComponent"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.ItemsSource">
            <summary>To set this value, use <see cref="M:MGUI.Core.UI.MGListBox`1.SetItemsSource(System.Collections.Generic.ICollection{`0})"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGListBox`1.SetItemsSource(System.Collections.Generic.ICollection{`0})">
            <param name="Value"><see cref="P:MGUI.Core.UI.MGListBox`1.ItemsSource"/> will be set to a copy of this <see cref="T:System.Collections.Generic.ICollection`1"/> unless the collection is an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.<br/>
            If you want <see cref="P:MGUI.Core.UI.MGListBox`1.ItemsSource"/> to dynamically update as the collection changes, pass in an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/></param>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.CanDeselectByClickingSelectedItem">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGListBox`1.SelectionMode"/> is not <see cref="F:MGUI.Core.UI.ListBoxSelectionMode.None"/><para/>
            If true, allows deselecting a currently-selected item by left-clicking it.<para/>
            Note: If <see cref="P:MGUI.Core.UI.MGListBox`1.SelectionMode"/> is <see cref="F:MGUI.Core.UI.ListBoxSelectionMode.Multiple"/>, and the Control key is held when clicking an item,<br/>
            the user is always able to deselect regardless of this setting.<para/>
            Default value: true</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.SelectionSourceItem">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGListBox`1.SelectionMode"/> is <see cref="F:MGUI.Core.UI.ListBoxSelectionMode.Contiguous"/>.<para/>
            Represents the starting item of the contiguous selection of items.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.SelectedValue">
            <summary>Returns the <see cref="P:MGUI.Core.UI.MGListBoxItem`1.Data"/> of the first item in <see cref="P:MGUI.Core.UI.MGListBox`1.SelectedItems"/>, or default(<typeparamref name="TItemType"/>) if no items are selected.<para/>
            Setting this value overwrites the <see cref="P:MGUI.Core.UI.MGListBox`1.SelectedItems"/> with the first <see cref="T:MGUI.Core.UI.MGListBoxItem`1"/> containing the matching data.<br/>
            If no matching item is found, clears the selection entirely.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.SelectedItems">
            <summary>The currently-selected items. This collection is never null: Uses an empty list if setting to null.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGListBox`1.SelectItem(`0,System.Boolean)">
            <summary>Note: This method clears the selection if <see cref="P:MGUI.Core.UI.MGListBox`1.SelectionMode"/> is <see cref="F:MGUI.Core.UI.ListBoxSelectionMode.None"/></summary>
            <param name="Item">The item to select. Will search for a <see cref="T:MGUI.Core.UI.MGListBoxItem`1"/> whose <see cref="P:MGUI.Core.UI.MGListBoxItem`1.Data"/> matches this value.</param>
            <param name="DeselectAllIfNotFound">If true, and if no corresponding <see cref="T:MGUI.Core.UI.MGListBoxItem`1"/> is found that matches the given <paramref name="Item"/>, the selection will be cleared.</param>
        </member>
        <member name="M:MGUI.Core.UI.MGListBox`1.SetTitleAndContentBorder(MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush,System.Int32)">
            <summary>Sets the <see cref="P:MGUI.Core.UI.MGListBox`1.TitleBorderBrush"/> to the given <paramref name="Brush"/> using the given <paramref name="BorderThickness"/>, except with a bottom thickness of 0 to avoid doubled thickness between the title and content.<br/>
            Sets the <see cref="P:MGUI.Core.UI.MGListBox`1.InnerBorderBrush"/> to the given <paramref name="Brush"/> using the given <paramref name="BorderThickness"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.Header">
            <summary>Content to display inside the <see cref="P:MGUI.Core.UI.MGListBox`1.TitlePresenter"/>. Only relevant if <see cref="P:MGUI.Core.UI.MGListBox`1.IsTitleVisible"/> is true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.ItemTemplate">
            <summary>This function is invoked to instantiate the <see cref="P:MGUI.Core.UI.MGListBoxItem`1.Content"/> of each <see cref="T:MGUI.Core.UI.MGListBoxItem`1"/> in this <see cref="T:MGUI.Core.UI.MGListBox`1"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.ItemContainerStyle">
            <summary>An action that will be invoked on every <see cref="T:MGUI.Core.UI.MGBorder"/> that wraps each <see cref="T:MGUI.Core.UI.MGListBoxItem`1"/>'s content.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGListBoxItem`1.ContentPresenter"/><para/>
            Default value: <see cref="M:MGUI.Core.UI.MGListBox`1.ApplyDefaultItemContainerStyle(MGUI.Core.UI.MGBorder)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBox`1.AlternatingRowBackgrounds">
            <summary>If not null/empty, the row items will cycle through these <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> for their backgrounds</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBoxItem`1.Data">
            <summary>The data object used as a parameter to generate the content of this item.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGListBox`1.ItemTemplate"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBoxItem`1.ContentPresenter">
            <summary>The wrapper element that hosts this item's content</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListBoxItem`1.Content">
            <summary>This <see cref="T:MGUI.Core.UI.MGElement"/> is automatically generated via <see cref="P:MGUI.Core.UI.MGListBox`1.ItemTemplate"/> using this.<see cref="P:MGUI.Core.UI.MGListBoxItem`1.Data"/> as the parameter.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGListBoxItem`1.ContentPresenter"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.MGListView`1">
            <typeparam name="TItemType">The type that the ItemsSource will be bound to.</typeparam>
        </member>
        <member name="P:MGUI.Core.UI.MGListView`1.ItemsSource">
            <summary>To set this value, use <see cref="M:MGUI.Core.UI.MGListView`1.SetItemsSource(System.Collections.Generic.ICollection{`0})"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGListView`1.SetItemsSource(System.Collections.Generic.ICollection{`0})">
            <param name="Value"><see cref="P:MGUI.Core.UI.MGListView`1.ItemsSource"/> will be set to a copy of this <see cref="T:System.Collections.Generic.ICollection`1"/> unless the collection is an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.<br/>
            If you want <see cref="P:MGUI.Core.UI.MGListView`1.ItemsSource"/> to dynamically update as the collection changes, pass in an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/></param>
        </member>
        <member name="P:MGUI.Core.UI.MGListView`1.RowHeight">
            <summary>The height, in pixels, of each row in <see cref="P:MGUI.Core.UI.MGListView`1.DataGrid"/>. Does not affect the height of the header row.<para/>
            If null, row heights will be dynamically sized to their content, which may incur significant performance hit for large collections.<para/>
            Default value: null</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListView`1.HeaderGrid">
            <summary>The <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/> that contains the column headers</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListView`1.DataGrid">
            <summary>The <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/> that contains the rows of data, based on <see cref="P:MGUI.Core.UI.MGListView`1.ItemsSource"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListView`1.SelectionMode">
            <summary>Default value: <see cref="F:MGUI.Core.UI.Containers.Grids.GridSelectionMode.None"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListView`1.SelectedData">
            <summary>To get the underlying <see cref="T:MGUI.Core.UI.MGElement"/>s in the selection,<br/>
            enumerate <see cref="T:MGUI.Core.UI.Containers.Grids.GridSelection"/>, and for each <see cref="T:MGUI.Core.UI.Containers.Grids.GridCell"/>, call <see cref="P:MGUI.Core.UI.Containers.Grids.GridSelection.Grid"/>'s <see cref="M:MGUI.Core.UI.Containers.Grids.MGGrid.GetCellContent(MGUI.Core.UI.Containers.Grids.GridCell)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.ListViewColumnWidth.WidthPixels">
            <summary>Getter is only valid if <see cref="P:MGUI.Core.UI.ListViewColumnWidth.IsAbsoluteWidth"/> is true</summary>
        </member>
        <member name="P:MGUI.Core.UI.ListViewColumnWidth.WidthWeight">
            <summary>Getter is only valid if <see cref="P:MGUI.Core.UI.ListViewColumnWidth.IsWeightedWidth"/> is true</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListViewItem`1.Data">
            <summary>The data object used as a parameter to generate the content of each cell in the <see cref="P:MGUI.Core.UI.MGListViewItem`1.DataRow"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGListViewColumn`1.CellTemplate"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListViewColumn`1.Header">
            <summary>The content to display in the header row of the list view.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGListViewColumn`1.CellTemplate">
            <summary>This function is invoked to instantiate the content of each cell in this column</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGPasswordBox.PasswordCharacter">
            <summary>The character to display for each character in the text. Default value: <b>*</b><para/>
            Recommended to use a character that belongs to a common character set, to avoid issues where the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/> cannot render the character.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGPasswordBox.Password">
            <summary>Decodes the <see cref="T:System.Security.SecureString"/> holding this <see cref="T:MGUI.Core.UI.MGPasswordBox"/>'s Password into a plain-text string and returns the result.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGPasswordBox.AcceptsReturn">
            <summary>This feature is intentionally disabled for <see cref="T:MGUI.Core.UI.MGPasswordBox"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGPasswordBox.AcceptsTab">
            <summary>This feature is intentionally disabled for <see cref="T:MGUI.Core.UI.MGPasswordBox"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.ValueComponent">
            <summary>Provides direct access to the textblock component that displays the current value if <see cref="P:MGUI.Core.UI.MGProgressBar.ShowValue"/> is true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.ShowValue">
            <summary>True if the current value should be displayed.<para/>
            The value is rendered to the 'end' edge of the bar, which depends on <see cref="P:MGUI.Core.UI.MGProgressBar.Orientation"/> and <see cref="P:MGUI.Core.UI.MGProgressBar.IsReversed"/>.<br/>
            If <see cref="P:MGUI.Core.UI.MGProgressBar.Orientation"/> is <see cref="F:MGUI.Core.UI.Orientation.Horizontal"/>, and <see cref="P:MGUI.Core.UI.MGProgressBar.IsReversed"/> is false, the value is drawn to the right edge of this <see cref="T:MGUI.Core.UI.MGElement"/>'s bounds.<para/>
            Default value: false<para/>
            See also: <see cref="P:MGUI.Core.UI.MGProgressBar.ValueDisplayFormat"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.ValueDisplayFormat">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGProgressBar.ShowValue"/> is true.<para/>
            A format string to use when computing the text to display.<para/>
            "{{Minimum}}", "{{Maximum}}", "{{Value}}", and "{{ValuePercent}}" will be replaced with their actual underlying values when formatting the string.<br/>
            "{{Value-Minimum}}" will be replaced with the mathematical result of: <see cref="P:MGUI.Core.UI.MGProgressBar.Value"/> - <see cref="P:MGUI.Core.UI.MGProgressBar.Minimum"/><br/>
            "{{Maximum-Minimum}}" will be replaced with the mathematical result of: <see cref="P:MGUI.Core.UI.MGProgressBar.Maximum"/> - <see cref="P:MGUI.Core.UI.MGProgressBar.Minimum"/><para/>
            Default value: <see cref="F:MGUI.Core.UI.MGProgressBar.RecommendedPercentageValueDisplayFormat"/><para/>
            This value supports some basic text markdown, such as "[b]" for bold text, "[fg=Red]" to set the text foreground color to a given value, "[opacity=0.5]" etc.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGProgressBar.ShowValue"/>, <see cref="P:MGUI.Core.UI.MGProgressBar.Minimum"/>, <see cref="P:MGUI.Core.UI.MGProgressBar.Maximum"/>, <see cref="P:MGUI.Core.UI.MGProgressBar.Value"/>, <see cref="P:MGUI.Core.UI.MGProgressBar.ValuePercent"/>,<br/>
            <see cref="F:MGUI.Core.UI.MGProgressBar.RecommendedPercentageValueDisplayFormat"/>, <see cref="F:MGUI.Core.UI.MGProgressBar.RecommendedExactValueDisplayFormat"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.NumberFormat">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGProgressBar.ShowValue"/> is true.<para/>
            Determines how numeric values are formatted when computing the displayed value.<para/>
            Default value: "0.0"<para/>
            See also: <see href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.ValuePercent">
            <summary>Completed percent, between 0.0 and 100.0</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.Size">
            <summary>For a horizontal progress bar, this represents the requested Height.<br/>
            For a vertical progress bar, this represents the requested Width.<para/>
            If <see cref="P:MGUI.Core.UI.MGProgressBar.ShowValue"/> is true, <see cref="P:MGUI.Core.UI.MGProgressBar.Size"/> should be large enough to fully display the <see cref="P:MGUI.Core.UI.MGProgressBar.ValueElement"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.CompletedBrush">
            <summary>The brush to use for the completed portion of this <see cref="T:MGUI.Core.UI.MGProgressBar"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.IncompleteBrush">
            <summary>The brush to use for the incomplete portion of this <see cref="T:MGUI.Core.UI.MGProgressBar"/>. Can be null. This brush is rendered overtop of <see cref="P:MGUI.Core.UI.MGElement.BackgroundBrush"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.Orientation">
            <summary>If <see cref="F:MGUI.Core.UI.Orientation.Horizontal"/>, the bar grows from left to right.<br/>
            If <see cref="F:MGUI.Core.UI.Orientation.Vertical"/>, the bar grows from bottom to top.<para/>
            Default value: <see cref="F:MGUI.Core.UI.Orientation.Horizontal"/><para/>
            See also: <see cref="P:MGUI.Core.UI.MGProgressBar.IsReversed"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGProgressBar.IsReversed">
            <summary>If true, the bar will flow in the opposite direction.<para/>
            If <see cref="P:MGUI.Core.UI.MGProgressBar.Orientation"/> is <see cref="F:MGUI.Core.UI.Orientation.Horizontal"/>, progress bar starts on the right, and completes on the left.<br/>
            If <see cref="P:MGUI.Core.UI.MGProgressBar.Orientation"/> is <see cref="F:MGUI.Core.UI.Orientation.Vertical"/>, progress bar starts on the top, and completes on the bottom.<para/>
            This value also reverses the placement of the current value, if <see cref="P:MGUI.Core.UI.MGProgressBar.ShowValue"/> is true.<para/>
            Default value: false</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGProgressBar.#ctor(MGUI.Core.UI.MGWindow,System.Single,System.Single,System.Single,System.Int32,System.Boolean,MGUI.Core.UI.Orientation)">
            <param name="Value">The current value. This should be in the inclusive range [<paramref name="Minimum"/>, <paramref name="Maximum"/>]</param>
            <param name="Size">The size, in pixels, of the bar. If the orientation is <see cref="F:MGUI.Core.UI.Orientation.Horizontal"/>, this represents the height of the bar.</param>
            <param name="ShowValue">If true, the current value will be displayed as a piece of text on the inside of the end of the bar.</param>
        </member>
        <member name="T:MGUI.Core.UI.MGRadioButtonGroup">
            <summary>This class handles mutual exclusion between the <see cref="P:MGUI.Core.UI.MGRadioButton.IsChecked"/> property of multiple <see cref="T:MGUI.Core.UI.MGRadioButton"/>s belonging to the same <see cref="T:MGUI.Core.UI.MGRadioButtonGroup"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRadioButtonGroup.AllowUnchecking">
            <summary>If true, the <see cref="P:MGUI.Core.UI.MGRadioButtonGroup.CheckedItem"/> can be unchecked by clicking it again.<br/>
            Only relevant if <see cref="P:MGUI.Core.UI.MGRadioButtonGroup.AllowNullCheckedItem"/>=true.<para/>
            Default value: false<para/>See also: <see cref="P:MGUI.Core.UI.MGRadioButtonGroup.ActualAllowUnchecking"/>, <see cref="P:MGUI.Core.UI.MGRadioButtonGroup.AllowNullCheckedItem"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRadioButtonGroup.AllowNullCheckedItem">
            <summary>If true, <see cref="P:MGUI.Core.UI.MGRadioButtonGroup.CheckedItem"/> can be set to null.<para/>
            Default value: false</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGRadioButtonGroup.CheckedItemChanged">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGRadioButtonGroup.CheckedItem"/> is set to a new value.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRadioButton.ButtonComponent">
            <summary>Provides direct access to the button component that appears to the left of this radiobutton's content.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRadioButton.ButtonElement">
            <summary>The checkable button portion of this <see cref="T:MGUI.Core.UI.MGRadioButton"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGRadioButton.DefaultBubbleSize">
            <summary>The default width/height of the checkable part of an <see cref="T:MGUI.Core.UI.MGRadioButton"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGRadioButton.DefaultBubbleSpacingWidth">
            <summary>The default empty width between the checkable part of an <see cref="T:MGUI.Core.UI.MGRadioButton"/> and its <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRadioButton.BubbleComponentSize">
            <summary>The dimensions of the checkable part of this <see cref="T:MGUI.Core.UI.MGRadioButton"/>.<para/>
            See also: <see cref="F:MGUI.Core.UI.MGRadioButton.DefaultBubbleSize"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRadioButton.BubbleComponentBorderColor">
            <summary>The <see cref="T:Microsoft.Xna.Framework.Color"/> to use when drawing the Border of the checkable part.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRadioButton.BubbleComponentBorderThickness">
            <summary>The thickness to use for the checkable part's border.<br/>
            This value cannot exceed <see cref="P:MGUI.Core.UI.MGRadioButton.BubbleComponentSize"/>/2.0<para/>
            Recommended value: 1 or 2</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRadioButton.BubbleComponentBackground">
            <summary>The background to use when drawing the checkable part.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRadioButton.BubbleCheckedColor">
            <summary>The <see cref="T:Microsoft.Xna.Framework.Color"/> to use when filling in the checkable bubble part when <see cref="P:MGUI.Core.UI.MGRadioButton.IsChecked"/> is true.<para/>
            Default value: <see cref="P:MGUI.Core.UI.MGTheme.RadioButtonCheckedFillColor"/><para/>
            See also:<br/><see cref="P:MGUI.Core.UI.MGWindow.Theme"/><br/><see cref="P:MGUI.Core.UI.MGDesktop.Theme"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRadioButton.SpacingWidth">
            <summary>The reserved empty width between the checkable part of this <see cref="T:MGUI.Core.UI.MGRadioButton"/> and its <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/>.<para/>
            See also: <see cref="F:MGUI.Core.UI.MGRadioButton.DefaultBubbleSpacingWidth"/>.<para/>
            This value is functionally equivalent to <see cref="P:MGUI.Core.UI.MGRadioButton.ButtonElement"/>'s right <see cref="P:MGUI.Core.UI.MGElement.Margin"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGRadioButton.OnCheckStateChanged">
            <summary>Note: This event is invoked before <see cref="E:MGUI.Core.UI.MGRadioButton.OnChecked"/> / <see cref="E:MGUI.Core.UI.MGRadioButton.OnUnchecked"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGRadioButton.CircleDetailLevel">
            <summary>The number of sides to use when approximating a circle as a polygon.<para/>
            Recommended value: 32</summary>
        </member>
        <member name="T:MGUI.Core.UI.MGRatingControl">
            <summary>Similar to a <see cref="T:MGUI.Core.UI.MGSlider"/>, except this uses shapes instead of a continuous number line and thumb. 
            And this element always starts counting from zero instead of having a <see cref="P:MGUI.Core.UI.MGSlider.Minimum"/> equivalent.<para/>
            Sample usage: Displaying a mission's difficulty, or allowing users to rate other user-generated content such as custom maps</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.ItemSize">
            <summary>The dimensions, in pixels, of each item in this <see cref="T:MGUI.Core.UI.MGRatingControl"/>.<para/>
            Default value: 16<br/>
            Recommended value: 16-96</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.Spacing">
            <summary>The spacing, in pixels, between each consecutive item.<para/>
            Default value: 3</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.Minimum">
            <summary>The inclusive minimum that <see cref="P:MGUI.Core.UI.MGRatingControl.Value"/> can be set to.<para/>
            To set this value, use <see cref="M:MGUI.Core.UI.MGRatingControl.SetRange(System.Single,System.Single)"/><para/>
            Default value: 0<br/>
            Recommended value: 0, 0.5f, or 1.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.Maximum">
            <summary>The inclusive maximum that <see cref="P:MGUI.Core.UI.MGRatingControl.Value"/> can be set to.<para/>
            To set this value, use <see cref="M:MGUI.Core.UI.MGRatingControl.SetRange(System.Single,System.Single)"/><para/>
            Default value: 5<br/>
            Recommended value: 5 or 10<br/>
            Max value: 100</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.Interval">
            <summary>Convenience property that simply returns: <see cref="P:MGUI.Core.UI.MGRatingControl.Maximum"/> - <see cref="P:MGUI.Core.UI.MGRatingControl.Minimum"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.Value">
            <summary>The current value that this <see cref="T:MGUI.Core.UI.MGRatingControl"/> is set to.<para/>
            To set this value, use <see cref="M:MGUI.Core.UI.MGRatingControl.SetValue(System.Single)"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGRatingControl.SetValue(System.Single)">
            <summary>See also: <see cref="M:MGUI.Core.UI.MGRatingControl.GetActualValue(System.Single)"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGRatingControl.GetActualValue(System.Single)">
            <summary>Returns a valid value for <see cref="P:MGUI.Core.UI.MGRatingControl.Value"/>.<para/>
            The given <paramref name="DesiredValue"/> will be clamped to the range [<see cref="P:MGUI.Core.UI.MGRatingControl.Minimum"/>, <see cref="P:MGUI.Core.UI.MGRatingControl.Maximum"/>],<br/>
            and set to a valid multiple of <see cref="P:MGUI.Core.UI.MGRatingControl.DiscreteValueInterval"/> if <see cref="P:MGUI.Core.UI.MGRatingControl.UseDiscreteValues"/>==true</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.UseDiscreteValues">
            <summary>If true, <see cref="P:MGUI.Core.UI.MGRatingControl.Value"/> will snap to the nearest multiple of the given <see cref="P:MGUI.Core.UI.MGRatingControl.DiscreteValueInterval"/>.<para/>
            If false, <see cref="P:MGUI.Core.UI.MGRatingControl.Value"/> is continuous and can be any numeric value in the inclusive range [<see cref="P:MGUI.Core.UI.MGRatingControl.Minimum"/>,<see cref="P:MGUI.Core.UI.MGRatingControl.Maximum"/>].</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.DiscreteValueInterval">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGRatingControl.UseDiscreteValues"/> is true. Represents the interval that <see cref="P:MGUI.Core.UI.MGRatingControl.Value"/> will snap to.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.PreviewShapeFillColor">
            <summary>The fill color to use when drawing <see cref="P:MGUI.Core.UI.MGRatingControl.PreviewValue"/>, if there is one.<para/>
            Recommended to use a transparent <see cref="T:Microsoft.Xna.Framework.Color"/> so that <see cref="P:MGUI.Core.UI.MGRatingControl.UnfilledShapeFillColor"/> and/or <see cref="P:MGUI.Core.UI.MGRatingControl.FilledShapeFillColor"/> will still be partially visible underneath.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.PreviewValue">
            <summary>The value that the user's mouse cursor is hovering over, or null if not hovered (or if <see cref="P:MGUI.Core.UI.MGRatingControl.IsReadonly"/> is true)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRatingControl.IsReadonly">
            <summary>If true, the user will be unable to modify <see cref="P:MGUI.Core.UI.MGRatingControl.Value"/> via clicking or clicking+dragging within this <see cref="T:MGUI.Core.UI.MGRatingControl"/>'s bounds.<para/>
            Default value: false</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRectangle.Stroke">
            <summary>The <see cref="T:Microsoft.Xna.Framework.Color"/> to use for the border of this <see cref="T:MGUI.Core.UI.MGRectangle"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGRectangle.StrokeThickness"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRectangle.StrokeThickness">
            <summary>The uniform thickness of each side of this <see cref="T:MGUI.Core.UI.MGRectangle"/>'s border.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGRectangle.Stroke"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGRectangle.Fill">
            <summary>The brush to use to fill the space occupied by this <see cref="T:MGUI.Core.UI.MGRectangle"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGRectangle.Width"/>, <see cref="P:MGUI.Core.UI.MGRectangle.Height"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.MGResizeGrip">
            <summary>Can be attached to another <see cref="T:MGUI.Core.UI.MGElement"/> to allow resizing via dragging the mouse.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGResizeGrip.Foreground">
            <summary>The primary color to draw the resizer dots with.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGResizeGrip.Size">
            <summary>Determines how much width and height this element takes up. This value is derived from <see cref="P:MGUI.Core.UI.MGResizeGrip.MaxDots"/>, <see cref="P:MGUI.Core.UI.MGResizeGrip.Spacing"/>, and <see cref="P:MGUI.Core.UI.MGElement.Margin"/>.<br/>
            Formula: 1 + (<see cref="P:MGUI.Core.UI.MGResizeGrip.MaxDots"/> - 1) * <see cref="P:MGUI.Core.UI.MGResizeGrip.Spacing"/> + <see cref="P:MGUI.Core.UI.MGElement.Margin"/>.Right</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGResizeGrip.MaxDots">
            <summary>Determines how many dots to attempt to display for this <see cref="T:MGUI.Core.UI.MGResizeGrip"/>'s graphics.<para/>
            If this resizer allows resizing in either dimension, <see cref="P:MGUI.Core.UI.MGResizeGrip.MaxDots"/> determines how many dots will be drawn on either the bottom or right edge of this element.<para/>
            Default value: 4. Recommended value: 3-6</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGResizeGrip.Spacing">
            <summary>The amount of pixels between each dot of this <see cref="T:MGUI.Core.UI.MGResizeGrip"/>'s graphics.<para/>
            Default value: 3. Recommended value: 3-4</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGResizeGrip.Host">
            <summary>To set this value, use <see cref="M:MGUI.Core.UI.MGResizeGrip.TrySetHost(MGUI.Core.UI.MGElement)"/>. This value cannot be modified if <see cref="P:MGUI.Core.UI.MGElement.IsComponent"/> is true.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGResizeGrip.ActualHost"/>, which accounts for <see cref="P:MGUI.Core.UI.MGElement.IsComponent"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGResizeGrip.TrySetHost(MGUI.Core.UI.MGElement)">
            <returns>True if <see cref="P:MGUI.Core.UI.MGResizeGrip.Host"/> was set to the new value. False if unable to change the value, or if the new value was the same as the current value.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGResizeGrip.#ctor(MGUI.Core.UI.MGWindow,MGUI.Core.UI.MGElement)">
            <summary>Creates a <see cref="T:MGUI.Core.UI.MGResizeGrip"/> that will be attached to the given <paramref name="HostElement"/></summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="HostElement"/> is null</exception>
        </member>
        <member name="M:MGUI.Core.UI.MGResizeGrip.#ctor(MGUI.Core.UI.MGWindow)">
            <summary>Creates a <see cref="T:MGUI.Core.UI.MGResizeGrip"/> which is a component of its parent element.</summary>
        </member>
        <member name="T:MGUI.Core.UI.MGResources">
            <summary>Stores various resources in Dictionary Key-Value pairs so that they can be accessed by their string keys.<para/>
            For example: the name of the command that an <see cref="T:MGUI.Core.UI.MGButton"/> executes when clicked, the name of a <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> that an <see cref="T:MGUI.Core.UI.MGImage"/> draws,
            or the name of an object in <see cref="P:MGUI.Core.UI.MGResources.StaticResources"/> for databinding purposes.<para/>
            This instance is usually accessed via <see cref="P:MGUI.Core.UI.MGDesktop.Resources"/> (See also: <see cref="M:MGUI.Core.UI.MGElement.GetResources"/>)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGResources.Commands">
            <summary>This dictionary is commonly used by <see cref="P:MGUI.Core.UI.MGButton.CommandName"/> or by <see cref="T:MGUI.Core.UI.MGTextBlock"/> to reference delegates by a string key value.<para/>
            See also:<br/><see cref="M:MGUI.Core.UI.MGResources.AddCommand(System.String,System.Action{MGUI.Core.UI.MGElement})"/><br/><see cref="M:MGUI.Core.UI.MGResources.RemoveComand(System.String)"/><para/>
            EX: If you create an <see cref="T:MGUI.Core.UI.MGTextBlock"/> and set its text to:
            <code>[Command=ABC]This text invokes a delegate when clicked[/Command] but this text doesn't</code>
            then the <see cref="T:System.Action`1"/> with the name "ABC" will be invoked when clicking the substring "This text invokes a delegate when clicked"</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGResources.AddCommand(System.String,System.Action{MGUI.Core.UI.MGElement})">
            <param name="Name">Must be unique. If the command is intended to be window-specific, 
            you may wish to prefix the command name with the <see cref="T:MGUI.Core.UI.MGWindow"/>'s <see cref="P:MGUI.Core.UI.MGElement.UniqueId"/> to ensure uniqueness.</param>
        </member>
        <member name="E:MGUI.Core.UI.MGResources.OnCommandAdded">
            <summary>Invoked when a new value is added to <see cref="P:MGUI.Core.UI.MGResources.Commands"/> via <see cref="M:MGUI.Core.UI.MGResources.AddCommand(System.String,System.Action{MGUI.Core.UI.MGElement})"/><para/>
            See also: <see cref="E:MGUI.Core.UI.MGResources.OnCommandRemoved"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGResources.OnCommandRemoved">
            <summary>Invoked when a value is removed from <see cref="P:MGUI.Core.UI.MGResources.Commands"/> via <see cref="M:MGUI.Core.UI.MGResources.RemoveComand(System.String)"/><para/>
            See also: <see cref="E:MGUI.Core.UI.MGResources.OnCommandAdded"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGResources.GetThemeOrDefault(System.String,MGUI.Core.UI.MGTheme,System.Boolean)">
            <param name="DefaultValue">The default theme to return if there is no theme with the given <paramref name="Name"/>. Uses <see cref="P:MGUI.Core.UI.MGResources.DefaultTheme"/> if null.</param>
            <param name="WarnIfNotFound">If a <paramref name="Name"/> is specified but no corresponding theme is found, a warning will be written via <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)"/></param>
        </member>
        <member name="P:MGUI.Core.UI.MGResources.DefaultTheme">
            <summary>The <see cref="T:MGUI.Core.UI.MGTheme"/> to assign to an <see cref="T:MGUI.Core.UI.MGWindow"/> after parsing a XAML string (unless the window explicitly specifies a different theme).<para/>
            Note: Changing this value will not dynamically update the theme of any windows that have already been parsed. This value is only applied once on each window, when the XAML is parsed.<br/>
            So if you do change this value, you may want to re-parse your XAML content to initialize a new window.<para/>
            See also: <see cref="M:MGUI.Core.UI.XAML.XAMLParser.LoadRootWindow(MGUI.Core.UI.MGDesktop,System.String,System.Boolean,System.Boolean)"/><para/>
            This value cannot be null.</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGScrollViewer.VerticalScrollInterval">
            <summary>Represents how much <see cref="P:MGUI.Core.UI.MGScrollViewer.VerticalOffset"/> will be changed when using the mouse scroll wheel.<para/>
            Recommended value: Anywhere from 20 to 80 (Scrolling on reddit.com seems to scroll by about 84px? Might be percentage-based)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.VerticalScrollBarVisibility">
            <summary>This property is the same as <see cref="P:MGUI.Core.UI.MGScrollViewer.VSBVisibility"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.HorizontalScrollBarVisibility">
            <summary>This property is the same as <see cref="P:MGUI.Core.UI.MGScrollViewer.HSBVisibility"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.ContentViewport">
            <summary>The bounds that this <see cref="T:MGUI.Core.UI.MGScrollViewer"/>'s Content can draw itself to, 
            after accounting for <see cref="P:MGUI.Core.UI.MGElement.Padding"/> and the width/height that the scrollbars reserved, if any.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.PaddedVSBBounds">
            <summary>The screen bounds that the vertical scrollbar will be rendered to, after applying the <see cref="F:MGUI.Core.UI.MGScrollViewer.ScrollBarPadding"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.PaddedHSBBounds">
            <summary>The screen bounds that the horizontal scrollbar will be rendered to, after applying the <see cref="F:MGUI.Core.UI.MGScrollViewer.ScrollBarPadding"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGScrollViewer.OffsetChanged">
            <summary>Invoked when either <see cref="P:MGUI.Core.UI.MGScrollViewer.HorizontalOffset"/> or <see cref="P:MGUI.Core.UI.MGScrollViewer.VerticalOffset"/> changes.<para/>
            See also: <see cref="E:MGUI.Core.UI.MGScrollViewer.HorizontalOffsetChanged"/>, <see cref="E:MGUI.Core.UI.MGScrollViewer.VerticalOffsetChanged"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.VerticalOffset">
            <summary>See also: <see cref="P:MGUI.Core.UI.MGScrollViewer.MaxVerticalOffset"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.MaxVerticalOffset">
            <summary>The maximum value that <see cref="P:MGUI.Core.UI.MGScrollViewer.VerticalOffset"/> can be set to.<br/>
            Setting <see cref="P:MGUI.Core.UI.MGScrollViewer.VerticalOffset"/> to this value will scroll to the bottom of the scrollable content.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGScrollViewer.QueueScrollToBottom">
            <summary>Attempts to immediately invoke <see cref="M:MGUI.Core.UI.MGScrollViewer.ScrollToBottom"/> if <see cref="P:MGUI.Core.UI.MGElement.IsLayoutValid"/> is true.<br/>
            Else queues an action that will invoke <see cref="M:MGUI.Core.UI.MGScrollViewer.ScrollToBottom"/> the next time the <see cref="P:MGUI.Core.UI.MGScrollViewer.MaxVerticalOffset"/> value changes.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.HorizontalOffset">
            <summary>See also: <see cref="P:MGUI.Core.UI.MGScrollViewer.MaxHorizontalOffset"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.MaxHorizontalOffset">
            <summary>The maximum value that <see cref="P:MGUI.Core.UI.MGScrollViewer.HorizontalOffset"/> can be set to.<br/>
            Setting <see cref="P:MGUI.Core.UI.MGScrollViewer.HorizontalOffset"/> to this value will scroll to the right-most of the scrollable content.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.ClipToBounds">
            <summary>Must always be true for <see cref="T:MGUI.Core.UI.MGScrollViewer"/> to avoid content that is out of the <see cref="P:MGUI.Core.UI.MGScrollViewer.ContentViewport"/>'s bounds from being visible.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.ScrollBarOuterBrush">
            <summary>The brush to use for the outer portion of the scrollbars.<br/>
            Default value: <see cref="P:MGUI.Core.UI.MGTheme.ScrollBarOuterBrush"/><para/>
            See also:<br/><see cref="P:MGUI.Core.UI.MGWindow.Theme"/><br/><see cref="P:MGUI.Core.UI.MGDesktop.Theme"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGScrollViewer.ScrollBarInnerBrush">
            <summary>The brush to use for the inner portion of the scrollbars.<br/>
            Default value: <see cref="P:MGUI.Core.UI.MGTheme.ScrollBarInnerBrush"/><para/>
            See also:<br/><see cref="P:MGUI.Core.UI.MGWindow.Theme"/><br/><see cref="P:MGUI.Core.UI.MGDesktop.Theme"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGSeparator.#ctor(MGUI.Core.UI.MGWindow,MGUI.Core.UI.Orientation,System.Int32)">
            <param name="Size">For a vertical separator, this represents the width. For a horizontal separator, this represents the height.</param>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.Minimum">
            <summary>The inclusive minimum that <see cref="P:MGUI.Core.UI.MGSlider.Value"/> can be set to.<para/>
            To set this value, use <see cref="M:MGUI.Core.UI.MGSlider.SetRange(System.Single,System.Single)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.Maximum">
            <summary>The inclusive maximum that <see cref="P:MGUI.Core.UI.MGSlider.Value"/> can be set to.<para/>
            To set this value, use <see cref="M:MGUI.Core.UI.MGSlider.SetRange(System.Single,System.Single)"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGSlider.IntervalChanged">
            <summary>Invoked when either <see cref="P:MGUI.Core.UI.MGSlider.Minimum"/> or <see cref="P:MGUI.Core.UI.MGSlider.Maximum"/> changes.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.Interval">
            <summary>Convenience property that simply returns: <see cref="P:MGUI.Core.UI.MGSlider.Maximum"/> - <see cref="P:MGUI.Core.UI.MGSlider.Minimum"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.Value">
            <summary>The current value that this <see cref="T:MGUI.Core.UI.MGSlider"/> is set to.<para/>
            To set this value, use <see cref="M:MGUI.Core.UI.MGSlider.SetValue(System.Single)"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGSlider.SetValue(System.Single)">
            <summary>See also: <see cref="M:MGUI.Core.UI.MGSlider.GetActualValue(System.Single)"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGSlider.GetActualValue(System.Single)">
            <summary>Returns a valid value for <see cref="P:MGUI.Core.UI.MGSlider.Value"/>.<para/>
            The given <paramref name="DesiredValue"/> will be clamped to the range [<see cref="P:MGUI.Core.UI.MGSlider.Minimum"/>, <see cref="P:MGUI.Core.UI.MGSlider.Maximum"/>],<br/>
            and set to a valid multiple of <see cref="P:MGUI.Core.UI.MGSlider.DiscreteValueInterval"/> if <see cref="P:MGUI.Core.UI.MGSlider.UseDiscreteValues"/>==true</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.UseDiscreteValues">
            <summary>If true, <see cref="P:MGUI.Core.UI.MGSlider.Value"/> will snap to the nearest multiple of the given <see cref="P:MGUI.Core.UI.MGSlider.DiscreteValueInterval"/>.<para/>
            If false, <see cref="P:MGUI.Core.UI.MGSlider.Value"/> is continuous and can be any numeric value in the inclusive range [<see cref="P:MGUI.Core.UI.MGSlider.Minimum"/>,<see cref="P:MGUI.Core.UI.MGSlider.Maximum"/>].</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.DiscreteValueInterval">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGSlider.UseDiscreteValues"/> is true. Represents the interval that <see cref="P:MGUI.Core.UI.MGSlider.Value"/> will snap to.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.NumberLineSize">
            <summary>If <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>==<see cref="F:MGUI.Core.UI.Orientation.Horizontal"/>, this represents the height of the number line. Else it is the width.</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGSlider.DefaultTickPrimarySize">
            <summary>The default size of the tick marks along the direction that the slider is oriented.<br/>
            (Represents the Width if <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>==<see cref="F:MGUI.Core.UI.Orientation.Horizontal"/>. Else represents the Height)</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGSlider.DefaultTickSecondarySize">
            <summary>The default size of the tick marks along the opposite direction that the slider is oriented.<br/>
            (Represents the Height if <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>==<see cref="F:MGUI.Core.UI.Orientation.Vertical"/>. Else represents the Width)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.DrawTicks">
            <summary>True if tick marks should be drawn at the given <see cref="P:MGUI.Core.UI.MGSlider.TickFrequency"/> interval along the number line.<para/>
            Only relevant if <see cref="P:MGUI.Core.UI.MGSlider.TickFrequency"/> is specified.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGSlider.CanDrawTickMarks"/>, <see cref="P:MGUI.Core.UI.MGSlider.TickWidth"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.TickWidth">
            <summary>The width of each tick mark. Only relevant if <see cref="P:MGUI.Core.UI.MGSlider.DrawTicks"/>==true.<para/>
            If null, uses <see cref="F:MGUI.Core.UI.MGSlider.DefaultTickPrimarySize"/> or <see cref="F:MGUI.Core.UI.MGSlider.DefaultTickSecondarySize"/>, depending on <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGSlider.ActualTickWidth"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.TickHeight">
            <summary>The height of each tick mark. Only relevant if <see cref="P:MGUI.Core.UI.MGSlider.DrawTicks"/>==true.<para/>
            If null, uses <see cref="F:MGUI.Core.UI.MGSlider.DefaultTickPrimarySize"/> or <see cref="F:MGUI.Core.UI.MGSlider.DefaultTickSecondarySize"/>, depending on <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGSlider.ActualTickHeight"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.MGSlider.DefaultThumbPrimarySize">
            <summary>The default size of the thumb along the direction that the slider is oriented.<br/>
            (Represents the Width if <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>==<see cref="F:MGUI.Core.UI.Orientation.Horizontal"/>. Else represents the Height)</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGSlider.DefaultThumbSecondarySize">
            <summary>The default size of the thumb along the opposite direction that the slider is oriented.<br/>
            (Represents the Height if <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>==<see cref="F:MGUI.Core.UI.Orientation.Vertical"/>. Else represents the Width)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.ThumbWidth">
            <summary>The width of the thumb.<para/>
            If null, uses <see cref="F:MGUI.Core.UI.MGSlider.DefaultThumbPrimarySize"/> or <see cref="F:MGUI.Core.UI.MGSlider.DefaultThumbPrimarySize"/>, depending on <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGSlider.ActualThumbWidth"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.ThumbHeight">
            <summary>The height of the thumb.<para/>
            If null, uses <see cref="F:MGUI.Core.UI.MGSlider.DefaultThumbPrimarySize"/> or <see cref="F:MGUI.Core.UI.MGSlider.DefaultThumbPrimarySize"/>, depending on <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGSlider.ActualThumbHeight"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.FocusBrush">
            <summary>A brush that is rendered overtop of this <see cref="T:MGUI.Core.UI.MGSlider"/> while hovering, dragging, or pressing it.<br/>
            Only the <see cref="P:MGUI.Core.UI.VisualStateBrush`1.FocusedColor"/>, <see cref="P:MGUI.Core.UI.VisualStateBrush`1.PressedModifierType"/>, and <see cref="P:MGUI.Core.UI.VisualStateBrush`1.PressedModifier"/> are used.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.Foreground">
            <summary>The fallback <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> for drawing the number line, ticks, or the thumb if they don't have an explicit <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> specified.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGSlider.NumberLineFillBrush"/>, <see cref="P:MGUI.Core.UI.MGSlider.TickFillBrush"/>, <see cref="P:MGUI.Core.UI.MGSlider.ThumbFillBrush"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSlider.AcceptsMouseScrollWheel">
            <summary>If true, the slider value can be modified by using the mouse scroll wheel while hovering the number line portion.<para/>
            Default value: false</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGSlider.RecentNumberLineBounds">
            <summary>The most-recently rendered bounds of the number line, before accounting for any offset (DrawSelf.Offset)</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGSlider.RecentStretchedNumberLineBounds">
            <summary>Same as <see cref="F:MGUI.Core.UI.MGSlider.RecentNumberLineBounds"/>, except it is:<para/>
            - stretched vertically to fill the <see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/> if <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>==<see cref="F:MGUI.Core.UI.Orientation.Horizontal"/><br/>
            - stretched horizontally to fill the <see cref="P:MGUI.Core.UI.MGElement.LayoutBounds"/> if <see cref="P:MGUI.Core.UI.MGSlider.Orientation"/>==<see cref="F:MGUI.Core.UI.Orientation.Vertical"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.MGSpacer">
            <summary>A lightweight control with no graphics whose primary purpose is to consume a defined amount of screen space</summary>
        </member>
        <member name="T:MGUI.Core.UI.MGSpoiler">
            <summary>A simple wrapper class that allows hiding this <see cref="T:MGUI.Core.UI.MGElement"/>'s <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/> until user clicks it to reveal the contents.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSpoiler.ButtonComponent">
            <summary>Provides direct access to the button component that is drawn overtop of this spoiler's content when  <see cref="P:MGUI.Core.UI.MGSpoiler.IsRevealed"/> is false.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSpoiler.UnspoiledBackgroundBrush">
            <summary>A background to use when this <see cref="T:MGUI.Core.UI.MGSpoiler"/> is not revealed.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSpoiler.TextElement">
            <summary>The content of the <see cref="P:MGUI.Core.UI.MGSpoiler.ButtonElement"/>. This <see cref="T:MGUI.Core.UI.MGTextBlock"/> is used to render the <see cref="P:MGUI.Core.UI.MGSpoiler.UnspoiledText"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSpoiler.UnspoiledText">
            <summary>The text to display overtop of this <see cref="T:MGUI.Core.UI.MGSpoiler"/> if it is not revealed. Can be null.<br/>
            If not null, this text will be displayed in the center of this <see cref="T:MGUI.Core.UI.MGSpoiler"/> (HorizontalAlignment=<see cref="F:MGUI.Core.UI.HorizontalAlignment.Center"/>, VerticalAlignment=<see cref="F:MGUI.Core.UI.VerticalAlignment.Center"/>)<para/>
            Default value: <see cref="F:MGUI.Core.UI.MGSpoiler.DefaultUnspoiledText"/><para/>
            This value supports some basic text markdown, such as "[b]" for bold text, "[fg=Red]" to set the text foreground color to a given value, "[opacity=0.5]" etc.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGSpoiler.IsRevealed">
            <summary>If false, the <see cref="P:MGUI.Core.UI.Containers.MGSingleContentHost.Content"/> will not be visible.<br/>
            Instead, <see cref="P:MGUI.Core.UI.MGSpoiler.UnspoiledBorderBrush"/>, <see cref="P:MGUI.Core.UI.MGSpoiler.UnspoiledBorderThickness"/>, <see cref="P:MGUI.Core.UI.MGSpoiler.UnspoiledBackgroundBrush"/>, and <see cref="P:MGUI.Core.UI.MGSpoiler.UnspoiledText"/> will be visible.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGSpoiler.OnIsRevealedChanging">
            <summary>Invoked just before <see cref="P:MGUI.Core.UI.MGSpoiler.IsRevealed"/>'s value changes. Allows cancellation.<para/>
            See also: <see cref="E:MGUI.Core.UI.MGSpoiler.OnRevealed"/>, <see cref="E:MGUI.Core.UI.MGSpoiler.OnHidden"/>, <see cref="E:MGUI.Core.UI.MGSpoiler.OnIsRevealedChanged"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGSpoiler.OnRevealed">
            <summary>Invoked immediately after <see cref="P:MGUI.Core.UI.MGSpoiler.IsRevealed"/> is set to true.<para/>
            See also: <see cref="E:MGUI.Core.UI.MGSpoiler.OnIsRevealedChanging"/>, <see cref="E:MGUI.Core.UI.MGSpoiler.OnHidden"/>, <see cref="E:MGUI.Core.UI.MGSpoiler.OnIsRevealedChanged"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGSpoiler.OnHidden">
            <summary>Invoked immediately after <see cref="P:MGUI.Core.UI.MGSpoiler.IsRevealed"/> is set to false.<para/>
            See also: <see cref="E:MGUI.Core.UI.MGSpoiler.OnIsRevealedChanging"/>, <see cref="E:MGUI.Core.UI.MGSpoiler.OnRevealed"/>, <see cref="E:MGUI.Core.UI.MGSpoiler.OnIsRevealedChanged"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGStopwatch.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGStopwatch.ValueComponent">
            <summary>Provides direct access to the textblock component that displays this stopwatch's <see cref="P:MGUI.Core.UI.MGStopwatch.Elapsed"/> time.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGStopwatch.ValueDisplayFormat">
            <summary>A format string to use when computing the text to display.<br/>
            "{{Elapsed}}" will be replaced with the value retrieved via <see cref="P:MGUI.Core.UI.MGStopwatch.ElapsedToString"/>.<para/>
            Default value: <see cref="F:MGUI.Core.UI.MGStopwatch.DefaultValueDisplayFormat"/><para/>
            This value supports some basic text markdown, such as "[b]" for bold text, "[fg=Red]" to set the text foreground color to a given value, "[opacity=0.5]" etc.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGStopwatch.Elapsed">
            <summary>The amount of time that has passed while this <see cref="T:MGUI.Core.UI.MGStopwatch"/> was active.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGStopwatch.IsRunning"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGStopwatch.ElapsedChanged">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGStopwatch.Elapsed"/> changes.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGStopwatch.TimeScale">
            <summary>Determines the rate at which <see cref="P:MGUI.Core.UI.MGStopwatch.Elapsed"/> changes.<para/>
            Default value: 1.0, which means <see cref="P:MGUI.Core.UI.MGStopwatch.Elapsed"/> is incremented by 1 second per 1 real-life second.<para/>
            For example, if the player has an ability that slows time to 0.50x, you may wish to temporarily set <see cref="P:MGUI.Core.UI.MGStopwatch.TimeScale"/> to 0.50 while the ability is active,<br/>
            unless you still wanted the stopwatch to track real time</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGStopwatch.ElapsedToString">
            <summary>A function whose input is the <see cref="P:MGUI.Core.UI.MGStopwatch.Elapsed"/> time, and returns the string value that should be displayed by this <see cref="T:MGUI.Core.UI.MGStopwatch"/>.<para/>
            Default value: A function that returns:
            <code>TimeSpan.ToString(@"m\:ss\.%f")</code>
            For example, a value of 13566 seconds would be formatted as: "46:06.0"<para/>
            More info: <see href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGStopwatch.IsRunning">
            <summary>See also: <see cref="M:MGUI.Core.UI.MGStopwatch.Start"/>, <see cref="M:MGUI.Core.UI.MGStopwatch.Stop"/>, <see cref="E:MGUI.Core.UI.MGStopwatch.Started"/>, <see cref="E:MGUI.Core.UI.MGStopwatch.Stopped"/>, <see cref="M:MGUI.Core.UI.MGStopwatch.ResetAndStart"/>, <see cref="M:MGUI.Core.UI.MGStopwatch.ResetAndStop"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGStopwatch.Started">
            <summary>Invoked when this <see cref="T:MGUI.Core.UI.MGStopwatch"/> is started (<see cref="P:MGUI.Core.UI.MGStopwatch.IsRunning"/> set to true)</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGStopwatch.Stopped">
            <summary>Invoked when this <see cref="T:MGUI.Core.UI.MGStopwatch"/> is stopped (<see cref="P:MGUI.Core.UI.MGStopwatch.IsRunning"/> set to false)</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGStopwatch.Start">
            <summary>Start the <see cref="T:MGUI.Core.UI.MGStopwatch"/> if not already started.<br/>
            See also: <see cref="M:MGUI.Core.UI.MGStopwatch.Stop"/>, <see cref="P:MGUI.Core.UI.MGStopwatch.IsRunning"/>, <see cref="M:MGUI.Core.UI.MGStopwatch.ResetAndStart"/>, <see cref="M:MGUI.Core.UI.MGStopwatch.ResetAndStop"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGStopwatch.Stop">
            <summary>Stop the <see cref="T:MGUI.Core.UI.MGStopwatch"/> if not already stopped.<br/>
            See also: <see cref="M:MGUI.Core.UI.MGStopwatch.Start"/>, <see cref="P:MGUI.Core.UI.MGStopwatch.IsRunning"/>, <see cref="M:MGUI.Core.UI.MGStopwatch.ResetAndStart"/>, <see cref="M:MGUI.Core.UI.MGStopwatch.ResetAndStop"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGStopwatch.ResetAndStart">
            <summary>Resets <see cref="P:MGUI.Core.UI.MGStopwatch.Elapsed"/> to <see cref="F:System.TimeSpan.Zero"/>, and starts the <see cref="T:MGUI.Core.UI.MGStopwatch"/>.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGStopwatch.ResetAndStop">
            <summary>Resets <see cref="P:MGUI.Core.UI.MGStopwatch.Elapsed"/> to <see cref="F:System.TimeSpan.Zero"/>, and stops the <see cref="T:MGUI.Core.UI.MGStopwatch"/> if <see cref="P:MGUI.Core.UI.MGStopwatch.IsRunning"/> is true.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGStopwatch.#ctor(MGUI.Core.UI.MGWindow,System.Boolean)">
            <param name="IsRunning">If false, <see cref="P:MGUI.Core.UI.MGStopwatch.Elapsed"/> will not increment until <see cref="M:MGUI.Core.UI.MGStopwatch.Start"/> is called.</param>
        </member>
        <member name="P:MGUI.Core.UI.MGTabControl.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTabControl.HeadersPanelElement">
            <summary>The <see cref="T:MGUI.Core.UI.Containers.MGStackPanel"/> that contains the tab headers.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTabControl.TabHeaderPosition"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTabControl.HeaderAreaBackground">
            <summary>The background brush of the entire header region of this <see cref="T:MGUI.Core.UI.MGTabControl"/>. This is rendered behind the tab headers.<para/>
            To change the background of a specific tab, consider setting the <see cref="P:MGUI.Core.UI.MGTabControl.UnselectedTabHeaderTemplate"/> and <see cref="P:MGUI.Core.UI.MGTabControl.SelectedTabHeaderTemplate"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTabControl.SelectedTabHeaderTemplate">
            <summary>Creates the wrapper element that hosts the given <see cref="T:MGUI.Core.UI.MGTabItem"/>'s <see cref="P:MGUI.Core.UI.MGTabItem.Header"/> for the selected tab.<para/>
            Default style: <see cref="M:MGUI.Core.UI.MGTabControl.ApplyDefaultSelectedTabHeaderStyle(MGUI.Core.UI.MGButton)"/><para/>
            See also: <see cref="P:MGUI.Core.UI.MGTabControl.UnselectedTabHeaderTemplate"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTabControl.UnselectedTabHeaderTemplate">
            <summary>Creates the wrapper element that hosts the given <see cref="T:MGUI.Core.UI.MGTabItem"/>'s <see cref="P:MGUI.Core.UI.MGTabItem.Header"/> for tabs that aren't selected.<para/>
            Default style: <see cref="M:MGUI.Core.UI.MGTabControl.ApplyDefaultUnselectedTabHeaderStyle(MGUI.Core.UI.MGButton)"/><para/>
            See also: <see cref="P:MGUI.Core.UI.MGTabControl.SelectedTabHeaderTemplate"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGTabControl.SelectedTabChanging">
            <summary>Invoked just before <see cref="P:MGUI.Core.UI.MGTabControl.SelectedTab"/> changes. Argument value is the new tab being selected. This event allows cancellation.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGTabControl.SelectedTabChanged">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGTabControl.SelectedTab"/> changes to a different <see cref="T:MGUI.Core.UI.MGTabItem"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTabControl.TrySelectTab(MGUI.Core.UI.MGTabItem)">
            <summary>Attempts to set the given <paramref name="Tab"/> as the <see cref="P:MGUI.Core.UI.MGTabControl.SelectedTab"/>.<para/>
            To deselect a tab, use <see cref="M:MGUI.Core.UI.MGTabControl.TryDeselectTab(MGUI.Core.UI.MGTabItem,System.Boolean)"/> rather than a null <paramref name="Tab"/> parameter.</summary>
            <param name="Tab">Cannot be null, and should be a tab that belongs to this <see cref="T:MGUI.Core.UI.MGTabControl"/> (I.E. it was created via <see cref="M:MGUI.Core.UI.MGTabControl.AddTab(MGUI.Core.UI.MGElement,MGUI.Core.UI.MGElement)"/>)</param>
            <returns>False if unable to select the given <paramref name="Tab"/>, such as if the value was null, or it belongs to a different <see cref="T:MGUI.Core.UI.MGTabControl"/>, or the action was cancelled by <see cref="E:MGUI.Core.UI.MGTabControl.SelectedTabChanging"/> event.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGTabControl.TryDeselectTab(MGUI.Core.UI.MGTabItem,System.Boolean)">
            <summary>Attempts to deselect the given <paramref name="Tab"/>. Does nothing if the <paramref name="Tab"/> is not already selected or if there are no other tabs to select in place of it.</summary>
            <param name="Tab">The tab to deselect.</param>
            <param name="FocusTabToRight">If true, will attempt to select the tab to the right of the tab being deselected.<br/>
            If false, will attempt to select the tab to the left of the tab being deselected.</param>
        </member>
        <member name="T:MGUI.Core.UI.MGTabItem">
            <summary>Can be instantiated via: <see cref="M:MGUI.Core.UI.MGTabControl.AddTab(MGUI.Core.UI.MGElement,MGUI.Core.UI.MGElement)"/> or <see cref="M:MGUI.Core.UI.MGTabControl.AddTab(System.String,MGUI.Core.UI.MGElement)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTabItem.Header">
            <summary>The content to display inside the tab's header.<para/>
            This content is automatically wrapped inside of an <see cref="T:MGUI.Core.UI.MGButton"/> that is created via <see cref="P:MGUI.Core.UI.MGTabControl.UnselectedTabHeaderTemplate"/> or <see cref="P:MGUI.Core.UI.MGTabControl.SelectedTabHeaderTemplate"/>,<br/>
            See also: <see cref="P:MGUI.Core.UI.MGTabItem.IsTabSelected"/>, <see cref="P:MGUI.Core.UI.MGTabControl.SelectedTab"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGTabItem.HeaderChanged">
            <summary>Invoked after <see cref="P:MGUI.Core.UI.MGTabItem.Header"/> has changed.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTabItem.IsTabSelected">
            <summary>Convenience property that is really just an alias for <see cref="P:MGUI.Core.UI.MGTabControl.SelectedTab"/>.<para/>
            See also:<br/><see cref="M:MGUI.Core.UI.MGTabControl.TrySelectTab(MGUI.Core.UI.MGTabItem)"/><br/><see cref="M:MGUI.Core.UI.MGTabControl.TrySelectTabAtIndex(System.Int32)"/><br/><see cref="M:MGUI.Core.UI.MGTabControl.TryDeselectTab(MGUI.Core.UI.MGTabItem,System.Boolean)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBlock.FontFamily">
            <summary>To set this value, use <see cref="M:MGUI.Core.UI.MGTextBlock.TrySetFont(System.String,System.Int32)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBlock.FontSize">
            <summary>To set this value, use <see cref="M:MGUI.Core.UI.MGTextBlock.TrySetFont(System.String,System.Int32)"/> or <see cref="M:MGUI.Core.UI.MGTextBlock.TrySetFontSize(System.Int32)"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBlock.ShadowOffset">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGTextBlock.IsShadowed"/> is true.<br/>
            Determines the offset applied to <see cref="P:MGUI.Core.UI.MGTextBlock.Text"/> when drawing the shadow.<br/>
            If null, uses <see cref="P:MGUI.Core.UI.ThemeFontSettings.DefaultFontShadowOffset"/> from <see cref="P:MGUI.Core.UI.MGTheme.FontSettings"/><para/>
            Warning - shadowed text does not affect the layout bounds of this <see cref="T:MGUI.Core.UI.MGTextBlock"/>.<br/>
            Using a large <see cref="P:MGUI.Core.UI.MGTextBlock.ShadowOffset"/> value may result in parts of the shadow being clipped to <see cref="P:MGUI.Core.UI.MGElement.ActualLayoutBounds"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBlock.ShadowColor">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGTextBlock.IsShadowed"/> is true.<br/>
            If null, uses <see cref="P:MGUI.Core.UI.ThemeFontSettings.DefaultFontShadowColor"/> from <see cref="P:MGUI.Core.UI.MGTheme.FontSettings"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBlock.Foreground">
            <summary>The foreground color to use when rendering the text.<br/>
            If the text is formatted with color codes (such as '[color=Red]Hello World[/color]'), the color specified in the <see cref="T:MGUI.Core.UI.Text.MGTextRun"/> will take precedence.<para/>
            If the value for the current <see cref="P:MGUI.Core.UI.MGElement.VisualState"/> is null, will attempt to resolve the value from <see cref="P:MGUI.Core.UI.MGElement.DerivedDefaultTextForeground"/>, or <see cref="P:MGUI.Core.UI.MGTheme.TextBlockFallbackForeground"/> if no value is specified.<para/>
            See also:<br/><see cref="P:MGUI.Core.UI.MGElement.DefaultTextForeground"/><br/><see cref="P:MGUI.Core.UI.MGElement.DerivedDefaultTextForeground"/><br/><see cref="P:MGUI.Core.UI.MGTextBlock.ActualForeground"/><br/>
            <see cref="P:MGUI.Core.UI.MGTheme.TextBlockFallbackForeground"/><br/><see cref="P:MGUI.Core.UI.MGWindow.Theme"/><br/><see cref="P:MGUI.Core.UI.MGDesktop.Theme"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBlock.AllowsInlineFormatting">
            <summary>If true, <see cref="P:MGUI.Core.UI.MGTextBlock.Text"/> can contain formatting codes such as "[bold]...[/bold]" or "[color=green]...[/color]" etc.<br/>
            If false, all formatting codes within <see cref="P:MGUI.Core.UI.MGTextBlock.Text"/> will be treated as literal strings instead of affecting how the text is rendered.<para/>
            Default value: true</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTextBlock.SetText(System.String,System.Boolean)">
            <param name="SuppressLayoutChanged">If true, <see cref="P:MGUI.Core.UI.MGTextBlock.Text"/> will be set without calling <see cref="M:MGUI.Core.UI.MGTextBlock.InvokeLayoutChanged"/><para/>
            Intended to be used for performance purposes when changing the text value, without actually changing the text layout.<br/>
            For example, changing text from: "Hello World" to "Hello [bg=Red]World[/bg]" does not affect the rendered text's layout/size.</param>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBlock.LinePadding">
            <summary>Additional vertical space between each line of text</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBlock.MinLines">
            <summary>The minimum # of lines to display, regardless of how many lines the actual text content requires.<para/>
            Default value: 0<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBlock.MaxLines"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBlock.MaxLines">
            <summary>The maximum # of lines to display, regardless of how many lines the actual text content requires.<br/>
            Use null to indicate there is no maximum.<para/>
            Default value: null<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBlock.MinLines"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTextBlock.#ctor(MGUI.Core.UI.MGWindow,System.String,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{System.Int32},System.Boolean)">
            <param name="FontSize">If null, uses the font size specified by <see cref="P:MGUI.Core.UI.ThemeFontSettings.DefaultFontSize"/>.<para/>
            See also:<br/><see cref="P:MGUI.Core.UI.MGWindow.Theme"/><br/><see cref="P:MGUI.Core.UI.MGDesktop.Theme"/><br/><see cref="P:MGUI.Core.UI.MGTheme.FontSettings"/></param>
        </member>
        <member name="F:MGUI.Core.UI.MGTextBlock.IgnoreEmptySpaceLines">
            <summary>If true, lines that consist of only a single whitespace character will be ignored when rendering wrapped text content.</summary>
        </member>
        <member name="F:MGUI.Core.UI.MGTextBlock.ActionBounds">
            <summary>
            Key = the name of a named delegate to invoke when clicking within any of the given bounds.<br/>
            Value = the bounds of the text content that the named action corresponds to. Usually a list of 1 rectangle, but might be multiple if the bound text spans multiple lines.
            </summary>
        </member>
        <member name="F:MGUI.Core.UI.MGTextBlock.ToolTipBounds">
            <summary>
            Key = the name of a ToolTip to reference,<br/>
            Value = the bounds of the text content that the tooltip is applied to. Usually a list of 1 rectangle, but might be multiple if the text spans multiple lines.
            </summary>
        </member>
        <member name="F:MGUI.Core.UI.TextEntryMode.Insert">
            <summary>New characters will be inserted into the existing Text at the caret position.</summary>
        </member>
        <member name="F:MGUI.Core.UI.TextEntryMode.Overwrite">
            <summary>New characters will replace the existing character at the caret position.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.TextBlockComponent">
            <summary>Provides direct access to the textblock component that displays this textbox's text.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.Text">
            <summary>To set this value, use <see cref="M:MGUI.Core.UI.MGTextBox.SetText(System.String)"/>.<para/>
            If this <see cref="T:MGUI.Core.UI.MGTextBox"/> is an <see cref="T:MGUI.Core.UI.MGPasswordBox"/>, this value will only contain <see cref="P:MGUI.Core.UI.MGPasswordBox.PasswordCharacter"/>s (and special characters such as \n).<para/>
            See also: <see cref="P:MGUI.Core.UI.MGPasswordBox.Password"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTextBox.SetText(System.String)">
            <returns>True if <see cref="P:MGUI.Core.UI.MGTextBox.Text"/> value was changed.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGTextBox.SetText(System.String,System.Boolean)">
            <param name="ExecuteEvenIfSameValue">If true, will attempt to set the value even if <see cref="P:MGUI.Core.UI.MGTextBox.Text"/> already has the same value as <paramref name="Value"/>.<para/>
            This is mainly intended for use by subclasses that alter the <paramref name="Value"/>, such as <see cref="T:MGUI.Core.UI.MGPasswordBox"/><br/>
            (For example, a Password might change from "123" to "234", but this method would only see "***" -> "***"</param>
            <returns>True if <see cref="P:MGUI.Core.UI.MGTextBox.Text"/> value was changed.</returns>
        </member>
        <member name="E:MGUI.Core.UI.MGTextBox.TextChanging">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGTextBox.Text"/> is about to change.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGTextBox.TextChanged">
            <summary>Invoked immediately after <see cref="P:MGUI.Core.UI.MGTextBox.Text"/> has changed.<para/>
            For <see cref="T:MGUI.Core.UI.MGPasswordBox"/>, consider using <see cref="E:MGUI.Core.UI.MGPasswordBox.PasswordChanged"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTextBox.SetFormattedText(System.String,System.Boolean)">
            <param name="Silent">If true, <see cref="T:MGUI.Core.UI.MGTextBlock"/> will not invoke its LayoutChanged event.<para/>
            This value should only be trued when changing the markdown of the text, but not the actual rendered text itself.<br/>
            For example, changing the foreground color of the text does not affect its layout.</param>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.PlaceholderTextBlockComponent">
            <summary>Provides direct access to the textblock component that displays the <see cref="P:MGUI.Core.UI.MGTextBox.PlaceholderText"/> when <see cref="P:MGUI.Core.UI.MGTextBox.Text"/> is empty.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.PlaceholderText">
            <summary>Text to display in when <see cref="P:MGUI.Core.UI.MGTextBox.Text"/> is empty. Default value: null<para/>
            This value supports some basic markdown, such as:<br/>
            <code>"[opacity=0.5][i][b][u][fg=Red][shadow=Black 1 1]Enter a value[/shadow][/fg][/u][/b][/i][/opacity]"</code><para/>
            Recommended to surround your text with "[opacity=0.5][i] ... [/i][/opacity]", such as:<para/>
            "[opacity=0.5][i]Enter a value[/i][/opacity]"</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.MinLines">
            <summary>The minimum # of lines to display, regardless of how many lines the actual text content requires.<para/>
            Default value: 0<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.MaxLines"/>, <see cref="P:MGUI.Core.UI.MGTextBlock.MinLines"/>, <see cref="P:MGUI.Core.UI.MGTextBlock.MaxLines"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.MaxLines">
            <summary>The maximum # of lines to display, regardless of how many lines the actual text content requires.<br/>
            Use null to indicate there is no maximum.<para/>
            Default value: null<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.MinLines"/>, <see cref="P:MGUI.Core.UI.MGTextBlock.MinLines"/>, <see cref="P:MGUI.Core.UI.MGTextBlock.MaxLines"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.CharacterLimit">
            <summary>The maximum # of characters that can be inputted in this <see cref="T:MGUI.Core.UI.MGTextBox"/>. Use null for no character limit.<para/>
            Some characters are automatically added to this <see cref="T:MGUI.Core.UI.MGTextBox"/>,<br/>
            such as hyphens that are appended at the end of a line when a single word's width exceeds the line's width and the word must wrap across multiple lines.<br/>
            These characters do not count towards the limit.<para/>
            Linebreaks count as 1 character ('\n'). Tabs are typically treated as 4 spaces and thus count as 4 characters. See also: <see cref="F:MGUI.Core.UI.MGTextBox.TabSpacesCount"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.CharacterCountComponent">
            <summary>Provides direct access to the textblock component that displays the character counts when <see cref="P:MGUI.Core.UI.MGTextBox.ShowCharacterCount"/> is true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.ShowCharacterCount">
            <summary>If true, the current character count will be shown in the bottom-right corner of this <see cref="T:MGUI.Core.UI.MGTextBox"/>.<para/>
            If <see cref="P:MGUI.Core.UI.MGTextBox.CharacterLimit"/> has a non-null value, the counter will also display the limit, such as "100 / 500"</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.LimitedCharacterCountFormatString">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGTextBox.ShowCharacterCount"/> is true and <see cref="P:MGUI.Core.UI.MGTextBox.CharacterLimit"/> is not null.<para/>
            A format string to use when computing the character-count text displayed in the bottom-right corner of this <see cref="T:MGUI.Core.UI.MGTextBox"/>.<br/>
            "{{CharacterCount}}" and "{{CharacterLimit}}" will be replaced with their actual underlying values when formatting the string.<para/>
            Default value:<code>"[b]{{CharacterCount}}[/b] / [b]{{CharacterLimit}}[/b]"</code><para/>
            This value supports some basic text markdown, such as "[b]" for bold text, "[fg=Red]" to set the text foreground color to a given value, "[opacity=0.5]" etc.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.ShowCharacterCount"/>, <see cref="P:MGUI.Core.UI.MGTextBox.CharacterLimit"/>, <see cref="P:MGUI.Core.UI.MGTextBox.LimitlessCharacterCountFormatString"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.LimitlessCharacterCountFormatString">
            <summary>Only relevant if <see cref="P:MGUI.Core.UI.MGTextBox.ShowCharacterCount"/> is true and <see cref="P:MGUI.Core.UI.MGTextBox.CharacterLimit"/> is null.<para/>
            A format string to use when computing the character-count text displayed in the bottom-right corner of this <see cref="T:MGUI.Core.UI.MGTextBox"/>.<br/>
            "{{CharacterCount}}" will be replaced with its actual underlying value when formatting the string.<para/>
            Default value:<code>"[b]{{CharacterCount}}[/b] character(s)"</code><para/>
            This value supports some basic text markdown, such as "[b]" for bold text, "[fg=Red]" to set the text foreground color to a given value, "[opacity=0.5]" etc.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.ShowCharacterCount"/>, <see cref="P:MGUI.Core.UI.MGTextBox.CharacterLimit"/>, <see cref="P:MGUI.Core.UI.MGTextBox.LimitedCharacterCountFormatString"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.AllowsTextSelection">
            <summary>True if the user should be able to click+drag to select Text.<para/>
            Default value: true</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.CurrentSelection">
            <summary>The currently-selected substring.<para/>
            Recommended to use <see cref="M:MGUI.Core.UI.MGTextBox.TrySelectText(System.String,System.Boolean)"/> or <see cref="M:MGUI.Core.UI.MGTextBox.SelectAll"/> instead of directly setting this property.<para/>
            See also: <see cref="E:MGUI.Core.UI.MGTextBox.SelectionChanged"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGTextBox.SelectionChanged">
            <summary>Invoked after <see cref="P:MGUI.Core.UI.MGTextBox.CurrentSelection"/> changes.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTextBox.TrySelectText(System.String,System.Boolean)">
            <summary>Attempts to select the given <paramref name="Text"/>. Does not modify the selection if the <paramref name="Text"/> was not found.</summary>
            <param name="FirstOccurrence">If true, the first occurrence of the given <paramref name="Text"/> will be selected, if found within this.<see cref="P:MGUI.Core.UI.MGTextBox.Text"/>.<para/>
            If false, the last occurrence of the given <paramref name="Text"/> will be selected, if found within this.<see cref="P:MGUI.Core.UI.MGTextBox.Text"/></param>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.FocusedSelectionForegroundColor">
            <summary>The text foreground color of the selected text while this <see cref="T:MGUI.Core.UI.MGTextBox"/> has focus.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.FocusedSelectionForegroundColor"/>, <see cref="P:MGUI.Core.UI.MGTextBox.FocusedSelectionBackgroundColor"/>, 
            <see cref="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionForegroundColor"/>, <see cref="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionBackgroundColor"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.FocusedSelectionBackgroundColor">
            <summary>The text background color of the selected text while this <see cref="T:MGUI.Core.UI.MGTextBox"/> has focus.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.FocusedSelectionForegroundColor"/>, <see cref="P:MGUI.Core.UI.MGTextBox.FocusedSelectionBackgroundColor"/>, 
            <see cref="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionForegroundColor"/>, <see cref="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionBackgroundColor"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionForegroundColor">
            <summary>The text foreground color of the selected text while this <see cref="T:MGUI.Core.UI.MGTextBox"/> does NOT have focus.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.FocusedSelectionForegroundColor"/>, <see cref="P:MGUI.Core.UI.MGTextBox.FocusedSelectionBackgroundColor"/>, 
            <see cref="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionForegroundColor"/>, <see cref="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionBackgroundColor"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionBackgroundColor">
            <summary>The text background color of the selected text while this <see cref="T:MGUI.Core.UI.MGTextBox"/> does NOT have focus.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.FocusedSelectionForegroundColor"/>, <see cref="P:MGUI.Core.UI.MGTextBox.FocusedSelectionBackgroundColor"/>, 
            <see cref="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionForegroundColor"/>, <see cref="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionBackgroundColor"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTextBox.LimitedStack`1.SetLimit(System.Int32)">
            <summary>If the previous limit is greater than <paramref name="Value"/>, the oldest items will be removed.</summary>
            <param name="Value"></param>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.UndoRedoHistorySize">
            <summary>The maximum number of undo or redo states that will be kept in memory. Decreasing this value may result in the oldest undo or redo states being lost.<para/>
            Default value: <see cref="F:MGUI.Core.UI.MGTextBox.DefaultUndoRedoHistorySize"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTextBox.RequestFocus">
            <summary>Attempts to set this element as the value for <see cref="P:MGUI.Core.UI.MGDesktop.FocusedKeyboardHandler"/> at the end of the next update tick.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGTextBox.ReadonlyChanged">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGTextBox.IsReadonly"/> changes.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.AcceptsReturn">
            <summary>Note: This feature is not available for <see cref="T:MGUI.Core.UI.MGPasswordBox"/>.<para/>
            Default value: true</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.AcceptsTab">
            <summary>Note: This feature is not available for <see cref="T:MGUI.Core.UI.MGPasswordBox"/>.<para/>
            Default value: true</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.IsHeldKeyRepeated">
            <summary>If true, the most-recently pressed key will be repeatedly inputted (~30 times/second). Default value: true<br/>
            Some keys might not be repeated, such as special characters, or special keyboard shortcuts like 'Ctrl+C'.<para/>
            EX: Text="". Press 'A'. Text="A". Keep holding 'A' for about 1 second. Text="AAAAAAAAAAAAAAAA". Release 'A'.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.InitialKeyRepeatDelay"/>, <see cref="P:MGUI.Core.UI.MGTextBox.KeyRepeatInterval"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.InitialKeyRepeatDelay">
            <summary>The initial delay before a pressed key will be repeatedly inputted.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.IsHeldKeyRepeated"/> <see cref="P:MGUI.Core.UI.MGTextBox.KeyRepeatInterval"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.KeyRepeatInterval">
            <summary>How often to repeatedly input the most-recently pressed key.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextBox.IsHeldKeyRepeated"/>, <see cref="P:MGUI.Core.UI.MGTextBox.InitialKeyRepeatDelay"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.ResizeGripComponent">
            <summary>Provides direct access to the resizer grip that appears in the bottom-right corner of this textbox when <see cref="P:MGUI.Core.UI.MGTextBox.IsUserResizable"/> is true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextBox.IsUserResizable">
            <summary>If true, a <see cref="T:MGUI.Core.UI.MGResizeGrip"/> will be visible in the bottom-right corner of the window, 
            allowing the user to click+drag it to adjust this <see cref="T:MGUI.Core.UI.MGElement"/>'s <see cref="P:MGUI.Core.UI.MGElement.PreferredWidth"/> / <see cref="P:MGUI.Core.UI.MGElement.PreferredHeight"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTextBox.#ctor(MGUI.Core.UI.MGWindow,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <param name="CharacterLimit">Use null for no limit. Recommended to set this to a reasonable value to avoid performance issues.</param>
        </member>
        <member name="T:MGUI.Core.UI.MGTextureData">
            <param name="RenderSizeOverride">The <see cref="T:MonoGame.Extended.Size"/> to use for the destination <see cref="T:Microsoft.Xna.Framework.Rectangle"/> when drawing this texture via <see cref="M:MGUI.Core.UI.MGTextureData.Draw(MGUI.Shared.Rendering.DrawTransaction,Microsoft.Xna.Framework.Point,System.Nullable{Microsoft.Xna.Framework.Color},System.Single)"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextureData.RenderSize"/></param>
        </member>
        <member name="M:MGUI.Core.UI.MGTextureData.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Single,System.Nullable{MonoGame.Extended.Size})">
            <param name="RenderSizeOverride">The <see cref="T:MonoGame.Extended.Size"/> to use for the destination <see cref="T:Microsoft.Xna.Framework.Rectangle"/> when drawing this texture via <see cref="M:MGUI.Core.UI.MGTextureData.Draw(MGUI.Shared.Rendering.DrawTransaction,Microsoft.Xna.Framework.Point,System.Nullable{Microsoft.Xna.Framework.Color},System.Single)"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextureData.RenderSize"/></param>
        </member>
        <member name="P:MGUI.Core.UI.MGTextureData.RenderSizeOverride">
            <summary>The <see cref="T:MonoGame.Extended.Size"/> to use for the destination <see cref="T:Microsoft.Xna.Framework.Rectangle"/> when drawing this texture via <see cref="M:MGUI.Core.UI.MGTextureData.Draw(MGUI.Shared.Rendering.DrawTransaction,Microsoft.Xna.Framework.Point,System.Nullable{Microsoft.Xna.Framework.Color},System.Single)"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGTextureData.RenderSize"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTextureData.RenderSize">
            <summary>The actual size this texture will be drawn at if using <see cref="M:MGUI.Core.UI.MGTextureData.Draw(MGUI.Shared.Rendering.DrawTransaction,Microsoft.Xna.Framework.Point,System.Nullable{Microsoft.Xna.Framework.Color},System.Single)"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.ThemeManagedGetter`1">
            <summary>A wrapper class for the given <typeparamref name="TDataType"/> that controls the getter function, typically to return a copy of the value (to mimic treating class implementations as value-types)</summary>
        </member>
        <member name="P:MGUI.Core.UI.ThemeManagedGetter`1.Value">
            <summary>This property intentionally has no getter. To get the value, use <see cref="M:MGUI.Core.UI.ThemeManagedGetter`1.GetValue(System.Boolean)"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.ThemeManagedGetter`1.GetValue(System.Boolean)">
            <param name="Copy">If true, a copy of the underlying <see cref="P:MGUI.Core.UI.ThemeManagedGetter`1.Value"/> will be returned. If false, a direct reference to the underlying <see cref="P:MGUI.Core.UI.ThemeManagedGetter`1.Value"/> will be returned.<para/>
            Some implementations of <typeparamref name="TDataType"/> are structs (value-types) rather than classes (reference-types),<br/>
            so for consistency, recommended to always retrieve a copy, essentially treating all objects as value-types.</param>
        </member>
        <member name="P:MGUI.Core.UI.ThemeFontSettings.ContextMenuFontSize">
            <summary>The default fontsize for content inside an <see cref="T:MGUI.Core.UI.MGContextMenu"/>, such as <see cref="T:MGUI.Core.UI.MGContextMenuButton"/> and <see cref="T:MGUI.Core.UI.MGContextMenuToggle"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.ThemeFontSettings.AdjustAllFontSizes(System.Int32)">
            <summary>Changes all font sizes by the given <paramref name="Offset"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.ThemeFontSettings.UseExactScale">
            <summary>If true, <see cref="T:MGUI.Core.UI.MGTextBlock"/> will attempt to draw text with a scale that most closely results in the desired font size.<br/>
            If false, <see cref="T:MGUI.Core.UI.MGTextBlock"/> may choose a slightly different font size that approximates the exact size, but results in better scaling results.<para/>
            For example, if you have SpriteFonts for these font sizes: 8, 10, 12, and you wanted to use font size = 19<br/>
            If <see cref="P:MGUI.Core.UI.ThemeFontSettings.UseExactScale"/> is true: <see cref="T:MGUI.Core.UI.MGTextBlock"/> would choose size=10, scale=1.9<br/>
            If <see cref="P:MGUI.Core.UI.ThemeFontSettings.UseExactScale"/> is false: <see cref="T:MGUI.Core.UI.MGTextBlock"/> would choose size=10, scale=2.0, preferring to scale by values such as 0.25, 0.5, 1.0, 2.0 etc<para/>
            Default value: false</summary>
        </member>
        <member name="P:MGUI.Core.UI.ThemeFontSettings.DefaultFontFamily">
            <summary>The name of the font that should be used by default in <see cref="T:MGUI.Core.UI.MGTextBlock"/>s when no font family is explicitly specified.<para/>
            If null, uses <see cref="P:MGUI.Shared.Text.FontManager.DefaultFontFamily"/> instead.<para/>
            EX: "Arial". If not null, the <see cref="T:MGUI.Shared.Text.FontManager"/> must contain a <see cref="T:MGUI.Shared.Text.FontSet"/> with <see cref="P:MGUI.Shared.Text.FontSet.Name"/> that matches this value.</summary>
        </member>
        <member name="P:MGUI.Core.UI.ThemeFontSettings.DefaultFontShadowOffset">
            <summary>The fallback value to use for <see cref="P:MGUI.Core.UI.MGTextBlock.ShadowOffset"/> when <see cref="P:MGUI.Core.UI.MGTextBlock.ShadowOffset"/> is null.</summary>
        </member>
        <member name="P:MGUI.Core.UI.ThemeFontSettings.DefaultFontShadowColor">
            <summary>The fallback value to use for <see cref="P:MGUI.Core.UI.MGTextBlock.ShadowColor"/> when <see cref="P:MGUI.Core.UI.MGTextBlock.ShadowColor"/> is null.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.ComboBoxDropdownItemBackground">
            <summary>The default background brush to use on items in an <see cref="T:MGUI.Core.UI.MGComboBox`1"/>'s dropdown.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.CheckMarkColor">
            <summary>The default value to use for <see cref="P:MGUI.Core.UI.MGCheckBox.CheckMarkColor"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.ListBoxItemBackground">
            <summary>The default background brush to use on items in an <see cref="T:MGUI.Core.UI.MGListBox`1"/>.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.ListBoxItemAlternatingRowBackgrounds">
            <summary>The default value to use for <see cref="P:MGUI.Core.UI.MGListBox`1.AlternatingRowBackgrounds"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.RadioButtonCheckedFillColor">
            <summary>The default value to use for <see cref="P:MGUI.Core.UI.MGRadioButton.BubbleCheckedColor"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.TextBoxFocusedSelectionForeground">
            <summary>Default value to use for <see cref="P:MGUI.Core.UI.MGTextBox.FocusedSelectionForegroundColor"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.TextBoxFocusedSelectionBackground">
            <summary>Default value to use for <see cref="P:MGUI.Core.UI.MGTextBox.FocusedSelectionBackgroundColor"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.TextBoxUnfocusedSelectionForeground">
            <summary>Default value to use for <see cref="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionForegroundColor"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.TextBoxUnfocusedSelectionBackground">
            <summary>Default value to use for <see cref="P:MGUI.Core.UI.MGTextBox.UnfocusedSelectionBackgroundColor"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.TextBlockFallbackForeground">
            <summary>The fallback value to use for <see cref="P:MGUI.Core.UI.MGTextBlock.ActualForeground"/> when there is no foreground color applied to the <see cref="T:MGUI.Core.UI.MGTextBlock"/> or its parents.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTheme.ToolTipOffset">
            <summary>The default offset from the current mouse position to draw <see cref="T:MGUI.Core.UI.MGToolTip"/>s at.<br/>
            This value is used to initialize <see cref="P:MGUI.Core.UI.MGToolTip.DrawOffset"/><para/>
            Default value: (6, 6)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTimer.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTimer.ValueComponent">
            <summary>Provides direct access to the textblock component that displays this timer's <see cref="P:MGUI.Core.UI.MGTimer.RemainingDuration"/> time.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTimer.ValueDisplayFormat">
            <summary>A format string to use when computing the text to display.<br/>
            "{{RemainingDuration}}" will be replaced with the value retrieved via <see cref="P:MGUI.Core.UI.MGTimer.RemainingDurationToString"/>.<para/>
            Default value: <see cref="F:MGUI.Core.UI.MGTimer.DefaultValueDisplayFormat"/><para/>
            This value supports some basic text markdown, such as "[b]" for bold text, "[fg=Red]" to set the text foreground color to a given value, "[opacity=0.5]" etc.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGTimer.RemainingDurationChanged">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGTimer.RemainingDuration"/> changes.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGTimer.TimeUp">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGTimer.RemainingDuration"/> hits zero (or negative if <see cref="P:MGUI.Core.UI.MGTimer.AllowsNegativeDuration"/> is true).</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTimer.TimeScale">
            <summary>Determines the rate at which <see cref="P:MGUI.Core.UI.MGTimer.RemainingDuration"/> changes.<para/>
            Default value: 1.0, which means <see cref="P:MGUI.Core.UI.MGTimer.RemainingDuration"/> is decremented by 1 second per 1 real-life second.<para/>
            For example, if the player has an ability that slows time to 0.50x, you may wish to temporarily set <see cref="P:MGUI.Core.UI.MGTimer.TimeScale"/> to 0.50 while the ability is active,<br/>
            unless you still wanted the timer to track real time</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTimer.RemainingDurationToString">
            <summary>A function whose input is the <see cref="P:MGUI.Core.UI.MGTimer.RemainingDuration"/> time, and returns the string value that should be displayed by this <see cref="T:MGUI.Core.UI.MGTimer"/>.<para/>
            Default value: A function that returns:
            <code>TimeSpan.ToString(@"m\:ss\.%f")</code>
            For example, a value of 13566 seconds would be formatted as: "46:06.0"<para/>
            More info: <see href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGTimer.IsPaused">
            <summary>See also: <see cref="M:MGUI.Core.UI.MGTimer.Pause"/>, <see cref="M:MGUI.Core.UI.MGTimer.Resume"/>, <see cref="E:MGUI.Core.UI.MGTimer.Paused"/>, <see cref="E:MGUI.Core.UI.MGTimer.Resumed"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGTimer.Paused">
            <summary>Invoked when this <see cref="T:MGUI.Core.UI.MGTimer"/> is paused (<see cref="P:MGUI.Core.UI.MGTimer.IsPaused"/> set to true)</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGTimer.Resumed">
            <summary>Invoked when this <see cref="T:MGUI.Core.UI.MGTimer"/> is resumed (<see cref="P:MGUI.Core.UI.MGTimer.IsPaused"/> set to false)</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTimer.Pause">
            <summary>Pause the <see cref="T:MGUI.Core.UI.MGTimer"/> if not already paused.<br/>
            See also: <see cref="M:MGUI.Core.UI.MGTimer.Resume"/>, <see cref="P:MGUI.Core.UI.MGTimer.IsPaused"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTimer.Resume">
            <summary>Resume the <see cref="T:MGUI.Core.UI.MGTimer"/> if paused.<br/>
            See also: <see cref="M:MGUI.Core.UI.MGTimer.Pause"/>, <see cref="P:MGUI.Core.UI.MGTimer.IsPaused"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGTimer.#ctor(MGUI.Core.UI.MGWindow,System.TimeSpan,System.Boolean,System.Boolean)">
            <param name="IsPaused">If true, <see cref="P:MGUI.Core.UI.MGTimer.RemainingDuration"/> will not decrement until <see cref="M:MGUI.Core.UI.MGTimer.Resume"/> is called.</param>
            <param name="AllowsNegativeDuration">If true, <see cref="P:MGUI.Core.UI.MGTimer.RemainingDuration"/> will continue decreasing even after hitting 0.</param>
        </member>
        <member name="P:MGUI.Core.UI.MGToggleButton.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGToggleButton.CheckedBackgroundBrush">
            <summary>The background brush to use for this <see cref="T:MGUI.Core.UI.MGToggleButton"/> when <see cref="P:MGUI.Core.UI.MGToggleButton.IsChecked"/> is true.<para/>
            Equivalent to <see cref="P:MGUI.Core.UI.MGElement.BackgroundBrush"/>'s <see cref="P:MGUI.Core.UI.VisualStateSetting`1.SelectedValue"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGToggleButton.CheckedTextForeground">
            <summary>A foreground color to use on child content of this <see cref="T:MGUI.Core.UI.MGToggleButton"/> when <see cref="P:MGUI.Core.UI.MGToggleButton.IsChecked"/> is true.<para/>
            Equivalent to <see cref="P:MGUI.Core.UI.MGElement.DefaultTextForeground"/>'s <see cref="P:MGUI.Core.UI.VisualStateSetting`1.SelectedValue"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGToggleButton.OnCheckStateChanged">
            <summary>Note: This event is invoked before <see cref="E:MGUI.Core.UI.MGToggleButton.OnChecked"/> / <see cref="E:MGUI.Core.UI.MGToggleButton.OnUnchecked"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGToolTip.ShowOnDisabled">
            <summary>True if this <see cref="T:MGUI.Core.UI.MGToolTip"/> can be shown on an <see cref="T:MGUI.Core.UI.MGElement"/> where <see cref="P:MGUI.Core.UI.MGElement.IsEnabled"/>==false.<para/>
            Default value: false</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGToolTip.DrawOffset">
            <summary>An offset from the current mouse cursor position to draw this <see cref="T:MGUI.Core.UI.MGToolTip"/> at.<para/>
            Default value: <see cref="P:MGUI.Core.UI.MGTheme.ToolTipOffset"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGToolTip.ShowDelayOverride">
            <summary>The amount of time that the mouse must hover a particular <see cref="T:MGUI.Core.UI.MGElement"/> before its <see cref="P:MGUI.Core.UI.MGElement.ToolTip"/> can be shown.<para/>
            If not null, this value takes precedence over <see cref="P:MGUI.Core.UI.MGDesktop.ToolTipShowDelay"/>.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGToolTip.ActualShowDelay"/>, <see cref="P:MGUI.Core.UI.MGDesktop.ToolTipShowDelay"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGWindow.OnWindowPositionChanged">
            <summary>Note: This event is not invoked immediately after <see cref="P:MGUI.Core.UI.MGWindow.Left"/> or <see cref="P:MGUI.Core.UI.MGWindow.Top"/> changes.<br/>
            It is invoked during the Update tick to improve performance by only allowing it to notify once per tick.</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGWindow.OnWindowSizeChanged">
            <summary>Note: This event is not invoked immediately after <see cref="P:MGUI.Core.UI.MGWindow.WindowWidth"/> or <see cref="P:MGUI.Core.UI.MGWindow.WindowHeight"/> changes.<br/>
            It is invoked during the Update tick to improve performance by only allowing it to notify once per tick.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGWindow.ValidateWindowSizeAndPosition">
            <summary>Fires the <see cref="E:MGUI.Core.UI.MGWindow.OnWindowPositionChanged"/> and/or <see cref="E:MGUI.Core.UI.MGWindow.OnWindowSizeChanged"/> events if necessary.<para/>
            This method is automatically invoked at the beginning of <see cref="M:MGUI.Core.UI.MGElement.Update(MGUI.Core.UI.ElementUpdateArgs)"/>,<br/>
            but in rare cases you may want to manually invoke this after changing <see cref="P:MGUI.Core.UI.MGWindow.Left"/>, <see cref="P:MGUI.Core.UI.MGWindow.Top"/>, <see cref="P:MGUI.Core.UI.MGWindow.WindowWidth"/>, or <see cref="P:MGUI.Core.UI.MGWindow.WindowHeight"/> to make changes take effect immediately.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGWindow.ApplySizeToContent(MGUI.Core.UI.SizeToContent,System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Resizes this <see cref="T:MGUI.Core.UI.MGWindow"/> to satisfy the given constraints.</summary>
            <param name="UpdateLayoutImmediately">If true, the layout of child content is refreshed immediately rather than waiting until the next update tick.</param>
            <returns>The computed size that this <see cref="T:MGUI.Core.UI.MGWindow"/> will be changed to.</returns>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.Scale">
            <summary>Scales this <see cref="T:MGUI.Core.UI.MGWindow"/> from the window's center point.<para/>
            Default value: 1.0f</summary>
        </member>
        <member name="E:MGUI.Core.UI.MGWindow.ScaleChanged">
            <summary>Invoked when <see cref="P:MGUI.Core.UI.MGWindow.Scale"/> changes.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.UnscaledScreenSpaceToScaledScreenSpace">
            <summary>A <see cref="T:Microsoft.Xna.Framework.Matrix"/> that converts coordinates that haven't accounted for <see cref="P:MGUI.Core.UI.MGWindow.Scale"/> to coordinates that have.<para/>
            If <see cref="P:MGUI.Core.UI.MGWindow.Scale"/> is 1.0f, this value is <see cref="P:Microsoft.Xna.Framework.Matrix.Identity"/><para/>
            See also: <see cref="P:MGUI.Core.UI.MGWindow.ScaledScreenSpaceToUnscaledScreenSpace"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.ScaledScreenSpaceToUnscaledScreenSpace">
            <summary>A <see cref="T:Microsoft.Xna.Framework.Matrix"/> that converts coordinates in screen space to coordinates that haven't accounted for <see cref="P:MGUI.Core.UI.MGWindow.Scale"/>.<para/>
            If <see cref="P:MGUI.Core.UI.MGWindow.Scale"/> is 1.0f, this value is <see cref="P:Microsoft.Xna.Framework.Matrix.Identity"/><para/>
            See also: <see cref="P:MGUI.Core.UI.MGWindow.UnscaledScreenSpaceToScaledScreenSpace"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.ResizeGripComponent">
            <summary>Provides direct access to the resizer grip that appears in the bottom-right corner of this textbox when <see cref="P:MGUI.Core.UI.MGWindow.IsUserResizable"/> is true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.IsUserResizable">
            <summary>If true, a <see cref="T:MGUI.Core.UI.MGResizeGrip"/> will be visible in the bottom-right corner of the window, allowing the user to click+drag it to adjust this <see cref="T:MGUI.Core.UI.MGWindow"/>'s <see cref="P:MGUI.Core.UI.MGWindow.WindowWidth"/>/<see cref="P:MGUI.Core.UI.MGWindow.WindowHeight"/><para/>
            Default value: true (except in special-cases such as <see cref="P:MGUI.Core.UI.MGComboBox`1.Dropdown"/> window or for <see cref="T:MGUI.Core.UI.MGToolTip"/>s)</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.BorderComponent">
            <summary>Provides direct access to this element's border.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.ModalWindow">
            <summary>A child <see cref="T:MGUI.Core.UI.MGWindow"/> of this <see cref="T:MGUI.Core.UI.MGWindow"/>, which blocks all input handling on this <see cref="T:MGUI.Core.UI.MGWindow"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.HasModalWindow">
            <summary>True if a modal window is being displayed overtop of this window.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.IsModalWindow">
            <summary>True if this window instance is the modal window of its parent window.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.NestedWindows">
            <summary>The last element represents the <see cref="T:MGUI.Core.UI.MGWindow"/> that will be 
            drawn last (I.E., rendered overtop of everything else), and updated first (I.E., has the first chance to handle inputs)<br/>
            except in cases where a Topmost window is prioritized (See: <see cref="P:MGUI.Core.UI.MGWindow.IsTopmost"/>)<para/>
            This list does not include <see cref="P:MGUI.Core.UI.MGWindow.ModalWindow"/>, which is always prioritized over all <see cref="P:MGUI.Core.UI.MGWindow.NestedWindows"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.MGWindow.BringToFront(MGUI.Core.UI.MGWindow)">
            <summary>Moves the given <paramref name="NestedWindow"/> to the end of <see cref="P:MGUI.Core.UI.MGWindow.NestedWindows"/> list.<br/>
            It will typically be rendered overtop of all other <see cref="P:MGUI.Core.UI.MGWindow.NestedWindows"/>, unless another nested window is Topmost (See: <see cref="P:MGUI.Core.UI.MGWindow.IsTopmost"/>).<para/>
            If there is a <see cref="P:MGUI.Core.UI.MGWindow.ModalWindow"/>, then the <see cref="P:MGUI.Core.UI.MGWindow.ModalWindow"/> will be rendered overtop of the front-most <paramref name="NestedWindow"/></summary>
            <param name="NestedWindow"></param>
            <returns>True if the <paramref name="NestedWindow"/> was brought to the front. False if it was not a valid element in <see cref="P:MGUI.Core.UI.MGWindow.NestedWindows"/>.</returns>
        </member>
        <member name="M:MGUI.Core.UI.MGWindow.BringToBack(MGUI.Core.UI.MGWindow)">
            <summary>Moves the given <paramref name="NestedWindow"/> to the start of <see cref="P:MGUI.Core.UI.MGWindow.NestedWindows"/> list.<br/>
            It will typically be rendered underneath of all other <see cref="P:MGUI.Core.UI.MGWindow.NestedWindows"/>, unless it is Topmost (See: <see cref="P:MGUI.Core.UI.MGWindow.IsTopmost"/>)</summary>
            <param name="NestedWindow"></param>
            <returns>True if the <paramref name="NestedWindow"/> was moved to the back. False if it was not a valid element in <see cref="P:MGUI.Core.UI.MGWindow.NestedWindows"/>.</returns>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.TitleBarComponent">
            <summary>Provides direct access to the dockpanel component that displays this window's title-bar content.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGWindow.IsTitleBarVisible"/>, <see cref="P:MGUI.Core.UI.MGWindow.TitleBarTextBlockElement"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.TitleBarTextBlockElement">
            <summary>The textblock element that contains this window's <see cref="P:MGUI.Core.UI.MGWindow.TitleText"/> in the title-bar.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.TitleText">
            <summary>This property is functionally equivalent to <see cref="P:MGUI.Core.UI.MGWindow.TitleBarTextBlockElement"/>'s <see cref="P:MGUI.Core.UI.MGTextBlock.Text"/> property.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGWindow.IsTitleBarVisible"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.IsTitleBarVisible">
            <summary>True if the title bar should be visible at the top of this <see cref="T:MGUI.Core.UI.MGWindow"/><para/>
            Default value: true for most types of <see cref="T:MGUI.Core.UI.MGWindow"/>, false for <see cref="T:MGUI.Core.UI.MGToolTip"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.NamedToolTips">
            <summary>This dictionary is commonly used by <see cref="T:MGUI.Core.UI.MGTextBlock"/> to reference <see cref="T:MGUI.Core.UI.MGToolTip"/>s by a string key value.<para/>
            See also:<br/><see cref="M:MGUI.Core.UI.MGWindow.AddNamedToolTip(System.String,MGUI.Core.UI.MGToolTip)"/><br/><see cref="M:MGUI.Core.UI.MGWindow.RemoveNamedToolTip(System.String)"/><para/>
            EX: If you create an <see cref="T:MGUI.Core.UI.MGTextBlock"/> and set its text to:
            <code>[ToolTip=ABC]This text has a ToolTip[/ToolTip] but this text doesn't</code>
            then the ToolTip with the name "ABC" will be shown when hovering over the substring "This text has a ToolTip"</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.WindowMouseHandler">
            <summary>A <see cref="T:MGUI.Shared.Input.Mouse.MouseHandler"/> that is updated just before <see cref="P:MGUI.Core.UI.MGElement.MouseHandler"/> is updated.<para/>
            This allows subscribing to mouse events that can get handled just before the <see cref="T:MGUI.Core.UI.MGWindow"/>'s input handling can occur.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.WindowKeyboardHandler">
            <summary>A <see cref="T:MGUI.Shared.Input.Keyboard.KeyboardHandler"/> that is updated just before <see cref="P:MGUI.Core.UI.MGElement.KeyboardHandler"/> is updated.<para/>
            This allows subscribing to keyboard events that can get handled just before the <see cref="T:MGUI.Core.UI.MGWindow"/>'s input handling can occur.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.AllowsClickThrough">
            <summary>If true, mouse clicks overtop of this <see cref="T:MGUI.Core.UI.MGWindow"/> that weren't handled by any child elements will remain unhandled,<br/>
            allowing content underneath this <see cref="T:MGUI.Core.UI.MGWindow"/> to handle the mouse event.<para/>
            Default value: false<para/>
            This property is ignored if <see cref="P:MGUI.Core.UI.MGWindow.IsModalWindow"/> is true.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.IsDraggable">
            <summary>True if this <see cref="T:MGUI.Core.UI.MGWindow"/> can be moved by dragging the title bar.<para/>
            Warning: You may need to set <see cref="P:MGUI.Core.UI.MGWindow.IsTitleBarVisible"/> to true to utilize this feature.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.Theme">
            <summary>If null, uses <see cref="P:MGUI.Core.UI.MGDesktop.Theme"/> instead.<para/>
            Default value: null<para/>
            See also:<br/><see cref="M:MGUI.Core.UI.MGElement.GetTheme"/><br/><see cref="P:MGUI.Core.UI.MGDesktop.Theme"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.IsTopmost">
            <summary>If true, this <see cref="T:MGUI.Core.UI.MGWindow"/> will always be updated first (so that it has first-chance to receive and handle inputs)
            and drawn last (so that it appears overtop of all other <see cref="T:MGUI.Core.UI.MGWindow"/>s).<para/>
            This property is only respected within the window's scope.<br/>
            If this window is topmost, but is also a nested window of a non-topmost window, it will only be on top of it's siblings (the other nested windows of its parent)<para/>
            If multiple windows are topmost, their draw/update priority depends on their index in <see cref="P:MGUI.Core.UI.MGDesktop.Windows"/> and <see cref="P:MGUI.Core.UI.MGWindow.NestedWindows"/><para/>
            <see cref="P:MGUI.Core.UI.MGWindow.ModalWindow"/>s will still take priority even over topmost windows.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.PressedElement">
            <summary>The inner-most element of the visual tree that the mouse was hovering at the moment that the left mouse button was pressed.<br/>
            Null if the left mouse button is currently released or the mouse wasn't hovering an element when the button was pressed down.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGWindow.HoveredElement"/>, <see cref="E:MGUI.Core.UI.MGWindow.PressedElementChanged"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.HoveredElement">
            <summary>The inner-most element of the visual tree that the mouse is currently hovering, if any.<para/>
            If the mouse is hovering several sibling elements (such as children of an <see cref="T:MGUI.Core.UI.Containers.MGOverlayPanel"/>, or elements placed inside the same cell of an <see cref="T:MGUI.Core.UI.Containers.Grids.MGGrid"/>)<br/>
            then this property prioritizes the topmost element.<para/>
            See also: <see cref="P:MGUI.Core.UI.MGWindow.PressedElement"/>, <see cref="E:MGUI.Core.UI.MGWindow.HoveredElementChanged"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGWindow.PressedElementChanged">
            <summary>Invoked after <see cref="P:MGUI.Core.UI.MGWindow.PressedElement"/> changes, but is intentionally deferred until the end of the current update tick so that <see cref="P:MGUI.Core.UI.MGElement.VisualState"/> 
            values are properly synced with the <see cref="P:MGUI.Core.UI.MGWindow.PressedElement"/></summary>
        </member>
        <member name="E:MGUI.Core.UI.MGWindow.HoveredElementChanged">
            <summary>Invoked after <see cref="P:MGUI.Core.UI.MGWindow.HoveredElement"/> changes, but is intentionally deferred until the end of the current update tick so that <see cref="P:MGUI.Core.UI.MGElement.VisualState"/> 
            values are properly synced with the <see cref="P:MGUI.Core.UI.MGWindow.HoveredElement"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.QueueLayoutRefresh">
            <summary>If true, this <see cref="T:MGUI.Core.UI.MGWindow"/>'s layout will be recomputed at the start of the next update tick.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGWindow.WindowDataContext">
            <summary>The default <see cref="P:MGUI.Core.UI.MGElement.DataContext"/> for all elements that do not explicitly define a <see cref="P:MGUI.Core.UI.MGElement.DataContextOverride"/>.<para/>
            If not specified, this value is automatically inherited from the <see cref="P:MGUI.Core.UI.MGElement.ParentWindow"/> if there is one.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGWindow.#ctor(MGUI.Core.UI.MGDesktop,System.Int32,System.Int32,System.Int32,System.Int32,MGUI.Core.UI.MGTheme)">
            <summary>Initializes a root-level window.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGWindow.#ctor(MGUI.Core.UI.MGWindow,System.Int32,System.Int32,System.Int32,System.Int32,MGUI.Core.UI.MGTheme)">
            <summary>Initializes a nested window (such as a popup). You should still call <see cref="M:MGUI.Core.UI.MGWindow.AddNestedWindow(MGUI.Core.UI.MGWindow)"/> (or set <see cref="P:MGUI.Core.UI.MGWindow.ModalWindow"/>) afterwards.</summary>
        </member>
        <member name="M:MGUI.Core.UI.MGWindow.#ctor(MGUI.Core.UI.MGDesktop,MGUI.Core.UI.MGTheme,MGUI.Core.UI.MGWindow,MGUI.Core.UI.MGElementType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.InvalidOperationException">Thrown if you attempt to change <see cref="P:MGUI.Core.UI.MGElement.HorizontalAlignment"/> or <see cref="P:MGUI.Core.UI.MGElement.VerticalAlignment"/> on this <see cref="T:MGUI.Core.UI.MGWindow"/></exception>
        </member>
        <member name="M:MGUI.Core.UI.MGWindow.MakeDraggable">
            <summary>Intended to be called once during initialization. Subscribes to the appropriate events to allow the user to move this <see cref="T:MGUI.Core.UI.MGWindow"/> by clicking and dragging the window's Title bar.</summary>
        </member>
        <member name="T:MGUI.Core.UI.MGXAMLDesigner">
            <summary>A simple XAML designer that allows you to parse and render XAML markup at runtime.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGXAMLDesigner.IsReadingInputFromFile">
            <summary>True if the input xaml is being read from the file at <see cref="P:MGUI.Core.UI.MGXAMLDesigner.FromFilePath"/>.<br/>
            False if it's being read from the <see cref="P:MGUI.Core.UI.MGXAMLDesigner.FromStringTextBoxComponent"/>'s Text.</summary>
        </member>
        <member name="P:MGUI.Core.UI.MGXAMLDesigner.ParsedContentDataContext">
            <summary>Optional. The default DataContext to apply to the Content immediately after it's been parsed</summary>
        </member>
        <member name="T:MGUI.Core.UI.Text.FTActionType">
            <summary>Represents an action to apply to a piece of formatted text.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Text.FTActionDefinition">
            <summary>Describes a pattern of <see cref="T:MGUI.Core.UI.Text.FTTokenType"/>s to look for to determine what action to apply to a piece of formatted text that contains markdown.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Text.FTActionDefinition.PrimaryTokenType">
            <summary>The token type whose match contains the value that is used as the parameter for the action.<para/>
            For example, <see cref="F:MGUI.Core.UI.Text.FTTokenType.OpacityValue"/> contains the value that should be used when the <see cref="F:MGUI.Core.UI.Text.FTActionType.SetOpacity"/> action is applied.<para/>
            Not all actions require a parameter (such as <see cref="F:MGUI.Core.UI.Text.FTActionType.EnableBold"/>), so this property is not relevant in all cases.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Text.FTActionDefinition.OrderedTokenTypes">
            <summary>The token types that must occur in a specific order to match this action.<para/>
            For example: <see cref="F:MGUI.Core.UI.Text.FTActionType.EnableBold"/> occurs when these tokens appear in this exact order:<br/>
            1. <see cref="F:MGUI.Core.UI.Text.FTTokenType.OpenTag"/><br/>
            2. <see cref="F:MGUI.Core.UI.Text.FTTokenType.BoldOpenTagType"/><br/>
            3. <see cref="F:MGUI.Core.UI.Text.FTTokenType.CloseTag"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Text.FTParser">
            <summary>Parser that determines what actions to apply to a piece of formatted text, such as enabling or disabling bold font, or changing the font foreground color.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Text.FTTokenType">
            <summary>A token parsed from a piece of formatted text that contains markdown.<br/>
            These tokens are used as a first-pass, prior to more detailed parsing performed via <see cref="T:MGUI.Core.UI.Text.FTParser"/>.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Text.FTTokenDefinition">
            <summary>Describes a pattern to look for when tokenizing a piece of formatted text.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Text.FTTokenizer">
            <summary>Tokenizes a piece of formatted text that contains markdown into a list of <see cref="T:MGUI.Core.UI.Text.FTTokenType"/> tokens.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Text.FTTokenizer.EscapeOpenTagChar">
            <summary>If this character is immediately followed by <see cref="F:MGUI.Core.UI.Text.FTTokenizer.OpenTagChar"/>, then this character instructs the tokenizer to treat the following 
            <see cref="F:MGUI.Core.UI.Text.FTTokenizer.OpenTagChar"/> literally instead of as the start of a markdown formatting code.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Text.FTTokenizer.EscapeMarkdown(System.String)">
            <summary>Removes all formatted text markdown from the given <paramref name="Text"/> by prefixing all instances of <see cref="F:MGUI.Core.UI.Text.FTTokenizer.OpenTagChar"/> with <see cref="F:MGUI.Core.UI.Text.FTTokenizer.EscapeOpenTagChar"/>.<para/>
            (This method does not modify <see cref="F:MGUI.Core.UI.Text.FTTokenType.LineBreak"/>s)</summary>
        </member>
        <member name="M:MGUI.Core.UI.Text.FTTokenizer.TryTokenize(System.String,System.Boolean,System.Collections.Generic.List{MGUI.Core.UI.Text.FTTokenMatch}@)">
            <param name="ShouldTokenizeLineBreaks">If true, linebreaks '\n', '\r', "\r\n" will be tokenized as <see cref="F:MGUI.Core.UI.Text.FTTokenType.LineBreak"/>.<br/>
            If false, they will not be tokenized, and will instead remain as a substring inside a <see cref="F:MGUI.Core.UI.Text.FTTokenType.StringLiteral"/> token.<para/>
            Warning - A linebreak is treated as the character literals: '\n', '\r', "\r\n", as opposed to the escaped strings such as @"\n". Be sure not to accidentally use a literal escape character '\\', such as if prefixing a hard-coded string with @.</param>
        </member>
        <member name="M:MGUI.Core.UI.Text.FTTokenizer.Tokenize(System.String,System.Boolean)">
            <param name="ShouldTokenizeLineBreaks">If true, linebreaks '\n', '\r', "\r\n" will be tokenized as <see cref="F:MGUI.Core.UI.Text.FTTokenType.LineBreak"/>.<br/>
            If false, they will not be tokenized, and will instead remain as a substring inside a <see cref="F:MGUI.Core.UI.Text.FTTokenType.StringLiteral"/> token.<para/>
            Warning - A linebreak is treated as the character literals: '\n', '\r', "\r\n", as opposed to the escaped strings such as @"\n". Be sure not to accidentally use a literal escape character '\\', such as if prefixing a hard-coded string with @.</param>
        </member>
        <member name="M:MGUI.Core.UI.Text.FTTokenizer.TokenizeLineBreaks(System.String,System.Boolean)">
            <param name="Enabled">True if '\n', '\r', and "\r\n" characters should be tokenized as <see cref="F:MGUI.Core.UI.Text.FTTokenType.LineBreak"/>.<br/>
            False if the entire <paramref name="Text"/> should be returned as a single <see cref="F:MGUI.Core.UI.Text.FTTokenType.StringLiteral"/> token.</param>
        </member>
        <member name="P:MGUI.Core.UI.Text.MGTextCaret.BlinkRate">
            <summary>The <see cref="P:MGUI.Core.UI.Text.MGTextCaret.Position"/> cycles between showing the cursor for this amount of time, then hiding the cursor for this amount of time. Repeat.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Text.MGTextCaret.MoveToOriginalCharacterIndexOrLeft(System.Int32,System.Boolean)">
            <summary>Moves the caret position to the given side of the given <paramref name="CharIndex"/>.<br/>
            If no character was found at the index, continually navigates left until finding one.</summary>
            <param name="CharIndex">The index in the original text, before it was parsed into <see cref="T:MGUI.Core.UI.Text.MGTextLine"/>s.</param>
        </member>
        <member name="M:MGUI.Core.UI.Text.MGTextCaret.MoveToOriginalCharacterIndexOrRight(System.Int32,System.Boolean)">
            <summary>Moves the caret position to the given side of the given <paramref name="CharIndex"/>.<br/>
            If no character was found at the index, continually navigates right until finding one.</summary>
            <param name="CharIndex">The index in the original text, before it was parsed into <see cref="T:MGUI.Core.UI.Text.MGTextLine"/>s.</param>
        </member>
        <member name="M:MGUI.Core.UI.Text.MGTextCaret.MoveToOriginalCharacterIndexOrEnd(System.Int32,System.Boolean)">
            <summary>Moves the caret position to the given side of the given <paramref name="CharIndex"/>.<br/>
            If no character was found at the index, navigates to the end of the text.</summary>
            <param name="CharIndex">The index in the original text, before it was parsed into <see cref="T:MGUI.Core.UI.Text.MGTextLine"/>s.</param>
        </member>
        <member name="M:MGUI.Core.UI.Text.MGTextCaret.MoveToParsedCharacterIndexOrLeft(System.Int32,System.Boolean)">
            <summary>Moves the caret position to the given side of the given <paramref name="CharIndex"/>.<br/>
            If no character was found at the index, continually navigates left until finding one.</summary>
            <param name="CharIndex">The index in the parsed text (after it was converted into <see cref="T:MGUI.Core.UI.Text.MGTextLine"/>s)</param>
        </member>
        <member name="M:MGUI.Core.UI.Text.MGTextCaret.MoveToParsedCharacterIndexOrRight(System.Int32,System.Boolean)">
            <summary>Moves the caret position to the given side of the given <paramref name="CharIndex"/>.<br/>
            If no character was found at the index, continually navigates right until finding one.</summary>
            <param name="CharIndex">The index in the parsed text (after it was converted into <see cref="T:MGUI.Core.UI.Text.MGTextLine"/>s)</param>
        </member>
        <member name="M:MGUI.Core.UI.Text.MGTextCaret.MoveToParsedCharacterIndexOrEnd(System.Int32,System.Boolean)">
            <summary>Moves the caret position to the given side of the given <paramref name="CharIndex"/>.<br/>
            If no character was found at the index, navigates to the end of the text.</summary>
            <param name="CharIndex">The index in the parsed text (after it was converted into <see cref="T:MGUI.Core.UI.Text.MGTextLine"/>s)</param>
        </member>
        <member name="M:MGUI.Core.UI.Text.ITextMeasurer.MeasureText(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <param name="IgnoreFirstGlyphNegativeLeftSideBearing">Typically true for the first glyph of a line that is being rendered, but false in all other cases.<para/>
            See also: <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.String)"/> source code at:<br/>
            <see href="https://github.com/MonoGame/MonoGame/blob/develop/MonoGame.Framework/Graphics/SpriteFont.cs"/><para/>
            <code>
            if (firstGlyphOfLine) {
                offset.X = Math.Max(pCurrentGlyph->LeftSideBearing, 0);
                firstGlyphOfLine = false;
            }
            </code></param>
        </member>
        <member name="P:MGUI.Core.UI.Text.MGTextLine.LineTextHeight">
            <summary>The height of the text-content of this line.<para/>
            If the line only includes text-content (See: <see cref="T:MGUI.Core.UI.Text.MGTextRunText"/>), then this value is typically equivalent to <see cref="P:MGUI.Core.UI.Text.MGTextLine.LineTotalHeight"/> (unless the line has a MinimumHeight, which is usually the height of a space ' ' character).<br/>
            If the line includes images (See: <see cref="T:MGUI.Core.UI.Text.MGTextRunImage"/>), then this value may differ from <see cref="P:MGUI.Core.UI.Text.MGTextLine.LineTotalHeight"/>, depending on if the tallest image is taller than the tallest piece of text.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Text.MGTextLine.LineImageHeight">
            <summary>The height of the image-content of this line.<para/>
            If the line only includes image-content (See: <see cref="T:MGUI.Core.UI.Text.MGTextRunImage"/>), then this value is equivalent to <see cref="P:MGUI.Core.UI.Text.MGTextLine.LineTotalHeight"/> (unless the line has a MinimumHeight, which is usually the height of a space ' ' character).<br/>
            If the line includes text (See: <see cref="T:MGUI.Core.UI.Text.MGTextRunText"/>), then this value may differ from <see cref="P:MGUI.Core.UI.Text.MGTextLine.LineTotalHeight"/>, depending on if the tallest piece of text is taller than the tallest image.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Text.MGTextLine.LineTotalHeight">
            <summary>The total height of all content of this line.<para/>
            If the line only includes text-content (See: <see cref="T:MGUI.Core.UI.Text.MGTextRunText"/>), then this value is typically equivalent to <see cref="P:MGUI.Core.UI.Text.MGTextLine.LineTextHeight"/>.<br/>
            If the line only includes image-content (See: <see cref="T:MGUI.Core.UI.Text.MGTextRunImage"/>), then this value is typically equivalent to <see cref="P:MGUI.Core.UI.Text.MGTextLine.LineImageHeight"/>.<br/>
            If the line includes both text and images, then represents the larger value of <see cref="P:MGUI.Core.UI.Text.MGTextLine.LineTextHeight"/> and <see cref="P:MGUI.Core.UI.Text.MGTextLine.LineImageHeight"/>.<para/>
            Note: In some cases, the line may have a MinimumHeight (usually the height of a space ' ' character)<br/>
            which may cause this value to be larger than <see cref="P:MGUI.Core.UI.Text.MGTextLine.LineTextHeight"/> and/or <see cref="P:MGUI.Core.UI.Text.MGTextLine.LineImageHeight"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.Text.MGTextLine.LineNumber">
            <summary>The 1-based line number. This value does not use 0-based indexing.</summary>
        </member>
        <member name="P:MGUI.Core.UI.Text.MGTextLine.EndsInLinebreakCharacter">
            <summary>True if the end of this line is due to a linebreak. False if the end of this line is due to text wrapping or because there is no more text afterwards.</summary>
        </member>
        <member name="M:MGUI.Core.UI.Text.MGTextLine.#ctor(System.Collections.Generic.IEnumerable{MGUI.Core.UI.Text.MGTextRun},System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.Int32})">
            <param name="Indices">The indices of the original character that each character in the lines corresponds to. Only used for very specific purposes.<para/>
            EX: If input is a run with Text = "ABC12345", and that text couldn't fit on a single line, it may be split to something like: [ "ABC12-", "345" ]<br/>
            Notice that a '-' character was automatically inserted at the end of the first line, so now the wrapped text at index=5 is '-', while the wrapped text in the input "ABC12345" at index=5 is '3'.<br/>
            So the indices mapping in this case would be: [ 0, 1, 2, 3, 4, 4, 5, 6, 7 ]<para/>
            This parameter is intended to know to which character in the original input corresponds to each character in the wrapped output.</param>
        </member>
        <member name="M:MGUI.Core.UI.Text.MGTextLine.ParseLines(MGUI.Core.UI.Text.ITextMeasurer,System.Double,System.Boolean,System.Collections.Generic.IEnumerable{MGUI.Core.UI.Text.MGTextRun},System.Boolean)">
            <param name="IgnoreEmptySpaceLines">If true, lines consisting of only a single space character will be ignored, unless it is the first line or if it immediately follows a linebreak.<para/>
            For example, if the line could fit exactly 5 characters, and the text is "Hello World", the result would normally be:
            <code>
            -------<br/>
            |Hello|<br/>
            | ....| (This line only contains a space)<br/>
            |World|<br/>
            -------</code>
            If <paramref name="IgnoreEmptySpaceLines"/> is true, it would instead result in:
            <code>
            -------<br/>
            |Hello|<br/>
            |World|<br/>
            -------</code>
            Note that lines consisting of multiple consecutive spaces will still be returned.</param>
        </member>
        <member name="M:MGUI.Core.UI.Text.MGTextLine.ParseLines(MGUI.Core.UI.Text.ITextMeasurer,System.Double,System.Boolean,System.Collections.Generic.IEnumerable{MGUI.Core.UI.Text.MGTextRun},System.Boolean,System.Char[])">
            <param name="IgnoreEmptySpaceLines">If true, lines consisting of only a single space character will be ignored, unless it is the first line or if it immediately follows a linebreak.<para/>
            For example, if the line could fit exactly 5 characters, and the text is "Hello World", the result would normally be:
            <code>
            -------<br/>
            |Hello|<br/>
            | ....| (This line only contains a space)<br/>
            |World|<br/>
            -------</code>
            If <paramref name="IgnoreEmptySpaceLines"/> is true, it would instead result in:
            <code>
            -------<br/>
            |Hello|<br/>
            |World|<br/>
            -------</code>
            Note that lines consisting of multiple consecutive spaces will still be returned.</param>
            <param name="WordDelimiters">Recommended: ' ' (space) and '-' (hyphen)</param>
        </member>
        <member name="T:MGUI.Core.UI.Text.MGTextRun">
            <summary>Represents data that can be rendered in-line with other <see cref="T:MGUI.Core.UI.Text.MGTextRun"/>s.<para/>
            See also:<br/><see cref="T:MGUI.Core.UI.Text.MGTextRunText"/><br/><see cref="T:MGUI.Core.UI.Text.MGTextRunLineBreak"/><br/><see cref="T:MGUI.Core.UI.Text.MGTextRunImage"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.Text.MGTextRunText">
            <summary>An <see cref="T:MGUI.Core.UI.Text.MGTextRun"/> that renders a piece of text with the given <see cref="T:MGUI.Core.UI.Text.MGTextRunConfig"/> settings.</summary>
        </member>
        <member name="T:MGUI.Core.UI.Text.MGTextRunLineBreak">
            <summary>An <see cref="T:MGUI.Core.UI.Text.MGTextRun"/> that instructs the renderer to move to the start of a new line.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Text.MGTextRunLineBreak.LineBreakCharacterCount">
            <summary>The number of characters used to specify the linebreak.<para/>
            Windows typically uses "\r\n" (2 characters) while Mac and Linux typically uses '\r' and '\n' (1 character)</summary>
        </member>
        <member name="M:MGUI.Core.UI.Text.MGTextRunLineBreak.#ctor(System.Int32)">
            <param name="LineBreakCharactersCount">The number of characters used to specify the linebreak.<para/>
            Windows typically uses "\r\n" (2 characters) while Mac and Linux typically uses '\r' and '\n' (1 character)</param>
        </member>
        <member name="T:MGUI.Core.UI.Text.MGTextRunImage">
            <summary>An <see cref="T:MGUI.Core.UI.Text.MGTextRun"/> that renders a specific portion of a <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> with a given size.</summary>
        </member>
        <member name="F:MGUI.Core.UI.Text.MGTextRunImage.SourceName">
            <summary>The name of the <see cref="T:MGUI.Core.UI.MGTextureData"/> to render. This name should exist in <see cref="P:MGUI.Core.UI.MGResources.Textures"/><para/>
            See also:<br/><see cref="P:MGUI.Core.UI.MGDesktop.Resources"/><br/><see cref="M:MGUI.Core.UI.MGElement.GetResources"/><br/><see cref="P:MGUI.Core.UI.MGResources.Textures"/><br/><see cref="M:MGUI.Core.UI.MGResources.AddTexture(System.String,MGUI.Core.UI.MGTextureData)"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.PrimaryVisualState.Disabled">
            <summary>Highest priority. I.E. if an <see cref="T:MGUI.Core.UI.MGElement"/> is both Disabled and Selected, it is treated as Disabled.<br/>
            See also: <see cref="P:MGUI.Core.UI.MGElement.IsEnabled"/>, <see cref="P:MGUI.Core.UI.MGElement.DerivedIsEnabled"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.PrimaryVisualState.Selected">
            <summary>See also: <see cref="P:MGUI.Core.UI.MGElement.IsSelected"/>, <see cref="P:MGUI.Core.UI.MGElement.DerivedIsSelected"/></summary>
        </member>
        <member name="F:MGUI.Core.UI.SecondaryVisualState.Pressed">
            <summary>Highest priority. I.E. if an <see cref="T:MGUI.Core.UI.MGElement"/> is both Pressed and Hovered, it is treated as Pressed.<para/>
            Indicates that the Left MouseButton is currently pressed overtop of the <see cref="T:MGUI.Core.UI.MGElement"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.VisualStateBrush`1.FocusedColor">
            <summary>An overlay color that is drawn overtop if the mouse is currently hovering the <see cref="T:MGUI.Core.UI.MGElement"/>.<br/>
            Recommended to use a transparent color.<para/>
            If the mouse is also pressed overtop of the <see cref="T:MGUI.Core.UI.MGElement"/>, then this color is further adjusted based on <see cref="P:MGUI.Core.UI.VisualStateBrush`1.PressedModifierType"/> and <see cref="P:MGUI.Core.UI.VisualStateBrush`1.PressedModifier"/></summary>
        </member>
        <member name="P:MGUI.Core.UI.VisualStateBrush`1.PressedModifier">
            <summary>A percentage to darken or brighten (depending on <see cref="P:MGUI.Core.UI.VisualStateBrush`1.PressedModifierType"/>) the <see cref="P:MGUI.Core.UI.VisualStateBrush`1.FocusedColor"/> by 
            when the mouse is currently pressed, but not yet released, overtop of the <see cref="T:MGUI.Core.UI.MGElement"/>.</summary>
        </member>
        <member name="M:MGUI.Core.UI.VisualStateBrush`1.GetColorOverlay(MGUI.Core.UI.SecondaryVisualState)">
            <summary>Retrieves the <see cref="T:Microsoft.Xna.Framework.Color"/> used by <see cref="M:MGUI.Core.UI.VisualStateBrush`1.GetFillOverlay(MGUI.Core.UI.SecondaryVisualState)"/> / <see cref="M:MGUI.Core.UI.VisualStateBrush`1.GetBorderOverlay(MGUI.Core.UI.SecondaryVisualState)"/></summary>
        </member>
        <member name="M:MGUI.Core.UI.VisualStateBrush`1.GetFillOverlay(MGUI.Core.UI.SecondaryVisualState)">
            <summary>Returns a <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/> that should be rendered overtop of the element's graphics, not including the border's bounds.</summary>
        </member>
        <member name="M:MGUI.Core.UI.VisualStateBrush`1.GetBorderOverlay(MGUI.Core.UI.SecondaryVisualState)">
            <summary>Returns a <see cref="T:MGUI.Core.UI.Brushes.Border_Brushes.IBorderBrush"/> that should be rendered overtop of the border portion of the element's graphics.</summary>
        </member>
        <member name="T:MGUI.Core.UI.VisualStateFillBrush">
            <summary>A wrapper class for multiple <see cref="T:MGUI.Core.UI.Brushes.Fill_Brushes.IFillBrush"/>es, where a specific one is chosen based on an <see cref="T:MGUI.Core.UI.MGElement"/>'s <see cref="T:MGUI.Core.UI.VisualState"/></summary>
        </member>
        <member name="T:MGUI.Core.UI.VisualStateColorBrush">
            <summary>A wrapper class for multiple <see cref="T:Microsoft.Xna.Framework.Color"/>s, where a specific one is chosen based on an <see cref="T:MGUI.Core.UI.MGElement"/>'s <see cref="T:MGUI.Core.UI.VisualState"/></summary>
        </member>
    </members>
</doc>
